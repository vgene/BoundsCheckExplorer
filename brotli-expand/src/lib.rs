#![feature(prelude_import)]

// To handle weird 
#![feature(libstd_sys_internals)]
#![feature(fmt_internals)]
#![feature(core_panic)]
#![feature(derive_clone_copy)]
#![feature(print_internals)]
#![feature(structural_match)]
#![no_std]
#![no_std]
#![allow(non_snake_case)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#[prelude_import]
use ::core::prelude::v1::*;
extern crate alloc as std_alloc;
//#[macro_use]
//extern crate core;
//#[macro_use]
//extern crate compiler_builtins;


// <-- for debugging, remove xprintln from bit_reader and replace with println
#[macro_use]
#[cfg(feature = "std")]
extern crate std;
#[cfg(feature = "std")]
use std::io::{self, Error, ErrorKind, Read, Write};
#[cfg(feature = "std")]
extern crate alloc_stdlib;
#[macro_use]
extern crate alloc_no_stdlib as alloc;
pub use alloc::{AllocatedStackMemory, Allocator, SliceWrapper,
                SliceWrapperMut, StackAllocator, bzero};
use core::ops;

#[cfg(feature = "std")]
pub use alloc_stdlib::StandardAlloc;
//#[cfg(all(feature="unsafe",feature="std"))]
//pub use alloc_stdlib::HeapAllocUninitialized;
#[macro_use]
mod memory {



    // use io_wrappers::write_all;

    // interface
    // pub fn BrotliDecompressStream(mut available_in: &mut usize,
    //                               input_offset: &mut usize,
    //                               input: &[u8],
    //                               mut available_out: &mut usize,
    //                               mut output_offset: &mut usize,
    //                               mut output: &mut [u8],
    //                               mut total_out: &mut usize,
    //                               mut s: &mut BrotliState<AllocU8, AllocU32, AllocHC>);





    //#[cfg(not(any(feature="unsafe", not(feature="std"))))]


    //#[cfg(all(feature="unsafe",feature="std"))]



    // this would be a call to write_all
    // not allowed by the contract


    // CustomResult::Transient(e) => continue,
    // not allowed by the contract






    // shouldn't shrink too much

}
pub mod dictionary {
    #[allow(non_upper_case_globals)]
    pub const kBrotliDictionaryOffsetsByLength: [u32; 25] =
        [0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248, 63488, 74752,
         87040, 93696, 100864, 104704, 106752, 108928, 113536, 115968, 118528,
         119872, 121280, 122016];
    #[allow(non_upper_case_globals)]
    pub const kBrotliDictionarySizeBitsByLength: [u8; 25] =
        [0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 8, 7,
         7, 6, 6, 5, 5];
    #[allow(non_upper_case_globals)]
    pub const kBrotliMinDictionaryWordLength: u8 = 4;
    #[allow(non_upper_case_globals)]
    pub const kBrotliMaxDictionaryWordLength: u8 = 24;
    #[allow(non_upper_case_globals)]
    pub static kBrotliDictionary: [u8; 122784] =
        [0x74, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x66,
         0x65, 0x6c, 0x65, 0x66, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f,
         0x64, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x6f,
         0x6e, 0x6c, 0x79, 0x73, 0x69, 0x74, 0x65, 0x63, 0x69, 0x74, 0x79,
         0x6f, 0x70, 0x65, 0x6e, 0x6a, 0x75, 0x73, 0x74, 0x6c, 0x69, 0x6b,
         0x65, 0x66, 0x72, 0x65, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x65,
         0x78, 0x74, 0x79, 0x65, 0x61, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x62,
         0x6f, 0x64, 0x79, 0x6c, 0x6f, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d,
         0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x76,
         0x65, 0x6c, 0x69, 0x6e, 0x65, 0x68, 0x65, 0x6c, 0x70, 0x68, 0x6f,
         0x6d, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x77,
         0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6d,
         0x76, 0x69, 0x65, 0x77, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x67,
         0x65, 0x64, 0x61, 0x79, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x68, 0x65,
         0x61, 0x64, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x61, 0x63, 0x68, 0x61,
         0x72, 0x65, 0x61, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x72, 0x75, 0x65,
         0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x75, 0x70, 0x6f,
         0x6e, 0x68, 0x69, 0x67, 0x68, 0x64, 0x61, 0x74, 0x65, 0x6c, 0x61,
         0x6e, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x6e,
         0x65, 0x78, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x74, 0x68,
         0x70, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x64,
         0x65, 0x68, 0x61, 0x6e, 0x64, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68,
         0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x62,
         0x6c, 0x6f, 0x67, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x61, 0x73, 0x65,
         0x68, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6b, 0x65, 0x6d, 0x61, 0x69,
         0x6e, 0x75, 0x73, 0x65, 0x72, 0x27, 0x29, 0x20, 0x2b, 0x68, 0x6f,
         0x6c, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x77, 0x69, 0x74, 0x68, 0x4e,
         0x65, 0x77, 0x73, 0x72, 0x65, 0x61, 0x64, 0x77, 0x65, 0x72, 0x65,
         0x73, 0x69, 0x67, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x76,
         0x65, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x65, 0x6e, 0x63, 0x61,
         0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x77, 0x65, 0x6c, 0x6c, 0x70,
         0x6c, 0x75, 0x73, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x6c, 0x6d,
         0x70, 0x61, 0x72, 0x74, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x68, 0x69,
         0x73, 0x6c, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x6e, 0x65,
         0x65, 0x64, 0x77, 0x61, 0x79, 0x73, 0x77, 0x65, 0x73, 0x74, 0x6a,
         0x6f, 0x62, 0x73, 0x6d, 0x69, 0x6e, 0x64, 0x61, 0x6c, 0x73, 0x6f,
         0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x68, 0x75, 0x73, 0x65,
         0x73, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x65, 0x61, 0x6d, 0x61, 0x72,
         0x6d, 0x79, 0x66, 0x6f, 0x6f, 0x64, 0x6b, 0x69, 0x6e, 0x67, 0x77,
         0x69, 0x6c, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x77, 0x61, 0x72, 0x64,
         0x62, 0x65, 0x73, 0x74, 0x66, 0x69, 0x72, 0x65, 0x50, 0x61, 0x67,
         0x65, 0x6b, 0x6e, 0x6f, 0x77, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70,
         0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x65, 0x74, 0x68, 0x61, 0x6e, 0x6c,
         0x6f, 0x61, 0x64, 0x67, 0x69, 0x76, 0x65, 0x73, 0x65, 0x6c, 0x66,
         0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x75, 0x63, 0x68, 0x66, 0x65, 0x65,
         0x64, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x63,
         0x6f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x68,
         0x69, 0x64, 0x65, 0x64, 0x69, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65,
         0x72, 0x75, 0x6c, 0x65, 0x68, 0x6f, 0x73, 0x74, 0x61, 0x6a, 0x61,
         0x78, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6c, 0x75, 0x62, 0x6c, 0x61,
         0x77, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x68, 0x61, 0x6c, 0x66, 0x73,
         0x6f, 0x6d, 0x65, 0x73, 0x75, 0x63, 0x68, 0x7a, 0x6f, 0x6e, 0x65,
         0x31, 0x30, 0x30, 0x25, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x72,
         0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x63, 0x65, 0x62, 0x6c,
         0x75, 0x65, 0x66, 0x6f, 0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x66,
         0x61, 0x63, 0x65, 0x68, 0x6f, 0x70, 0x65, 0x67, 0x61, 0x76, 0x65,
         0x68, 0x61, 0x72, 0x64, 0x6c, 0x6f, 0x73, 0x74, 0x77, 0x68, 0x65,
         0x6e, 0x70, 0x61, 0x72, 0x6b, 0x6b, 0x65, 0x70, 0x74, 0x70, 0x61,
         0x73, 0x73, 0x73, 0x68, 0x69, 0x70, 0x72, 0x6f, 0x6f, 0x6d, 0x48,
         0x54, 0x4d, 0x4c, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
         0x64, 0x6f, 0x6e, 0x65, 0x73, 0x61, 0x76, 0x65, 0x6b, 0x65, 0x65,
         0x70, 0x66, 0x6c, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x6f,
         0x6c, 0x64, 0x66, 0x69, 0x76, 0x65, 0x74, 0x6f, 0x6f, 0x6b, 0x72,
         0x61, 0x74, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x6a, 0x75, 0x6d, 0x70,
         0x74, 0x68, 0x75, 0x73, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x72,
         0x64, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x65, 0x61, 0x72, 0x73, 0x74,
         0x61, 0x79, 0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x68, 0x61, 0x74, 0x66,
         0x61, 0x6c, 0x6c, 0x61, 0x75, 0x74, 0x6f, 0x65, 0x76, 0x65, 0x72,
         0x2e, 0x63, 0x6f, 0x6d, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x68, 0x6f,
         0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x65, 0x65, 0x70, 0x6d, 0x6f,
         0x64, 0x65, 0x72, 0x65, 0x73, 0x74, 0x74, 0x75, 0x72, 0x6e, 0x62,
         0x6f, 0x72, 0x6e, 0x62, 0x61, 0x6e, 0x64, 0x66, 0x65, 0x6c, 0x6c,
         0x72, 0x6f, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x28, 0x73, 0x6b, 0x69,
         0x6e, 0x72, 0x6f, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x63,
         0x74, 0x73, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x65, 0x65, 0x74, 0x67,
         0x6f, 0x6c, 0x64, 0x2e, 0x6a, 0x70, 0x67, 0x69, 0x74, 0x65, 0x6d,
         0x76, 0x61, 0x72, 0x79, 0x66, 0x65, 0x6c, 0x74, 0x74, 0x68, 0x65,
         0x6e, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x69,
         0x65, 0x77, 0x63, 0x6f, 0x70, 0x79, 0x31, 0x2e, 0x30, 0x22, 0x3c,
         0x2f, 0x61, 0x3e, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0x73, 0x65,
         0x6c, 0x69, 0x65, 0x73, 0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63,
         0x6b, 0x2e, 0x67, 0x69, 0x66, 0x70, 0x61, 0x73, 0x74, 0x63, 0x73,
         0x73, 0x3f, 0x67, 0x72, 0x61, 0x79, 0x6d, 0x65, 0x61, 0x6e, 0x26,
         0x67, 0x74, 0x3b, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f, 0x74,
         0x6c, 0x61, 0x74, 0x65, 0x73, 0x61, 0x69, 0x64, 0x72, 0x6f, 0x61,
         0x64, 0x76, 0x61, 0x72, 0x20, 0x66, 0x65, 0x65, 0x6c, 0x6a, 0x6f,
         0x68, 0x6e, 0x72, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x66,
         0x61, 0x73, 0x74, 0x27, 0x55, 0x41, 0x2d, 0x64, 0x65, 0x61, 0x64,
         0x3c, 0x2f, 0x62, 0x3e, 0x70, 0x6f, 0x6f, 0x72, 0x62, 0x69, 0x6c,
         0x6c, 0x74, 0x79, 0x70, 0x65, 0x55, 0x2e, 0x53, 0x2e, 0x77, 0x6f,
         0x6f, 0x64, 0x6d, 0x75, 0x73, 0x74, 0x32, 0x70, 0x78, 0x3b, 0x49,
         0x6e, 0x66, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x77, 0x69, 0x64, 0x65,
         0x77, 0x61, 0x6e, 0x74, 0x77, 0x61, 0x6c, 0x6c, 0x6c, 0x65, 0x61,
         0x64, 0x5b, 0x30, 0x5d, 0x3b, 0x70, 0x61, 0x75, 0x6c, 0x77, 0x61,
         0x76, 0x65, 0x73, 0x75, 0x72, 0x65, 0x24, 0x28, 0x27, 0x23, 0x77,
         0x61, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x72, 0x6d, 0x73,
         0x67, 0x6f, 0x65, 0x73, 0x67, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x6e,
         0x67, 0x70, 0x61, 0x69, 0x64, 0x21, 0x2d, 0x2d, 0x20, 0x6c, 0x6f,
         0x63, 0x6b, 0x75, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x6f, 0x74, 0x77,
         0x61, 0x6c, 0x6b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x69, 0x66, 0x65,
         0x78, 0x6d, 0x6c, 0x22, 0x73, 0x6f, 0x6e, 0x67, 0x74, 0x65, 0x73,
         0x74, 0x32, 0x30, 0x70, 0x78, 0x6b, 0x69, 0x6e, 0x64, 0x72, 0x6f,
         0x77, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x6e, 0x74, 0x6d,
         0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x73, 0x74, 0x61, 0x72,
         0x6d, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x69,
         0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x61, 0x62, 0x79, 0x73, 0x70,
         0x61, 0x6e, 0x73, 0x61, 0x79, 0x73, 0x34, 0x70, 0x78, 0x3b, 0x36,
         0x70, 0x78, 0x3b, 0x61, 0x72, 0x74, 0x73, 0x66, 0x6f, 0x6f, 0x74,
         0x72, 0x65, 0x61, 0x6c, 0x77, 0x69, 0x6b, 0x69, 0x68, 0x65, 0x61,
         0x74, 0x73, 0x74, 0x65, 0x70, 0x74, 0x72, 0x69, 0x70, 0x6f, 0x72,
         0x67, 0x2f, 0x6c, 0x61, 0x6b, 0x65, 0x77, 0x65, 0x61, 0x6b, 0x74,
         0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x63, 0x61, 0x73, 0x74,
         0x66, 0x61, 0x6e, 0x73, 0x62, 0x61, 0x6e, 0x6b, 0x76, 0x65, 0x72,
         0x79, 0x72, 0x75, 0x6e, 0x73, 0x6a, 0x75, 0x6c, 0x79, 0x74, 0x61,
         0x73, 0x6b, 0x31, 0x70, 0x78, 0x3b, 0x67, 0x6f, 0x61, 0x6c, 0x67,
         0x72, 0x65, 0x77, 0x73, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x67, 0x65,
         0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x74, 0x73, 0x35, 0x70, 0x78,
         0x3b, 0x2e, 0x6a, 0x73, 0x3f, 0x34, 0x30, 0x70, 0x78, 0x69, 0x66,
         0x20, 0x28, 0x73, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x74, 0x6e,
         0x6f, 0x6e, 0x65, 0x74, 0x75, 0x62, 0x65, 0x7a, 0x65, 0x72, 0x6f,
         0x73, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x65, 0x64, 0x66, 0x61, 0x63,
         0x74, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x69, 0x66, 0x74, 0x68, 0x61,
         0x72, 0x6d, 0x31, 0x38, 0x70, 0x78, 0x63, 0x61, 0x6d, 0x65, 0x68,
         0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x6c, 0x64, 0x7a, 0x6f, 0x6f, 0x6d,
         0x76, 0x6f, 0x69, 0x64, 0x65, 0x61, 0x73, 0x79, 0x72, 0x69, 0x6e,
         0x67, 0x66, 0x69, 0x6c, 0x6c, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e,
         0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x33, 0x70, 0x78, 0x3b, 0x6a,
         0x61, 0x63, 0x6b, 0x74, 0x61, 0x67, 0x73, 0x62, 0x69, 0x74, 0x73,
         0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6b, 0x6e, 0x65,
         0x77, 0x6e, 0x65, 0x61, 0x72, 0x3c, 0x21, 0x2d, 0x2d, 0x67, 0x72,
         0x6f, 0x77, 0x4a, 0x53, 0x4f, 0x4e, 0x64, 0x75, 0x74, 0x79, 0x4e,
         0x61, 0x6d, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x79, 0x6f, 0x75, 0x20,
         0x6c, 0x6f, 0x74, 0x73, 0x70, 0x61, 0x69, 0x6e, 0x6a, 0x61, 0x7a,
         0x7a, 0x63, 0x6f, 0x6c, 0x64, 0x65, 0x79, 0x65, 0x73, 0x66, 0x69,
         0x73, 0x68, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x74,
         0x61, 0x62, 0x73, 0x70, 0x72, 0x65, 0x76, 0x31, 0x30, 0x70, 0x78,
         0x72, 0x69, 0x73, 0x65, 0x32, 0x35, 0x70, 0x78, 0x42, 0x6c, 0x75,
         0x65, 0x64, 0x69, 0x6e, 0x67, 0x33, 0x30, 0x30, 0x2c, 0x62, 0x61,
         0x6c, 0x6c, 0x66, 0x6f, 0x72, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x77,
         0x69, 0x6c, 0x64, 0x62, 0x6f, 0x78, 0x2e, 0x66, 0x61, 0x69, 0x72,
         0x6c, 0x61, 0x63, 0x6b, 0x76, 0x65, 0x72, 0x73, 0x70, 0x61, 0x69,
         0x72, 0x6a, 0x75, 0x6e, 0x65, 0x74, 0x65, 0x63, 0x68, 0x69, 0x66,
         0x28, 0x21, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x76, 0x69, 0x6c, 0x24,
         0x28, 0x22, 0x23, 0x77, 0x61, 0x72, 0x6d, 0x6c, 0x6f, 0x72, 0x64,
         0x64, 0x6f, 0x65, 0x73, 0x70, 0x75, 0x6c, 0x6c, 0x2c, 0x30, 0x30,
         0x30, 0x69, 0x64, 0x65, 0x61, 0x64, 0x72, 0x61, 0x77, 0x68, 0x75,
         0x67, 0x65, 0x73, 0x70, 0x6f, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x62,
         0x75, 0x72, 0x6e, 0x68, 0x72, 0x65, 0x66, 0x63, 0x65, 0x6c, 0x6c,
         0x6b, 0x65, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
         0x72, 0x6c, 0x6f, 0x73, 0x73, 0x66, 0x75, 0x65, 0x6c, 0x31, 0x32,
         0x70, 0x78, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x61, 0x6c, 0x52,
         0x53, 0x53, 0x22, 0x61, 0x67, 0x65, 0x64, 0x67, 0x72, 0x65, 0x79,
         0x47, 0x45, 0x54, 0x22, 0x65, 0x61, 0x73, 0x65, 0x61, 0x69, 0x6d,
         0x73, 0x67, 0x69, 0x72, 0x6c, 0x61, 0x69, 0x64, 0x73, 0x38, 0x70,
         0x78, 0x3b, 0x6e, 0x61, 0x76, 0x79, 0x67, 0x72, 0x69, 0x64, 0x74,
         0x69, 0x70, 0x73, 0x23, 0x39, 0x39, 0x39, 0x77, 0x61, 0x72, 0x73,
         0x6c, 0x61, 0x64, 0x79, 0x63, 0x61, 0x72, 0x73, 0x29, 0x3b, 0x20,
         0x7d, 0x70, 0x68, 0x70, 0x3f, 0x68, 0x65, 0x6c, 0x6c, 0x74, 0x61,
         0x6c, 0x6c, 0x77, 0x68, 0x6f, 0x6d, 0x7a, 0x68, 0x3a, 0xe5, 0x2a,
         0x2f, 0x0d, 0x0a, 0x20, 0x31, 0x30, 0x30, 0x68, 0x61, 0x6c, 0x6c,
         0x2e, 0x0a, 0x0a, 0x41, 0x37, 0x70, 0x78, 0x3b, 0x70, 0x75, 0x73,
         0x68, 0x63, 0x68, 0x61, 0x74, 0x30, 0x70, 0x78, 0x3b, 0x63, 0x72,
         0x65, 0x77, 0x2a, 0x2f, 0x3c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x37,
         0x35, 0x70, 0x78, 0x66, 0x6c, 0x61, 0x74, 0x72, 0x61, 0x72, 0x65,
         0x20, 0x26, 0x26, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x63, 0x61, 0x6d,
         0x70, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x61, 0x69, 0x64, 0x6d, 0x69,
         0x73, 0x73, 0x73, 0x6b, 0x69, 0x70, 0x74, 0x65, 0x6e, 0x74, 0x66,
         0x69, 0x6e, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x67, 0x65, 0x74, 0x73,
         0x70, 0x6c, 0x6f, 0x74, 0x34, 0x30, 0x30, 0x2c, 0x0d, 0x0a, 0x0d,
         0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x66, 0x65, 0x65, 0x74, 0x2e, 0x70,
         0x68, 0x70, 0x3c, 0x62, 0x72, 0x3e, 0x65, 0x72, 0x69, 0x63, 0x6d,
         0x6f, 0x73, 0x74, 0x67, 0x75, 0x69, 0x64, 0x62, 0x65, 0x6c, 0x6c,
         0x64, 0x65, 0x73, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x74,
         0x68, 0x61, 0x74, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x67, 0x26, 0x23,
         0x38, 0x32, 0x6c, 0x75, 0x63, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x30,
         0x30, 0x30, 0x3b, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x6e, 0x65,
         0x68, 0x74, 0x6d, 0x6c, 0x73, 0x65, 0x6c, 0x6c, 0x64, 0x72, 0x75,
         0x67, 0x46, 0x52, 0x45, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x69,
         0x63, 0x6b, 0x3f, 0x69, 0x64, 0x3d, 0x6c, 0x6f, 0x73, 0x65, 0x6e,
         0x75, 0x6c, 0x6c, 0x76, 0x61, 0x73, 0x74, 0x77, 0x69, 0x6e, 0x64,
         0x52, 0x53, 0x53, 0x20, 0x77, 0x65, 0x61, 0x72, 0x72, 0x65, 0x6c,
         0x79, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x65, 0x64, 0x75,
         0x6b, 0x65, 0x6e, 0x61, 0x73, 0x61, 0x63, 0x61, 0x70, 0x65, 0x77,
         0x69, 0x73, 0x68, 0x67, 0x75, 0x6c, 0x66, 0x54, 0x32, 0x33, 0x3a,
         0x68, 0x69, 0x74, 0x73, 0x73, 0x6c, 0x6f, 0x74, 0x67, 0x61, 0x74,
         0x65, 0x6b, 0x69, 0x63, 0x6b, 0x62, 0x6c, 0x75, 0x72, 0x74, 0x68,
         0x65, 0x79, 0x31, 0x35, 0x70, 0x78, 0x27, 0x27, 0x29, 0x3b, 0x29,
         0x3b, 0x22, 0x3e, 0x6d, 0x73, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x73,
         0x62, 0x69, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x65, 0x74,
         0x61, 0x73, 0x65, 0x65, 0x6b, 0x54, 0x31, 0x38, 0x3a, 0x6f, 0x72,
         0x64, 0x73, 0x74, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x36,
         0x30, 0x70, 0x78, 0x66, 0x61, 0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73,
         0x62, 0x6f, 0x79, 0x73, 0x5b, 0x30, 0x5d, 0x2e, 0x27, 0x29, 0x3b,
         0x22, 0x50, 0x4f, 0x53, 0x54, 0x62, 0x65, 0x61, 0x72, 0x6b, 0x69,
         0x64, 0x73, 0x29, 0x3b, 0x7d, 0x7d, 0x6d, 0x61, 0x72, 0x79, 0x74,
         0x65, 0x6e, 0x64, 0x28, 0x55, 0x4b, 0x29, 0x71, 0x75, 0x61, 0x64,
         0x7a, 0x68, 0x3a, 0xe6, 0x2d, 0x73, 0x69, 0x7a, 0x2d, 0x2d, 0x2d,
         0x2d, 0x70, 0x72, 0x6f, 0x70, 0x27, 0x29, 0x3b, 0x0d, 0x6c, 0x69,
         0x66, 0x74, 0x54, 0x31, 0x39, 0x3a, 0x76, 0x69, 0x63, 0x65, 0x61,
         0x6e, 0x64, 0x79, 0x64, 0x65, 0x62, 0x74, 0x3e, 0x52, 0x53, 0x53,
         0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x65, 0x63, 0x6b, 0x62, 0x6c, 0x6f,
         0x77, 0x54, 0x31, 0x36, 0x3a, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x76,
         0x61, 0x6c, 0x54, 0x31, 0x37, 0x3a, 0x6c, 0x65, 0x74, 0x73, 0x66,
         0x61, 0x69, 0x6c, 0x6f, 0x72, 0x61, 0x6c, 0x70, 0x6f, 0x6c, 0x6c,
         0x6e, 0x6f, 0x76, 0x61, 0x63, 0x6f, 0x6c, 0x73, 0x67, 0x65, 0x6e,
         0x65, 0x20, 0xe2, 0x80, 0x94, 0x73, 0x6f, 0x66, 0x74, 0x72, 0x6f,
         0x6d, 0x65, 0x74, 0x69, 0x6c, 0x6c, 0x72, 0x6f, 0x73, 0x73, 0x3c,
         0x68, 0x33, 0x3e, 0x70, 0x6f, 0x75, 0x72, 0x66, 0x61, 0x64, 0x65,
         0x70, 0x69, 0x6e, 0x6b, 0x3c, 0x74, 0x72, 0x3e, 0x6d, 0x69, 0x6e,
         0x69, 0x29, 0x7c, 0x21, 0x28, 0x6d, 0x69, 0x6e, 0x65, 0x7a, 0x68,
         0x3a, 0xe8, 0x62, 0x61, 0x72, 0x73, 0x68, 0x65, 0x61, 0x72, 0x30,
         0x30, 0x29, 0x3b, 0x6d, 0x69, 0x6c, 0x6b, 0x20, 0x2d, 0x2d, 0x3e,
         0x69, 0x72, 0x6f, 0x6e, 0x66, 0x72, 0x65, 0x64, 0x64, 0x69, 0x73,
         0x6b, 0x77, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x69, 0x6c, 0x70, 0x75,
         0x74, 0x73, 0x2f, 0x6a, 0x73, 0x2f, 0x68, 0x6f, 0x6c, 0x79, 0x54,
         0x32, 0x32, 0x3a, 0x49, 0x53, 0x42, 0x4e, 0x54, 0x32, 0x30, 0x3a,
         0x61, 0x64, 0x61, 0x6d, 0x73, 0x65, 0x65, 0x73, 0x3c, 0x68, 0x32,
         0x3e, 0x6a, 0x73, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x27, 0x63, 0x6f,
         0x6e, 0x74, 0x54, 0x32, 0x31, 0x3a, 0x20, 0x52, 0x53, 0x53, 0x6c,
         0x6f, 0x6f, 0x70, 0x61, 0x73, 0x69, 0x61, 0x6d, 0x6f, 0x6f, 0x6e,
         0x3c, 0x2f, 0x70, 0x3e, 0x73, 0x6f, 0x75, 0x6c, 0x4c, 0x49, 0x4e,
         0x45, 0x66, 0x6f, 0x72, 0x74, 0x63, 0x61, 0x72, 0x74, 0x54, 0x31,
         0x34, 0x3a, 0x3c, 0x68, 0x31, 0x3e, 0x38, 0x30, 0x70, 0x78, 0x21,
         0x2d, 0x2d, 0x3c, 0x39, 0x70, 0x78, 0x3b, 0x54, 0x30, 0x34, 0x3a,
         0x6d, 0x69, 0x6b, 0x65, 0x3a, 0x34, 0x36, 0x5a, 0x6e, 0x69, 0x63,
         0x65, 0x69, 0x6e, 0x63, 0x68, 0x59, 0x6f, 0x72, 0x6b, 0x72, 0x69,
         0x63, 0x65, 0x7a, 0x68, 0x3a, 0xe4, 0x27, 0x29, 0x29, 0x3b, 0x70,
         0x75, 0x72, 0x65, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x72, 0x61,
         0x74, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x3a, 0x33, 0x37,
         0x5a, 0x5f, 0x6f, 0x66, 0x5f, 0x27, 0x5d, 0x29, 0x3b, 0x30, 0x30,
         0x30, 0x2c, 0x7a, 0x68, 0x3a, 0xe7, 0x74, 0x61, 0x6e, 0x6b, 0x79,
         0x61, 0x72, 0x64, 0x62, 0x6f, 0x77, 0x6c, 0x62, 0x75, 0x73, 0x68,
         0x3a, 0x35, 0x36, 0x5a, 0x4a, 0x61, 0x76, 0x61, 0x33, 0x30, 0x70,
         0x78, 0x0a, 0x7c, 0x7d, 0x0a, 0x25, 0x43, 0x33, 0x25, 0x3a, 0x33,
         0x34, 0x5a, 0x6a, 0x65, 0x66, 0x66, 0x45, 0x58, 0x50, 0x49, 0x63,
         0x61, 0x73, 0x68, 0x76, 0x69, 0x73, 0x61, 0x67, 0x6f, 0x6c, 0x66,
         0x73, 0x6e, 0x6f, 0x77, 0x7a, 0x68, 0x3a, 0xe9, 0x71, 0x75, 0x65,
         0x72, 0x2e, 0x63, 0x73, 0x73, 0x73, 0x69, 0x63, 0x6b, 0x6d, 0x65,
         0x61, 0x74, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x64,
         0x65, 0x6c, 0x6c, 0x68, 0x69, 0x72, 0x65, 0x70, 0x69, 0x63, 0x73,
         0x72, 0x65, 0x6e, 0x74, 0x3a, 0x33, 0x36, 0x5a, 0x48, 0x54, 0x54,
         0x50, 0x2d, 0x32, 0x30, 0x31, 0x66, 0x6f, 0x74, 0x6f, 0x77, 0x6f,
         0x6c, 0x66, 0x45, 0x4e, 0x44, 0x20, 0x78, 0x62, 0x6f, 0x78, 0x3a,
         0x35, 0x34, 0x5a, 0x42, 0x4f, 0x44, 0x59, 0x64, 0x69, 0x63, 0x6b,
         0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x3a, 0x33, 0x35,
         0x5a, 0x76, 0x61, 0x72, 0x73, 0x62, 0x65, 0x61, 0x74, 0x27, 0x7d,
         0x29, 0x3b, 0x64, 0x69, 0x65, 0x74, 0x39, 0x39, 0x39, 0x3b, 0x61,
         0x6e, 0x6e, 0x65, 0x7d, 0x7d, 0x3c, 0x2f, 0x5b, 0x69, 0x5d, 0x2e,
         0x4c, 0x61, 0x6e, 0x67, 0x6b, 0x6d, 0xc2, 0xb2, 0x77, 0x69, 0x72,
         0x65, 0x74, 0x6f, 0x79, 0x73, 0x61, 0x64, 0x64, 0x73, 0x73, 0x65,
         0x61, 0x6c, 0x61, 0x6c, 0x65, 0x78, 0x3b, 0x0a, 0x09, 0x7d, 0x65,
         0x63, 0x68, 0x6f, 0x6e, 0x69, 0x6e, 0x65, 0x2e, 0x6f, 0x72, 0x67,
         0x30, 0x30, 0x35, 0x29, 0x74, 0x6f, 0x6e, 0x79, 0x6a, 0x65, 0x77,
         0x73, 0x73, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x67, 0x73, 0x72, 0x6f,
         0x6f, 0x66, 0x30, 0x30, 0x30, 0x29, 0x20, 0x32, 0x30, 0x30, 0x77,
         0x69, 0x6e, 0x65, 0x67, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x67, 0x73,
         0x62, 0x6f, 0x6f, 0x74, 0x67, 0x61, 0x72, 0x79, 0x63, 0x75, 0x74,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69,
         0x6f, 0x6e, 0x2e, 0x78, 0x6d, 0x6c, 0x63, 0x6f, 0x63, 0x6b, 0x67,
         0x61, 0x6e, 0x67, 0x24, 0x28, 0x27, 0x2e, 0x35, 0x30, 0x70, 0x78,
         0x50, 0x68, 0x2e, 0x44, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x61,
         0x6e, 0x6c, 0x6f, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x6d, 0x69,
         0x6c, 0x65, 0x72, 0x79, 0x61, 0x6e, 0x75, 0x6e, 0x69, 0x78, 0x64,
         0x69, 0x73, 0x63, 0x29, 0x3b, 0x7d, 0x0a, 0x64, 0x75, 0x73, 0x74,
         0x63, 0x6c, 0x69, 0x70, 0x29, 0x2e, 0x0a, 0x0a, 0x37, 0x30, 0x70,
         0x78, 0x2d, 0x32, 0x30, 0x30, 0x44, 0x56, 0x44, 0x73, 0x37, 0x5d,
         0x3e, 0x3c, 0x74, 0x61, 0x70, 0x65, 0x64, 0x65, 0x6d, 0x6f, 0x69,
         0x2b, 0x2b, 0x29, 0x77, 0x61, 0x67, 0x65, 0x65, 0x75, 0x72, 0x6f,
         0x70, 0x68, 0x69, 0x6c, 0x6f, 0x70, 0x74, 0x73, 0x68, 0x6f, 0x6c,
         0x65, 0x46, 0x41, 0x51, 0x73, 0x61, 0x73, 0x69, 0x6e, 0x2d, 0x32,
         0x36, 0x54, 0x6c, 0x61, 0x62, 0x73, 0x70, 0x65, 0x74, 0x73, 0x55,
         0x52, 0x4c, 0x20, 0x62, 0x75, 0x6c, 0x6b, 0x63, 0x6f, 0x6f, 0x6b,
         0x3b, 0x7d, 0x0d, 0x0a, 0x48, 0x45, 0x41, 0x44, 0x5b, 0x30, 0x5d,
         0x29, 0x61, 0x62, 0x62, 0x72, 0x6a, 0x75, 0x61, 0x6e, 0x28, 0x31,
         0x39, 0x38, 0x6c, 0x65, 0x73, 0x68, 0x74, 0x77, 0x69, 0x6e, 0x3c,
         0x2f, 0x69, 0x3e, 0x73, 0x6f, 0x6e, 0x79, 0x67, 0x75, 0x79, 0x73,
         0x66, 0x75, 0x63, 0x6b, 0x70, 0x69, 0x70, 0x65, 0x7c, 0x2d, 0x0a,
         0x21, 0x30, 0x30, 0x32, 0x29, 0x6e, 0x64, 0x6f, 0x77, 0x5b, 0x31,
         0x5d, 0x3b, 0x5b, 0x5d, 0x3b, 0x0a, 0x4c, 0x6f, 0x67, 0x20, 0x73,
         0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09, 0x09, 0x62, 0x61, 0x6e, 0x67,
         0x74, 0x72, 0x69, 0x6d, 0x62, 0x61, 0x74, 0x68, 0x29, 0x7b, 0x0d,
         0x0a, 0x30, 0x30, 0x70, 0x78, 0x0a, 0x7d, 0x29, 0x3b, 0x6b, 0x6f,
         0x3a, 0xec, 0x66, 0x65, 0x65, 0x73, 0x61, 0x64, 0x3e, 0x0d, 0x73,
         0x3a, 0x2f, 0x2f, 0x20, 0x5b, 0x5d, 0x3b, 0x74, 0x6f, 0x6c, 0x6c,
         0x70, 0x6c, 0x75, 0x67, 0x28, 0x29, 0x7b, 0x0a, 0x7b, 0x0d, 0x0a,
         0x20, 0x2e, 0x6a, 0x73, 0x27, 0x32, 0x30, 0x30, 0x70, 0x64, 0x75,
         0x61, 0x6c, 0x62, 0x6f, 0x61, 0x74, 0x2e, 0x4a, 0x50, 0x47, 0x29,
         0x3b, 0x0a, 0x7d, 0x71, 0x75, 0x6f, 0x74, 0x29, 0x3b, 0x0a, 0x0a,
         0x27, 0x29, 0x3b, 0x0a, 0x0d, 0x0a, 0x7d, 0x0d, 0x32, 0x30, 0x31,
         0x34, 0x32, 0x30, 0x31, 0x35, 0x32, 0x30, 0x31, 0x36, 0x32, 0x30,
         0x31, 0x37, 0x32, 0x30, 0x31, 0x38, 0x32, 0x30, 0x31, 0x39, 0x32,
         0x30, 0x32, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 0x30, 0x32, 0x32,
         0x32, 0x30, 0x32, 0x33, 0x32, 0x30, 0x32, 0x34, 0x32, 0x30, 0x32,
         0x35, 0x32, 0x30, 0x32, 0x36, 0x32, 0x30, 0x32, 0x37, 0x32, 0x30,
         0x32, 0x38, 0x32, 0x30, 0x32, 0x39, 0x32, 0x30, 0x33, 0x30, 0x32,
         0x30, 0x33, 0x31, 0x32, 0x30, 0x33, 0x32, 0x32, 0x30, 0x33, 0x33,
         0x32, 0x30, 0x33, 0x34, 0x32, 0x30, 0x33, 0x35, 0x32, 0x30, 0x33,
         0x36, 0x32, 0x30, 0x33, 0x37, 0x32, 0x30, 0x31, 0x33, 0x32, 0x30,
         0x31, 0x32, 0x32, 0x30, 0x31, 0x31, 0x32, 0x30, 0x31, 0x30, 0x32,
         0x30, 0x30, 0x39, 0x32, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x37,
         0x32, 0x30, 0x30, 0x36, 0x32, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30,
         0x34, 0x32, 0x30, 0x30, 0x33, 0x32, 0x30, 0x30, 0x32, 0x32, 0x30,
         0x30, 0x31, 0x32, 0x30, 0x30, 0x30, 0x31, 0x39, 0x39, 0x39, 0x31,
         0x39, 0x39, 0x38, 0x31, 0x39, 0x39, 0x37, 0x31, 0x39, 0x39, 0x36,
         0x31, 0x39, 0x39, 0x35, 0x31, 0x39, 0x39, 0x34, 0x31, 0x39, 0x39,
         0x33, 0x31, 0x39, 0x39, 0x32, 0x31, 0x39, 0x39, 0x31, 0x31, 0x39,
         0x39, 0x30, 0x31, 0x39, 0x38, 0x39, 0x31, 0x39, 0x38, 0x38, 0x31,
         0x39, 0x38, 0x37, 0x31, 0x39, 0x38, 0x36, 0x31, 0x39, 0x38, 0x35,
         0x31, 0x39, 0x38, 0x34, 0x31, 0x39, 0x38, 0x33, 0x31, 0x39, 0x38,
         0x32, 0x31, 0x39, 0x38, 0x31, 0x31, 0x39, 0x38, 0x30, 0x31, 0x39,
         0x37, 0x39, 0x31, 0x39, 0x37, 0x38, 0x31, 0x39, 0x37, 0x37, 0x31,
         0x39, 0x37, 0x36, 0x31, 0x39, 0x37, 0x35, 0x31, 0x39, 0x37, 0x34,
         0x31, 0x39, 0x37, 0x33, 0x31, 0x39, 0x37, 0x32, 0x31, 0x39, 0x37,
         0x31, 0x31, 0x39, 0x37, 0x30, 0x31, 0x39, 0x36, 0x39, 0x31, 0x39,
         0x36, 0x38, 0x31, 0x39, 0x36, 0x37, 0x31, 0x39, 0x36, 0x36, 0x31,
         0x39, 0x36, 0x35, 0x31, 0x39, 0x36, 0x34, 0x31, 0x39, 0x36, 0x33,
         0x31, 0x39, 0x36, 0x32, 0x31, 0x39, 0x36, 0x31, 0x31, 0x39, 0x36,
         0x30, 0x31, 0x39, 0x35, 0x39, 0x31, 0x39, 0x35, 0x38, 0x31, 0x39,
         0x35, 0x37, 0x31, 0x39, 0x35, 0x36, 0x31, 0x39, 0x35, 0x35, 0x31,
         0x39, 0x35, 0x34, 0x31, 0x39, 0x35, 0x33, 0x31, 0x39, 0x35, 0x32,
         0x31, 0x39, 0x35, 0x31, 0x31, 0x39, 0x35, 0x30, 0x31, 0x30, 0x30,
         0x30, 0x31, 0x30, 0x32, 0x34, 0x31, 0x33, 0x39, 0x34, 0x30, 0x30,
         0x30, 0x30, 0x39, 0x39, 0x39, 0x39, 0x63, 0x6f, 0x6d, 0x6f, 0x6d,
         0xc3, 0xa1, 0x73, 0x65, 0x73, 0x74, 0x65, 0x65, 0x73, 0x74, 0x61,
         0x70, 0x65, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x6f, 0x68, 0x61, 0x63,
         0x65, 0x63, 0x61, 0x64, 0x61, 0x61, 0xc3, 0xb1, 0x6f, 0x62, 0x69,
         0x65, 0x6e, 0x64, 0xc3, 0xad, 0x61, 0x61, 0x73, 0xc3, 0xad, 0x76,
         0x69, 0x64, 0x61, 0x63, 0x61, 0x73, 0x6f, 0x6f, 0x74, 0x72, 0x6f,
         0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6f, 0x6c, 0x6f, 0x6f, 0x74, 0x72,
         0x61, 0x63, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x6a, 0x6f, 0x73, 0x69,
         0x64, 0x6f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x74,
         0x65, 0x6d, 0x61, 0x64, 0x65, 0x62, 0x65, 0x61, 0x6c, 0x67, 0x6f,
         0x71, 0x75, 0xc3, 0xa9, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x61, 0x64,
         0x61, 0x74, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x63, 0x61,
         0x73, 0x61, 0x62, 0x61, 0x6a, 0x6f, 0x74, 0x6f, 0x64, 0x61, 0x73,
         0x69, 0x6e, 0x6f, 0x61, 0x67, 0x75, 0x61, 0x70, 0x75, 0x65, 0x73,
         0x75, 0x6e, 0x6f, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x69, 0x63,
         0x65, 0x6c, 0x75, 0x69, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x6d, 0x61,
         0x79, 0x6f, 0x7a, 0x6f, 0x6e, 0x61, 0x61, 0x6d, 0x6f, 0x72, 0x70,
         0x69, 0x73, 0x6f, 0x6f, 0x62, 0x72, 0x61, 0x63, 0x6c, 0x69, 0x63,
         0x65, 0x6c, 0x6c, 0x6f, 0x64, 0x69, 0x6f, 0x73, 0x68, 0x6f, 0x72,
         0x61, 0x63, 0x61, 0x73, 0x69, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd,
         0xd0, 0xb0, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x80, 0xd0, 0xb0, 0xd1,
         0x80, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5,
         0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0,
         0xb7, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x82,
         0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd1, 0x85, 0xd0, 0x9d, 0xd0, 0xb0, 0xd0, 0xb5, 0xd0, 0xb5,
         0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0x92, 0xd1,
         0x8b, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb2,
         0xd0, 0xbe, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0,
         0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8,
         0xd0, 0xa0, 0xd0, 0xa4, 0xd0, 0x9d, 0xd0, 0xb5, 0xd0, 0x9c, 0xd1,
         0x8b, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8,
         0xd0, 0xbc, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0x97, 0xd0, 0xb0, 0xd0,
         0x94, 0xd0, 0xb0, 0xd0, 0x9d, 0xd1, 0x83, 0xd0, 0x9e, 0xd0, 0xb1,
         0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0x98, 0xd0, 0xb7, 0xd0, 0xb5, 0xd0,
         0xb9, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xa2,
         0xd1, 0x8b, 0xd1, 0x83, 0xd0, 0xb6, 0xd9, 0x81, 0xd9, 0x8a, 0xd8,
         0xa3, 0xd9, 0x86, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9,
         0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x88, 0xd8, 0xb1, 0xd8,
         0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x89, 0xd9, 0x87,
         0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x83, 0xd8,
         0xa7, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa8, 0xd8, 0xb3,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd9, 0x86, 0xd9, 0x87, 0xd9,
         0x8a, 0xd8, 0xa3, 0xd9, 0x8a, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x87,
         0xd9, 0x84, 0xd8, 0xab, 0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x87, 0xd9,
         0x84, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa8, 0xd9, 0x84,
         0xd8, 0xa7, 0xd9, 0x8a, 0xd8, 0xa8, 0xd9, 0x83, 0xd8, 0xb4, 0xd9,
         0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa3, 0xd9, 0x85, 0xd9, 0x86,
         0xd8, 0xaa, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x84, 0xd9, 0x86, 0xd8,
         0xad, 0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xb4,
         0xd9, 0x88, 0xd8, 0xb4, 0x66, 0x69, 0x72, 0x73, 0x74, 0x76, 0x69,
         0x64, 0x65, 0x6f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x6f, 0x72,
         0x6c, 0x64, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x68, 0x69, 0x74,
         0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6c, 0x61, 0x63, 0x6b,
         0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62,
         0x6f, 0x6f, 0x6b, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x75,
         0x73, 0x69, 0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75,
         0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x74, 0x61, 0x62, 0x6c, 0x65,
         0x62, 0x6f, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x67,
         0x72, 0x6f, 0x75, 0x70, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x79, 0x65,
         0x61, 0x72, 0x73, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x64,
         0x61, 0x79, 0x77, 0x61, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72,
         0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x64, 0x65, 0x61, 0x74, 0x68,
         0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
         0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e,
         0x70, 0x75, 0x74, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x74, 0x65, 0x72,
         0x6d, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x6f, 0x6f, 0x6c,
         0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
         0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x77,
         0x6f, 0x72, 0x64, 0x73, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68,
         0x6f, 0x72, 0x74, 0x73, 0x70, 0x61, 0x63, 0x65, 0x66, 0x6f, 0x63,
         0x75, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x65,
         0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x67, 0x75, 0x69, 0x64, 0x65,
         0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x77,
         0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x6f,
         0x6e, 0x65, 0x79, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d,
         0x65, 0x73, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x65,
         0x73, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
         0x67, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x26,
         0x61, 0x6d, 0x70, 0x3b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x66, 0x6f,
         0x72, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x75, 0x6c,
         0x65, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x61, 0x66, 0x74, 0x65,
         0x72, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65,
         0x61, 0x72, 0x65, 0x61, 0x73, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x69,
         0x6e, 0x64, 0x65, 0x78, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x68, 0x6f,
         0x75, 0x72, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x72, 0x69,
         0x6e, 0x74, 0x70, 0x72, 0x65, 0x73, 0x73, 0x62, 0x75, 0x69, 0x6c,
         0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x73, 0x70, 0x65, 0x65, 0x64,
         0x73, 0x74, 0x75, 0x64, 0x79, 0x74, 0x72, 0x61, 0x64, 0x65, 0x66,
         0x6f, 0x75, 0x6e, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x75, 0x6e,
         0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x66, 0x6f, 0x72,
         0x6d, 0x73, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x64, 0x64, 0x65,
         0x64, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x6d, 0x6f, 0x76, 0x65, 0x64,
         0x74, 0x61, 0x6b, 0x65, 0x6e, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x66,
         0x6c, 0x61, 0x73, 0x68, 0x66, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x66,
         0x74, 0x65, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x76, 0x69, 0x65,
         0x77, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x65, 0x67, 0x61,
         0x6c, 0x72, 0x69, 0x76, 0x65, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x73,
         0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68, 0x61, 0x70, 0x65, 0x68,
         0x75, 0x6d, 0x61, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x67, 0x6f,
         0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x68, 0x69,
         0x72, 0x64, 0x62, 0x61, 0x73, 0x69, 0x63, 0x70, 0x65, 0x61, 0x63,
         0x65, 0x73, 0x74, 0x61, 0x67, 0x65, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x64, 0x65, 0x61, 0x73, 0x77,
         0x72, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x75, 0x73,
         0x65, 0x72, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
         0x72, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x6f, 0x75, 0x74,
         0x68, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x69, 0x74, 0x65, 0x73,
         0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x77, 0x68, 0x65, 0x72, 0x65, 0x62,
         0x75, 0x69, 0x6c, 0x64, 0x77, 0x68, 0x69, 0x63, 0x68, 0x65, 0x61,
         0x72, 0x74, 0x68, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x74, 0x68, 0x72,
         0x65, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x61, 0x72, 0x74,
         0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x77, 0x65, 0x72,
         0x6c, 0x69, 0x76, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c,
         0x61, 0x79, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x74,
         0x6f, 0x72, 0x79, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x6f, 0x75,
         0x6e, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x79, 0x6f, 0x75, 0x72,
         0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6f, 0x70, 0x75, 0x70,
         0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,
         0x6d, 0x61, 0x67, 0x65, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x75, 0x70,
         0x70, 0x65, 0x72, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x65, 0x76, 0x65,
         0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x6d, 0x65, 0x61, 0x6e,
         0x73, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x63, 0x68,
         0x74, 0x72, 0x61, 0x63, 0x6b, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x65,
         0x61, 0x72, 0x6c, 0x79, 0x62, 0x65, 0x67, 0x61, 0x6e, 0x73, 0x75,
         0x70, 0x65, 0x72, 0x70, 0x61, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x72,
         0x74, 0x68, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x67, 0x69, 0x76, 0x65,
         0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x6e, 0x64, 0x65, 0x64,
         0x54, 0x65, 0x72, 0x6d, 0x73, 0x70, 0x61, 0x72, 0x74, 0x73, 0x47,
         0x72, 0x6f, 0x75, 0x70, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x75, 0x73,
         0x69, 0x6e, 0x67, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x66, 0x61, 0x6c,
         0x73, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x61, 0x75, 0x64, 0x69,
         0x6f, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x77, 0x68, 0x69, 0x6c, 0x65,
         0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x63,
         0x61, 0x73, 0x65, 0x73, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x63, 0x68,
         0x69, 0x6c, 0x64, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6a, 0x75, 0x64,
         0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x75, 0x6e, 0x69, 0x74,
         0x73, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72, 0x6f, 0x61, 0x64,
         0x63, 0x6f, 0x61, 0x73, 0x74, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
         0x70, 0x70, 0x6c, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x63, 0x79,
         0x63, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x70, 0x6c, 0x61,
         0x6e, 0x73, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x77, 0x72, 0x69, 0x74,
         0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x70, 0x69, 0x65, 0x63, 0x65,
         0x65, 0x6d, 0x61, 0x69, 0x6c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x6f,
         0x6c, 0x64, 0x65, 0x72, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6c, 0x69,
         0x6d, 0x69, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x63, 0x69, 0x76,
         0x69, 0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
         0x74, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x72,
         0x6f, 0x79, 0x61, 0x6c, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x77, 0x68,
         0x6f, 0x6c, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
         0x63, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x61, 0x69, 0x74,
         0x68, 0x68, 0x65, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
         0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x6f,
         0x77, 0x6e, 0x65, 0x64, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x61, 0x6c,
         0x62, 0x75, 0x6d, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x62, 0x6c, 0x6f,
         0x6f, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6d, 0x61, 0x6a, 0x6f,
         0x72, 0x74, 0x72, 0x75, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
         0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x76,
         0x61, 0x6c, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74,
         0x79, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x68, 0x61, 0x70,
         0x70, 0x79, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x6c, 0x65, 0x66, 0x74,
         0x3a, 0x66, 0x72, 0x65, 0x73, 0x68, 0x71, 0x75, 0x69, 0x74, 0x65,
         0x66, 0x69, 0x6c, 0x6d, 0x73, 0x67, 0x72, 0x61, 0x64, 0x65, 0x6e,
         0x65, 0x65, 0x64, 0x73, 0x75, 0x72, 0x62, 0x61, 0x6e, 0x66, 0x69,
         0x67, 0x68, 0x74, 0x62, 0x61, 0x73, 0x69, 0x73, 0x68, 0x6f, 0x76,
         0x65, 0x72, 0x61, 0x75, 0x74, 0x6f, 0x3b, 0x72, 0x6f, 0x75, 0x74,
         0x65, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x69, 0x78, 0x65, 0x64,
         0x66, 0x69, 0x6e, 0x61, 0x6c, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x73,
         0x6c, 0x69, 0x64, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x62, 0x72,
         0x6f, 0x77, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x61,
         0x77, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x72, 0x65, 0x61, 0x63,
         0x68, 0x52, 0x69, 0x67, 0x68, 0x74, 0x64, 0x61, 0x74, 0x65, 0x73,
         0x6d, 0x61, 0x72, 0x63, 0x68, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x67,
         0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x64, 0x6f,
         0x75, 0x62, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x74, 0x68, 0x75,
         0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x69, 0x65,
         0x66, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
         0x31, 0x30, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x75,
         0x6e, 0x74, 0x69, 0x6c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x68,
         0x65, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x71, 0x75, 0x65,
         0x72, 0x79, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x71, 0x75, 0x61,
         0x6c, 0x74, 0x77, 0x69, 0x63, 0x65, 0x30, 0x2c, 0x30, 0x30, 0x30,
         0x53, 0x74, 0x61, 0x72, 0x74, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,
         0x6f, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x69,
         0x67, 0x68, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x72,
         0x74, 0x68, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x64,
         0x73, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x61, 0x76, 0x6f, 0x69, 0x64,
         0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x70,
         0x6c, 0x61, 0x6e, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x61, 0x6c,
         0x70, 0x68, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6d, 0x61, 0x72,
         0x6b, 0x73, 0x72, 0x61, 0x74, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x79,
         0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x61, 0x6c, 0x65, 0x73,
         0x74, 0x65, 0x78, 0x74, 0x73, 0x73, 0x74, 0x61, 0x72, 0x73, 0x77,
         0x72, 0x6f, 0x6e, 0x67, 0x3c, 0x2f, 0x68, 0x33, 0x3e, 0x74, 0x68,
         0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6d, 0x75, 0x6c,
         0x74, 0x69, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,
         0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
         0x73, 0x6f, 0x6c, 0x69, 0x64, 0x28, 0x74, 0x68, 0x69, 0x73, 0x62,
         0x72, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x69, 0x70, 0x73, 0x73, 0x74,
         0x61, 0x66, 0x66, 0x74, 0x72, 0x69, 0x65, 0x64, 0x63, 0x61, 0x6c,
         0x6c, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x63, 0x74,
         0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x73, 0x20,
         0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x65,
         0x67, 0x79, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x35,
         0x70, 0x78, 0x3b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x72, 0x75,
         0x65, 0x22, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x73, 0x70, 0x65, 0x6e,
         0x74, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x6f, 0x78, 0x22, 0x3e,
         0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x63,
         0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x67, 0x75,
         0x65, 0x73, 0x74, 0x3c, 0x2f, 0x68, 0x34, 0x3e, 0x72, 0x6f, 0x62,
         0x6f, 0x74, 0x68, 0x65, 0x61, 0x76, 0x79, 0x74, 0x72, 0x75, 0x65,
         0x2c, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x64,
         0x63, 0x72, 0x69, 0x6d, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x61,
         0x77, 0x61, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x70, 0x68,
         0x61, 0x73, 0x65, 0x3e, 0x3c, 0x21, 0x2d, 0x2d, 0x65, 0x6e, 0x5f,
         0x55, 0x53, 0x26, 0x23, 0x33, 0x39, 0x3b, 0x32, 0x30, 0x30, 0x70,
         0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e,
         0x65, 0x6e, 0x6a, 0x6f, 0x79, 0x61, 0x6a, 0x61, 0x78, 0x2e, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x55, 0x2e,
         0x53, 0x2e, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x70, 0x65, 0x74,
         0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61, 0x76, 0x22,
         0x3e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,
         0x63, 0x6f, 0x6d, 0x65, 0x73, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x70,
         0x72, 0x69, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x31, 0x39,
         0x39, 0x30, 0x73, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x6c, 0x69, 0x73,
         0x74, 0x73, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x66, 0x61, 0x6c, 0x6c,
         0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x72,
         0x61, 0x67, 0x72, 0x65, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x61,
         0x62, 0x75, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70,
         0x65, 0x72, 0x61, 0x22, 0x2d, 0x2f, 0x2f, 0x57, 0x63, 0x61, 0x72,
         0x64, 0x73, 0x68, 0x69, 0x6c, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x6d,
         0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x74, 0x72, 0x75, 0x74, 0x68,
         0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x73,
         0x61, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f,
         0x75, 0x69, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x70, 0x72, 0x6f,
         0x6f, 0x66, 0x62, 0x72, 0x69, 0x65, 0x66, 0x72, 0x6f, 0x77, 0x22,
         0x3e, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x75, 0x63, 0x6b,
         0x6c, 0x6f, 0x6f, 0x6b, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
         0x72, 0x61, 0x6d, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x2d, 0x2d,
         0x3e, 0x0a, 0x3c, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x0a, 0x76, 0x61,
         0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x63, 0x6f, 0x73, 0x74,
         0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x64, 0x75, 0x6c, 0x74,
         0x71, 0x75, 0x65, 0x73, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x6c,
         0x61, 0x62, 0x6f, 0x72, 0x68, 0x65, 0x6c, 0x70, 0x73, 0x63, 0x61,
         0x75, 0x73, 0x65, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x6d, 0x6f, 0x74,
         0x6f, 0x72, 0x74, 0x68, 0x65, 0x69, 0x72, 0x32, 0x35, 0x30, 0x70,
         0x78, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x73, 0x74, 0x65, 0x70, 0x73,
         0x43, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x67,
         0x6c, 0x61, 0x73, 0x73, 0x73, 0x69, 0x64, 0x65, 0x73, 0x66, 0x75,
         0x6e, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x61, 0x77, 0x61,
         0x72, 0x64, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x6d, 0x6f, 0x76, 0x65,
         0x73, 0x70, 0x61, 0x72, 0x69, 0x73, 0x67, 0x69, 0x76, 0x65, 0x73,
         0x64, 0x75, 0x74, 0x63, 0x68, 0x74, 0x65, 0x78, 0x61, 0x73, 0x66,
         0x72, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x7c, 0x7c,
         0x5b, 0x5d, 0x3b, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x0a, 0x3c, 0x21,
         0x2d, 0x2d, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x6f, 0x63, 0x65, 0x61,
         0x6e, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
         0x73, 0x70, 0x65, 0x61, 0x6b, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20,
         0x73, 0x69, 0x7a, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x63, 0x61,
         0x74, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32, 0x30, 0x70,
         0x78, 0x3b, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x64, 0x65, 0x61, 0x6c,
         0x73, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x35, 0x30, 0x70, 0x78, 0x3b,
         0x75, 0x72, 0x6c, 0x3d, 0x22, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x6d,
         0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x20, 0x2e, 0x2e,
         0x2e, 0x3c, 0x2f, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x62, 0x72, 0x61,
         0x69, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e, 0x6f, 0x6e, 0x65,
         0x3b, 0x62, 0x61, 0x73, 0x65, 0x64, 0x63, 0x61, 0x72, 0x72, 0x79,
         0x64, 0x72, 0x61, 0x66, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x70,
         0x61, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x6d, 0x65,
         0x74, 0x65, 0x72, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x64, 0x72, 0x65,
         0x61, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
         0x74, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x64, 0x72, 0x75, 0x67, 0x73,
         0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x69,
         0x64, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x78,
         0x61, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x63, 0x6f, 0x64,
         0x65, 0x73, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x56, 0x69, 0x65, 0x77,
         0x20, 0x73, 0x65, 0x65, 0x6d, 0x73, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
         0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x28, 0x32, 0x30, 0x30, 0x73,
         0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x67, 0x6f,
         0x61, 0x6c, 0x73, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x67, 0x72, 0x65,
         0x65, 0x6b, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x72, 0x69, 0x6e, 0x67,
         0x73, 0x72, 0x61, 0x74, 0x65, 0x64, 0x33, 0x30, 0x70, 0x78, 0x3b,
         0x77, 0x68, 0x6f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x28,
         0x29, 0x3b, 0x22, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69,
         0x6e, 0x75, 0x78, 0x6a, 0x6f, 0x6e, 0x65, 0x73, 0x70, 0x69, 0x78,
         0x65, 0x6c, 0x27, 0x29, 0x3b, 0x22, 0x3e, 0x29, 0x3b, 0x69, 0x66,
         0x28, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x64, 0x61, 0x76, 0x69, 0x64,
         0x68, 0x6f, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x72,
         0x61, 0x69, 0x73, 0x65, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x54, 0x72,
         0x61, 0x63, 0x6b, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x65,
         0x6d, 0x3e, 0x62, 0x61, 0x72, 0x22, 0x3e, 0x2e, 0x73, 0x72, 0x63,
         0x3d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x3d, 0x22,
         0x63, 0x61, 0x62, 0x6c, 0x65, 0x68, 0x65, 0x6e, 0x72, 0x79, 0x32,
         0x34, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x74,
         0x61, 0x6c, 0x79, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6d, 0x69, 0x6e,
         0x6f, 0x72, 0x74, 0x61, 0x73, 0x74, 0x65, 0x77, 0x61, 0x6e, 0x74,
         0x73, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x74,
         0x77, 0x68, 0x65, 0x65, 0x6c, 0x67, 0x69, 0x72, 0x6c, 0x73, 0x2f,
         0x63, 0x73, 0x73, 0x2f, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x63, 0x6c,
         0x75, 0x62, 0x73, 0x73, 0x74, 0x75, 0x66, 0x66, 0x62, 0x69, 0x62,
         0x6c, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x31, 0x30, 0x30,
         0x30, 0x6b, 0x6f, 0x72, 0x65, 0x61, 0x7d, 0x29, 0x3b, 0x0d, 0x0a,
         0x62, 0x61, 0x6e, 0x64, 0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3d,
         0x20, 0x7b, 0x7d, 0x3b, 0x38, 0x30, 0x70, 0x78, 0x3b, 0x63, 0x6b,
         0x69, 0x6e, 0x67, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x61, 0x68, 0x65,
         0x61, 0x64, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x72, 0x69, 0x73,
         0x68, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f,
         0x73, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x79,
         0x61, 0x68, 0x6f, 0x6f, 0x29, 0x5b, 0x30, 0x5d, 0x3b, 0x41, 0x62,
         0x6f, 0x75, 0x74, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x3c, 0x2f, 0x68,
         0x31, 0x3e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x74, 0x61, 0x73, 0x6b,
         0x73, 0x55, 0x52, 0x4c, 0x20, 0x3d, 0x63, 0x65, 0x6c, 0x6c, 0x73,
         0x7d, 0x29, 0x28, 0x29, 0x3b, 0x31, 0x32, 0x70, 0x78, 0x3b, 0x70,
         0x72, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x6c, 0x73, 0x74, 0x75,
         0x72, 0x6e, 0x73, 0x30, 0x78, 0x36, 0x30, 0x30, 0x2e, 0x6a, 0x70,
         0x67, 0x22, 0x73, 0x70, 0x61, 0x69, 0x6e, 0x62, 0x65, 0x61, 0x63,
         0x68, 0x74, 0x61, 0x78, 0x65, 0x73, 0x6d, 0x69, 0x63, 0x72, 0x6f,
         0x61, 0x6e, 0x67, 0x65, 0x6c, 0x2d, 0x2d, 0x3e, 0x3c, 0x2f, 0x67,
         0x69, 0x66, 0x74, 0x73, 0x73, 0x74, 0x65, 0x76, 0x65, 0x2d, 0x6c,
         0x69, 0x6e, 0x6b, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x7d, 0x29, 0x3b,
         0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x31, 0x39,
         0x39, 0x46, 0x41, 0x51, 0x3c, 0x2f, 0x72, 0x6f, 0x67, 0x65, 0x72,
         0x66, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32,
         0x38, 0x70, 0x78, 0x3b, 0x66, 0x65, 0x65, 0x64, 0x73, 0x3c, 0x68,
         0x31, 0x3e, 0x3c, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x74, 0x65, 0x73,
         0x74, 0x73, 0x32, 0x32, 0x70, 0x78, 0x3b, 0x64, 0x72, 0x69, 0x6e,
         0x6b, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x6c, 0x65, 0x77, 0x69, 0x73,
         0x73, 0x68, 0x61, 0x6c, 0x6c, 0x23, 0x30, 0x33, 0x39, 0x3b, 0x20,
         0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x76, 0x65, 0x64, 0x77, 0x61,
         0x73, 0x74, 0x65, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x6a, 0x61, 0x3a,
         0xe3, 0x82, 0x73, 0x69, 0x6d, 0x6f, 0x6e, 0x3c, 0x66, 0x6f, 0x6e,
         0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x6d, 0x65, 0x65, 0x74, 0x73,
         0x75, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x61, 0x70, 0x74,
         0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x29, 0x20,
         0x21, 0x3d, 0x20, 0x64, 0x72, 0x65, 0x73, 0x73, 0x63, 0x6c, 0x69,
         0x70, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x6f, 0x6e, 0x6b, 0x65,
         0x79, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
         0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x66,
         0x75, 0x6e, 0x6e, 0x79, 0x74, 0x72, 0x65, 0x65, 0x73, 0x63, 0x6f,
         0x6d, 0x2f, 0x22, 0x31, 0x2e, 0x6a, 0x70, 0x67, 0x77, 0x6d, 0x6f,
         0x64, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x54, 0x41, 0x52,
         0x54, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x64, 0x64, 0x65, 0x6e,
         0x2c, 0x20, 0x32, 0x30, 0x31, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66,
         0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x69, 0x72, 0x75, 0x73, 0x63, 0x68,
         0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x6f, 0x72,
         0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x3c, 0x21, 0x2d, 0x2d, 0x0a,
         0x6f, 0x2d, 0x63, 0x61, 0x63, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x74,
         0x6f, 0x75, 0x72, 0x73, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x61, 0x73,
         0x69, 0x61, 0x6e, 0x69, 0x2b, 0x2b, 0x29, 0x7b, 0x61, 0x64, 0x6f,
         0x62, 0x65, 0x27, 0x29, 0x5b, 0x30, 0x5d, 0x69, 0x64, 0x3d, 0x31,
         0x30, 0x62, 0x6f, 0x74, 0x68, 0x3b, 0x6d, 0x65, 0x6e, 0x75, 0x20,
         0x2e, 0x32, 0x2e, 0x6d, 0x69, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x6b,
         0x65, 0x76, 0x69, 0x6e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x43, 0x68,
         0x69, 0x6c, 0x64, 0x62, 0x72, 0x75, 0x63, 0x65, 0x32, 0x2e, 0x6a,
         0x70, 0x67, 0x55, 0x52, 0x4c, 0x29, 0x2b, 0x2e, 0x6a, 0x70, 0x67,
         0x7c, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x6c, 0x69, 0x63, 0x65,
         0x68, 0x61, 0x72, 0x72, 0x79, 0x31, 0x32, 0x30, 0x22, 0x20, 0x73,
         0x77, 0x65, 0x65, 0x74, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x64, 0x69, 0x65, 0x67, 0x6f, 0x70, 0x61, 0x67,
         0x65, 0x20, 0x73, 0x77, 0x69, 0x73, 0x73, 0x2d, 0x2d, 0x3e, 0x0a,
         0x0a, 0x23, 0x66, 0x66, 0x66, 0x3b, 0x22, 0x3e, 0x4c, 0x6f, 0x67,
         0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x74, 0x72, 0x65, 0x61, 0x74, 0x73,
         0x68, 0x65, 0x65, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20, 0x31, 0x34,
         0x70, 0x78, 0x3b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x6e, 0x74, 0x65,
         0x6e, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x6a, 0x61, 0x3a, 0xe3,
         0x83, 0x69, 0x64, 0x3d, 0x22, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22,
         0x77, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2d,
         0x62, 0x6f, 0x78, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x0a, 0x26,
         0x6c, 0x74, 0x3b, 0x62, 0x65, 0x61, 0x72, 0x73, 0x3a, 0x34, 0x38,
         0x5a, 0x3c, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x75, 0x72, 0x61,
         0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x73, 0x70, 0x65, 0x6e, 0x64,
         0x62, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x3d,
         0x20, 0x22, 0x22, 0x3b, 0x70, 0x68, 0x70, 0x22, 0x3e, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x31, 0x33, 0x70, 0x78, 0x3b, 0x62, 0x72, 0x69,
         0x61, 0x6e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x69, 0x7a, 0x65,
         0x3d, 0x6f, 0x3d, 0x25, 0x32, 0x46, 0x20, 0x6a, 0x6f, 0x69, 0x6e,
         0x6d, 0x61, 0x79, 0x62, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x69,
         0x6d, 0x67, 0x22, 0x3e, 0x2c, 0x20, 0x66, 0x6a, 0x73, 0x69, 0x6d,
         0x67, 0x22, 0x20, 0x22, 0x29, 0x5b, 0x30, 0x5d, 0x4d, 0x54, 0x6f,
         0x70, 0x42, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x65, 0x77, 0x6c,
         0x79, 0x44, 0x61, 0x6e, 0x73, 0x6b, 0x63, 0x7a, 0x65, 0x63, 0x68,
         0x74, 0x72, 0x61, 0x69, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x73, 0x3c,
         0x2f, 0x68, 0x35, 0x3e, 0x66, 0x61, 0x71, 0x22, 0x3e, 0x7a, 0x68,
         0x2d, 0x63, 0x6e, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x2d, 0x31, 0x22,
         0x29, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x62, 0x6c, 0x75, 0x65,
         0x73, 0x74, 0x72, 0x75, 0x6c, 0x79, 0x64, 0x61, 0x76, 0x69, 0x73,
         0x2e, 0x6a, 0x73, 0x27, 0x3b, 0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x73,
         0x74, 0x65, 0x65, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x32,
         0x3e, 0x0d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6a, 0x65, 0x73,
         0x75, 0x73, 0x31, 0x30, 0x30, 0x25, 0x20, 0x6d, 0x65, 0x6e, 0x75,
         0x2e, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x77, 0x61, 0x6c, 0x65, 0x73,
         0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x64,
         0x64, 0x69, 0x6e, 0x67, 0x62, 0x2d, 0x6c, 0x69, 0x6b, 0x74, 0x65,
         0x61, 0x63, 0x68, 0x67, 0x69, 0x66, 0x22, 0x20, 0x76, 0x65, 0x67,
         0x61, 0x73, 0x64, 0x61, 0x6e, 0x73, 0x6b, 0x65, 0x65, 0x73, 0x74,
         0x69, 0x73, 0x68, 0x71, 0x69, 0x70, 0x73, 0x75, 0x6f, 0x6d, 0x69,
         0x73, 0x6f, 0x62, 0x72, 0x65, 0x64, 0x65, 0x73, 0x64, 0x65, 0x65,
         0x6e, 0x74, 0x72, 0x65, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x70, 0x75,
         0x65, 0x64, 0x65, 0x61, 0xc3, 0xb1, 0x6f, 0x73, 0x65, 0x73, 0x74,
         0xc3, 0xa1, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x68, 0x61, 0x73, 0x74,
         0x61, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x61, 0x72, 0x74, 0x65,
         0x64, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x75, 0x65, 0x76, 0x6f, 0x68,
         0x61, 0x63, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6d, 0x69,
         0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x6d, 0x75, 0x6e,
         0x64, 0x6f, 0x61, 0x71, 0x75, 0xc3, 0xad, 0x64, 0xc3, 0xad, 0x61,
         0x73, 0x73, 0xc3, 0xb3, 0x6c, 0x6f, 0x61, 0x79, 0x75, 0x64, 0x61,
         0x66, 0x65, 0x63, 0x68, 0x61, 0x74, 0x6f, 0x64, 0x61, 0x73, 0x74,
         0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x64, 0x61,
         0x74, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x61, 0x73, 0x73, 0x69, 0x74,
         0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x61, 0x68, 0x6f, 0x72,
         0x61, 0x6c, 0x75, 0x67, 0x61, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72,
         0x65, 0x73, 0x74, 0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x73, 0x74,
         0x65, 0x6e, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x66, 0x6f,
         0x74, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61, 0x73, 0x70, 0x61, 0xc3,
         0xad, 0x73, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x61, 0x6c, 0x75,
         0x64, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x6f,
         0x71, 0x75, 0x69, 0x65, 0x6e, 0x6d, 0x65, 0x73, 0x65, 0x73, 0x70,
         0x6f, 0x64, 0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x65, 0x73, 0x65,
         0x72, 0xc3, 0xa1, 0x76, 0x65, 0x63, 0x65, 0x73, 0x64, 0x65, 0x63,
         0x69, 0x72, 0x6a, 0x6f, 0x73, 0xc3, 0xa9, 0x65, 0x73, 0x74, 0x61,
         0x72, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x72, 0x75, 0x70, 0x6f,
         0x68, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74,
         0x65, 0x6e, 0x67, 0x6f, 0x61, 0x6d, 0x69, 0x67, 0x6f, 0x63, 0x6f,
         0x73, 0x61, 0x73, 0x6e, 0x69, 0x76, 0x65, 0x6c, 0x67, 0x65, 0x6e,
         0x74, 0x65, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x61, 0x69, 0x72, 0x65,
         0x73, 0x6a, 0x75, 0x6c, 0x69, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x73,
         0x68, 0x61, 0x63, 0x69, 0x61, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x6a,
         0x75, 0x6e, 0x69, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x65, 0x70, 0x75,
         0x6e, 0x74, 0x6f, 0x62, 0x75, 0x65, 0x6e, 0x6f, 0x61, 0x75, 0x74,
         0x6f, 0x72, 0x61, 0x62, 0x72, 0x69, 0x6c, 0x62, 0x75, 0x65, 0x6e,
         0x61, 0x74, 0x65, 0x78, 0x74, 0x6f, 0x6d, 0x61, 0x72, 0x7a, 0x6f,
         0x73, 0x61, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c,
         0x75, 0x65, 0x67, 0x6f, 0x63, 0xc3, 0xb3, 0x6d, 0x6f, 0x65, 0x6e,
         0x65, 0x72, 0x6f, 0x6a, 0x75, 0x65, 0x67, 0x6f, 0x70, 0x65, 0x72,
         0xc3, 0xba, 0x68, 0x61, 0x62, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f,
         0x79, 0x6e, 0x75, 0x6e, 0x63, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72,
         0x76, 0x61, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x65, 0x72, 0x61, 0x6c,
         0x69, 0x62, 0x72, 0x6f, 0x67, 0x75, 0x73, 0x74, 0x61, 0x69, 0x67,
         0x75, 0x61, 0x6c, 0x76, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x73,
         0x6f, 0x73, 0x67, 0x75, 0xc3, 0xad, 0x61, 0x70, 0x75, 0x65, 0x64,
         0x6f, 0x73, 0x6f, 0x6d, 0x6f, 0x73, 0x61, 0x76, 0x69, 0x73, 0x6f,
         0x75, 0x73, 0x74, 0x65, 0x64, 0x64, 0x65, 0x62, 0x65, 0x6e, 0x6e,
         0x6f, 0x63, 0x68, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61, 0x66, 0x61,
         0x6c, 0x74, 0x61, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x72,
         0x69, 0x65, 0x64, 0x69, 0x63, 0x68, 0x6f, 0x63, 0x75, 0x72, 0x73,
         0x6f, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x63, 0x61, 0x73, 0x61, 0x73,
         0x6c, 0x65, 0xc3, 0xb3, 0x6e, 0x70, 0x6c, 0x61, 0x7a, 0x6f, 0x6c,
         0x61, 0x72, 0x67, 0x6f, 0x6f, 0x62, 0x72, 0x61, 0x73, 0x76, 0x69,
         0x73, 0x74, 0x61, 0x61, 0x70, 0x6f, 0x79, 0x6f, 0x6a, 0x75, 0x6e,
         0x74, 0x6f, 0x74, 0x72, 0x61, 0x74, 0x61, 0x76, 0x69, 0x73, 0x74,
         0x6f, 0x63, 0x72, 0x65, 0x61, 0x72, 0x63, 0x61, 0x6d, 0x70, 0x6f,
         0x68, 0x65, 0x6d, 0x6f, 0x73, 0x63, 0x69, 0x6e, 0x63, 0x6f, 0x63,
         0x61, 0x72, 0x67, 0x6f, 0x70, 0x69, 0x73, 0x6f, 0x73, 0x6f, 0x72,
         0x64, 0x65, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x6e, 0xc3, 0xa1, 0x72,
         0x65, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x72,
         0x6f, 0x63, 0x65, 0x72, 0x63, 0x61, 0x70, 0x75, 0x65, 0x64, 0x61,
         0x70, 0x61, 0x70, 0x65, 0x6c, 0x6d, 0x65, 0x6e, 0x6f, 0x72, 0xc3,
         0xba, 0x74, 0x69, 0x6c, 0x63, 0x6c, 0x61, 0x72, 0x6f, 0x6a, 0x6f,
         0x72, 0x67, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x70, 0x6f, 0x6e,
         0x65, 0x72, 0x74, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x61, 0x64, 0x69,
         0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x73, 0x69, 0x67, 0x75, 0x65,
         0x65, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6c, 0x6f, 0x63,
         0x6f, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x73, 0x6d, 0x61,
         0x64, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73,
         0x74, 0x6f, 0x6e, 0x69, 0xc3, 0xb1, 0x6f, 0x71, 0x75, 0x65, 0x64,
         0x61, 0x70, 0x61, 0x73, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x63, 0x6f,
         0x68, 0x69, 0x6a, 0x6f, 0x73, 0x76, 0x69, 0x61, 0x6a, 0x65, 0x70,
         0x61, 0x62, 0x6c, 0x6f, 0xc3, 0xa9, 0x73, 0x74, 0x65, 0x76, 0x69,
         0x65, 0x6e, 0x65, 0x72, 0x65, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x6a,
         0x61, 0x72, 0x66, 0x6f, 0x6e, 0x64, 0x6f, 0x63, 0x61, 0x6e, 0x61,
         0x6c, 0x6e, 0x6f, 0x72, 0x74, 0x65, 0x6c, 0x65, 0x74, 0x72, 0x61,
         0x63, 0x61, 0x75, 0x73, 0x61, 0x74, 0x6f, 0x6d, 0x61, 0x72, 0x6d,
         0x61, 0x6e, 0x6f, 0x73, 0x6c, 0x75, 0x6e, 0x65, 0x73, 0x61, 0x75,
         0x74, 0x6f, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x76, 0x65, 0x6e,
         0x64, 0x6f, 0x70, 0x65, 0x73, 0x61, 0x72, 0x74, 0x69, 0x70, 0x6f,
         0x73, 0x74, 0x65, 0x6e, 0x67, 0x61, 0x6d, 0x61, 0x72, 0x63, 0x6f,
         0x6c, 0x6c, 0x65, 0x76, 0x61, 0x70, 0x61, 0x64, 0x72, 0x65, 0x75,
         0x6e, 0x69, 0x64, 0x6f, 0x76, 0x61, 0x6d, 0x6f, 0x73, 0x7a, 0x6f,
         0x6e, 0x61, 0x73, 0x61, 0x6d, 0x62, 0x6f, 0x73, 0x62, 0x61, 0x6e,
         0x64, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x61, 0x62, 0x75, 0x73,
         0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x75, 0x62, 0x69, 0x72,
         0x72, 0x69, 0x6f, 0x6a, 0x61, 0x76, 0x69, 0x76, 0x69, 0x72, 0x67,
         0x72, 0x61, 0x64, 0x6f, 0x63, 0x68, 0x69, 0x63, 0x61, 0x61, 0x6c,
         0x6c, 0xc3, 0xad, 0x6a, 0x6f, 0x76, 0x65, 0x6e, 0x64, 0x69, 0x63,
         0x68, 0x61, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x65,
         0x73, 0x73, 0x61, 0x6c, 0x69, 0x72, 0x73, 0x75, 0x65, 0x6c, 0x6f,
         0x70, 0x65, 0x73, 0x6f, 0x73, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x6c,
         0x6c, 0x61, 0x6d, 0x61, 0x62, 0x75, 0x73, 0x63, 0x6f, 0xc3, 0xa9,
         0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6e, 0x65, 0x67,
         0x72, 0x6f, 0x70, 0x6c, 0x61, 0x7a, 0x61, 0x68, 0x75, 0x6d, 0x6f,
         0x72, 0x70, 0x61, 0x67, 0x61, 0x72, 0x6a, 0x75, 0x6e, 0x74, 0x61,
         0x64, 0x6f, 0x62, 0x6c, 0x65, 0x69, 0x73, 0x6c, 0x61, 0x73, 0x62,
         0x6f, 0x6c, 0x73, 0x61, 0x62, 0x61, 0xc3, 0xb1, 0x6f, 0x68, 0x61,
         0x62, 0x6c, 0x61, 0x6c, 0x75, 0x63, 0x68, 0x61, 0xc3, 0x81, 0x72,
         0x65, 0x61, 0x64, 0x69, 0x63, 0x65, 0x6e, 0x6a, 0x75, 0x67, 0x61,
         0x72, 0x6e, 0x6f, 0x74, 0x61, 0x73, 0x76, 0x61, 0x6c, 0x6c, 0x65,
         0x61, 0x6c, 0x6c, 0xc3, 0xa1, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64,
         0x6f, 0x6c, 0x6f, 0x72, 0x61, 0x62, 0x61, 0x6a, 0x6f, 0x65, 0x73,
         0x74, 0xc3, 0xa9, 0x67, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x6e,
         0x74, 0x65, 0x6d, 0x61, 0x72, 0x69, 0x6f, 0x66, 0x69, 0x72, 0x6d,
         0x61, 0x63, 0x6f, 0x73, 0x74, 0x6f, 0x66, 0x69, 0x63, 0x68, 0x61,
         0x70, 0x6c, 0x61, 0x74, 0x61, 0x68, 0x6f, 0x67, 0x61, 0x72, 0x61,
         0x72, 0x74, 0x65, 0x73, 0x6c, 0x65, 0x79, 0x65, 0x73, 0x61, 0x71,
         0x75, 0x65, 0x6c, 0x6d, 0x75, 0x73, 0x65, 0x6f, 0x62, 0x61, 0x73,
         0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x73, 0x6d, 0x69, 0x74, 0x61,
         0x64, 0x63, 0x69, 0x65, 0x6c, 0x6f, 0x63, 0x68, 0x69, 0x63, 0x6f,
         0x6d, 0x69, 0x65, 0x64, 0x6f, 0x67, 0x61, 0x6e, 0x61, 0x72, 0x73,
         0x61, 0x6e, 0x74, 0x6f, 0x65, 0x74, 0x61, 0x70, 0x61, 0x64, 0x65,
         0x62, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x72, 0x65, 0x64,
         0x65, 0x73, 0x73, 0x69, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x74,
         0x65, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x64, 0x75, 0x64, 0x61, 0x73,
         0x64, 0x65, 0x73, 0x65, 0x6f, 0x76, 0x69, 0x65, 0x6a, 0x6f, 0x64,
         0x65, 0x73, 0x65, 0x61, 0x61, 0x67, 0x75, 0x61, 0x73, 0x26, 0x71,
         0x75, 0x6f, 0x74, 0x3b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63,
         0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
         0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65,
         0x72, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x6d,
         0x6f, 0x76, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
         0x64, 0x61, 0x74, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6d,
         0x65, 0x64, 0x69, 0x75, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
         0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67,
         0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x75, 0x62, 0x6c,
         0x69, 0x63, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x68, 0x6f,
         0x6f, 0x73, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x74, 0x72,
         0x61, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x73,
         0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
         0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
         0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x77, 0x69, 0x74,
         0x63, 0x68, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x6f, 0x72,
         0x64, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x69, 0x74,
         0x73, 0x65, 0x6c, 0x66, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x61,
         0x63, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
         0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
         0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x65, 0x69, 0x74, 0x68,
         0x65, 0x72, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x66, 0x61, 0x6d,
         0x69, 0x6c, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x61,
         0x79, 0x6f, 0x75, 0x74, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x63,
         0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
         0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
         0x72, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x70, 0x6c, 0x61, 0x79,
         0x65, 0x72, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x70, 0x6f, 0x6c,
         0x69, 0x63, 0x79, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x64, 0x6f,
         0x75, 0x62, 0x6c, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x73,
         0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
         0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67,
         0x6e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x66, 0x6f, 0x72, 0x63,
         0x65, 0x73, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x77, 0x65, 0x69,
         0x67, 0x68, 0x74, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x65, 0x6e,
         0x65, 0x72, 0x67, 0x79, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
         0x65, 0x61, 0x72, 0x63, 0x68, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
         0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x63, 0x75, 0x73, 0x74, 0x6f,
         0x6d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x74, 0x74,
         0x65, 0x72, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x75, 0x62,
         0x6d, 0x69, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72,
         0x6f, 0x75, 0x70, 0x73, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x68,
         0x65, 0x61, 0x6c, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
         0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x6f, 0x6f,
         0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x61, 0x64,
         0x6f, 0x77, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c,
         0x75, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x74,
         0x68, 0x65, 0x72, 0x73, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c,
         0x65, 0x61, 0x67, 0x75, 0x65, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
         0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x63,
         0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x64, 0x69,
         0x6e, 0x67, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x70,
         0x6f, 0x72, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x71,
         0x75, 0x61, 0x72, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x69,
         0x6d, 0x61, 0x67, 0x65, 0x73, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
         0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x74, 0x65, 0x73,
         0x74, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6e,
         0x63, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x74, 0x72,
         0x6f, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4c, 0x6f,
         0x6e, 0x64, 0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x66,
         0x6f, 0x72, 0x6d, 0x65, 0x64, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
         0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x70, 0x61, 0x73, 0x73, 0x65,
         0x64, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x70, 0x6c, 0x61, 0x63,
         0x65, 0x73, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x61,
         0x74, 0x69, 0x63, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x74,
         0x72, 0x65, 0x61, 0x6d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
         0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
         0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x69, 0x64, 0x64, 0x65,
         0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x6f, 0x70, 0x65, 0x6e,
         0x65, 0x64, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x76, 0x61, 0x6c,
         0x6c, 0x65, 0x79, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x65,
         0x61, 0x64, 0x65, 0x72, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
         0x65, 0x63, 0x6f, 0x6e, 0x64, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
         0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x70,
         0x74, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x69, 0x67, 0x6e,
         0x65, 0x64, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x66, 0x66,
         0x65, 0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x73, 0x74,
         0x61, 0x74, 0x65, 0x73, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x76,
         0x69, 0x73, 0x75, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
         0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
         0x74, 0x6d, 0x75, 0x73, 0x65, 0x75, 0x6d, 0x6d, 0x6f, 0x76, 0x69,
         0x65, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63,
         0x65, 0x73, 0x73, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x6d, 0x6f,
         0x74, 0x68, 0x65, 0x72, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6d,
         0x61, 0x72, 0x6b, 0x65, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
         0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x72, 0x76, 0x65,
         0x79, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x79, 0x6d, 0x62,
         0x6f, 0x6c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x65,
         0x65, 0x63, 0x68, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
         0x73, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x43,
         0x65, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
         0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x69, 0x64, 0x64, 0x6c,
         0x65, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x67, 0x72, 0x6f, 0x77,
         0x74, 0x68, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x6d, 0x61, 0x6e,
         0x6e, 0x65, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x63, 0x61,
         0x72, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x6f,
         0x72, 0x69, 0x67, 0x69, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
         0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x73,
         0x65, 0x64, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x6d,
         0x69, 0x6e, 0x67, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x70,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x72,
         0x61, 0x69, 0x73, 0x65, 0x64, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
         0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x63, 0x68, 0x75, 0x72, 0x63,
         0x68, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x61, 0x73,
         0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74,
         0x70, 0x75, 0x74, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x69, 0x66,
         0x72, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x6d,
         0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
         0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72,
         0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
         0x65, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c,
         0x6c, 0x65, 0x64, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x6d, 0x61,
         0x72, 0x67, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x62,
         0x65, 0x74, 0x74, 0x65, 0x72, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
         0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61,
         0x6c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x77, 0x69, 0x64, 0x67,
         0x65, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x75, 0x64,
         0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x63, 0x72,
         0x65, 0x64, 0x69, 0x74, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x65,
         0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79,
         0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x70, 0x69, 0x72, 0x69,
         0x74, 0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x65,
         0x61, 0x64, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x65,
         0x64, 0x65, 0x64, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x70, 0x6c,
         0x65, 0x61, 0x73, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x53,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e,
         0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67,
         0x65, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x66, 0x61, 0x63, 0x74,
         0x6f, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x62, 0x61,
         0x73, 0x65, 0x64, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x63, 0x6f,
         0x6e, 0x66, 0x69, 0x67, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x77,
         0x6f, 0x72, 0x6b, 0x65, 0x64, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x64,
         0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6d, 0x70, 0x61, 0x63,
         0x74, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6c, 0x77, 0x61,
         0x79, 0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x6f, 0x74,
         0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x29, 0x7b,
         0x76, 0x61, 0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6f,
         0x72, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
         0x2e, 0x70, 0x75, 0x73, 0x68, 0x28, 0x63, 0x6f, 0x75, 0x70, 0x6c,
         0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x62, 0x72, 0x69, 0x64,
         0x67, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x76,
         0x69, 0x65, 0x77, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x69,
         0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x64,
         0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
         0x62, 0x65, 0x61, 0x75, 0x74, 0x79, 0x74, 0x68, 0x65, 0x6d, 0x65,
         0x73, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x61, 0x6c, 0x6d,
         0x6f, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x68,
         0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
         0x74, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
         0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
         0x65, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6f, 0x75, 0x72,
         0x63, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x69, 0x65,
         0x77, 0x65, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x63, 0x6f,
         0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69,
         0x73, 0x6c, 0x61, 0x6e, 0x64, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20,
         0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
         0x22, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x65,
         0x72, 0x6e, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x3c,
         0x2f, 0x61, 0x3e, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x69,
         0x61, 0x6c, 0x6f, 0x67, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x42,
         0x45, 0x47, 0x49, 0x4e, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f,
         0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72,
         0x65, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x61, 0x64, 0x64, 0x69,
         0x6e, 0x67, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x73, 0x73,
         0x65, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x53, 0x63,
         0x68, 0x6f, 0x6f, 0x6c, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x64,
         0x69, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79,
         0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x2e, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
         0x65, 0x64, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x3e, 0x50, 0x68, 0x69,
         0x6c, 0x69, 0x70, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x68, 0x61,
         0x6e, 0x64, 0x6c, 0x65, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f,
         0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
         0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x64, 0x65, 0x67, 0x72,
         0x65, 0x65, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x20, 0x28, 0x65,
         0x2e, 0x67, 0x2e, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x64, 0x6f,
         0x63, 0x74, 0x6f, 0x72, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x75,
         0x6e, 0x69, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x3c, 0x2f,
         0x62, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x74,
         0x73, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
         0x73, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x33, 0x30, 0x30,
         0x70, 0x78, 0x7c, 0x63, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x61, 0x67,
         0x65, 0x6e, 0x63, 0x79, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x72,
         0x65, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x7a, 0x69, 0x6c,
         0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x22,
         0x3e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x61,
         0x6c, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x65, 0x72,
         0x76, 0x65, 0x64, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x46, 0x6f,
         0x6f, 0x74, 0x65, 0x72, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x3c,
         0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x22,
         0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x73, 0x74, 0x72, 0x65, 0x73,
         0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x2e, 0x67, 0x69, 0x66,
         0x22, 0x20, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x6c, 0x6f, 0x61,
         0x64, 0x65, 0x72, 0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x73, 0x69,
         0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x6c,
         0x69, 0x73, 0x74, 0x65, 0x6e, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65,
         0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x3d,
         0x22, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x74, 0x65, 0x78, 0x74,
         0x22, 0x3e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x74, 0x68, 0x61,
         0x6e, 0x6b, 0x73, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x66, 0x6f,
         0x72, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x61,
         0x6e, 0x79, 0x6f, 0x6e, 0x65, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,
         0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x6e,
         0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3c, 0x62, 0x72, 0x20,
         0x2f, 0x3e, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x72, 0x69,
         0x63, 0x65, 0x73, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x7c, 0x7c,
         0x20, 0x7b, 0x7d, 0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x69,
         0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79,
         0x77, 0x72, 0x61, 0x70, 0x22, 0x3e, 0x66, 0x61, 0x69, 0x6c, 0x65,
         0x64, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x6d, 0x69, 0x6e, 0x75,
         0x74, 0x65, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x6f,
         0x74, 0x65, 0x73, 0x31, 0x35, 0x30, 0x70, 0x78, 0x7c, 0x65, 0x73,
         0x74, 0x61, 0x74, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x65,
         0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
         0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x61,
         0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x31, 0x2e, 0x68, 0x74,
         0x6d, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x70, 0x72, 0x69,
         0x6e, 0x63, 0x65, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x2e, 0x70,
         0x6e, 0x67, 0x22, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x41,
         0x63, 0x63, 0x65, 0x73, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73,
         0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x65, 0x78, 0x74, 0x65, 0x6e,
         0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c, 0x69, 0x64,
         0x65, 0x72, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x26, 0x61, 0x6d,
         0x70, 0x3b, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2e, 0x20,
         0x57, 0x69, 0x74, 0x68, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x6f,
         0x77, 0x6e, 0x65, 0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
         0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x6a, 0x51, 0x75, 0x65, 0x72,
         0x79, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x70, 0x61, 0x72, 0x61,
         0x6d, 0x73, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x66, 0x61, 0x6d,
         0x6f, 0x75, 0x73, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6c, 0x6f,
         0x6e, 0x67, 0x65, 0x72, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x69,
         0x73, 0x72, 0x61, 0x65, 0x6c, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67,
         0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x22,
         0x3e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x65, 0x6e, 0x73, 0x75,
         0x72, 0x65, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x70, 0x69, 0x65,
         0x63, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x73, 0x74,
         0x61, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x3c, 0x72,
         0x61, 0x63, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65,
         0x2d, 0x2d, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x61, 0x63, 0x69, 0x74,
         0x79, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c, 0x62, 0x75, 0x72, 0x65,
         0x61, 0x75, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x31, 0x30, 0x2c,
         0x30, 0x30, 0x30, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x69,
         0x74, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2c,
         0x20, 0x49, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79,
         0x6d, 0x65, 0x6e, 0x75, 0x22, 0x20, 0x6c, 0x79, 0x72, 0x69, 0x63,
         0x73, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x2e, 0x69, 0x6e, 0x64, 0x65,
         0x65, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6c, 0x6f,
         0x67, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6c, 0x6f,
         0x6f, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x6c,
         0x73, 0x65, 0x20, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
         0x74, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x29, 0x3b, 0x76, 0x61, 0x72,
         0x20, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x67, 0x69, 0x76, 0x69,
         0x6e, 0x67, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d,
         0x61, 0x69, 0x6e, 0x7d, 0x65, 0x6c, 0x73, 0x65, 0x7b, 0x69, 0x6e,
         0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x67, 0x3c, 0x2f, 0x66,
         0x6f, 0x6f, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e,
         0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
         0x73, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x31, 0x30, 0x70, 0x78,
         0x20, 0x30, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x66, 0x72, 0x69,
         0x64, 0x61, 0x79, 0x6a, 0x75, 0x6e, 0x69, 0x6f, 0x72, 0x64, 0x6f,
         0x6c, 0x6c, 0x61, 0x72, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x63,
         0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
         0x35, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x70, 0x61, 0x67, 0x65, 0x22,
         0x3e, 0x62, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73,
         0x74, 0x28, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x74, 0x65, 0x73,
         0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x66, 0x6f,
         0x72, 0x75, 0x6d, 0x73, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x69,
         0x6e, 0x64, 0x65, 0x78, 0x2c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
         0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x72, 0x65, 0x61, 0x64, 0x65,
         0x72, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x28, 0x61, 0x70, 0x70, 0x65,
         0x61, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6e,
         0x65, 0x22, 0x3e, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3e, 0x0a, 0x2a,
         0x20, 0x54, 0x68, 0x65, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x73,
         0x65, 0x65, 0x69, 0x6e, 0x67, 0x6a, 0x65, 0x72, 0x73, 0x65, 0x79,
         0x4e, 0x65, 0x77, 0x73, 0x3c, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
         0x79, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6a, 0x75,
         0x72, 0x79, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x43, 0x6f, 0x6f,
         0x6b, 0x69, 0x65, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x61, 0x63,
         0x72, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x74,
         0x68, 0x72, 0x65, 0x61, 0x64, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
         0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x22, 0x3e,
         0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x44, 0x61, 0x76,
         0x69, 0x64, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x62,
         0x6c, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70,
         0x72, 0x69, 0x6c, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x64,
         0x72, 0x69, 0x76, 0x65, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e,
         0x6d, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x62, 0x6f, 0x61, 0x72, 0x64,
         0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x61, 0x6d, 0x70,
         0x75, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x7c, 0x7c, 0x20,
         0x5b, 0x5d, 0x3b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x67, 0x75,
         0x69, 0x74, 0x61, 0x72, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x77,
         0x69, 0x64, 0x74, 0x68, 0x3a, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64,
         0x4f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x2e, 0x70, 0x68, 0x70, 0x22,
         0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x6c, 0x61, 0x79, 0x65,
         0x72, 0x73, 0x77, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x6f,
         0x72, 0x65, 0x73, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x77,
         0x65, 0x64, 0x65, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
         0x61, 0x73, 0x69, 0x6c, 0x79, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
         0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x0a, 0x0a, 0x57, 0x68, 0x69,
         0x6c, 0x74, 0x61, 0x79, 0x6c, 0x6f, 0x72, 0x63, 0x6c, 0x65, 0x61,
         0x72, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x66, 0x72, 0x65,
         0x6e, 0x63, 0x68, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x29,
         0x20, 0x2b, 0x20, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x62,
         0x75, 0x79, 0x69, 0x6e, 0x67, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73,
         0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
         0x3e, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x63, 0x74,
         0x6f, 0x72, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x76, 0x73, 0x70,
         0x61, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
         0x6a, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x6d,
         0x61, 0x72, 0x74, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
         0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x3c, 0x2f, 0x6e, 0x61, 0x76,
         0x3e, 0x6b, 0x61, 0x6e, 0x73, 0x61, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
         0x22, 0x3e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x3d, 0x66, 0x61,
         0x6c, 0x73, 0x65, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x68, 0x73,
         0x70, 0x61, 0x63, 0x65, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x20,
         0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72,
         0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
         0x72, 0x6a, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x42, 0x6f, 0x74, 0x74,
         0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2d, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x32, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6e, 0x65,
         0x77, 0x73, 0x22, 0x3e, 0x30, 0x31, 0x2e, 0x6a, 0x70, 0x67, 0x4f,
         0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74,
         0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x6f,
         0x72, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30, 0x30, 0x2c, 0x30, 0x30,
         0x30, 0x20, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x76, 0x61, 0x6c,
         0x75, 0x65, 0x29, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
         0x70, 0x61, 0x69, 0x72, 0x2e, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x20,
         0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
         0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x45, 0x78,
         0x70, 0x3a, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x74, 0x68,
         0x69, 0x6e, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x70, 0x68, 0x6f,
         0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x75, 0x73,
         0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x20, 0x3e,
         0x27, 0x29, 0x3b, 0x0a, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0a,
         0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0a, 0x62, 0x61, 0x68, 0x61, 0x73,
         0x61, 0x62, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x67, 0x61, 0x6c, 0x65,
         0x67, 0x6f, 0x6d, 0x61, 0x67, 0x79, 0x61, 0x72, 0x70, 0x6f, 0x6c,
         0x73, 0x6b, 0x69, 0x73, 0x72, 0x70, 0x73, 0x6b, 0x69, 0xd8, 0xb1,
         0xd8, 0xaf, 0xd9, 0x88, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7,
         0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94,
         0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe5, 0x9b,
         0xbd, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0xe4, 0xb8, 0x80, 0xe4,
         0xb8, 0xaa, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0xae, 0xa1,
         0xe7, 0x90, 0x86, 0xe8, 0xae, 0xba, 0xe5, 0x9d, 0x9b, 0xe5, 0x8f,
         0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6,
         0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0xba,
         0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0x87, 0xaa, 0xe5, 0xb7,
         0xb1, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0x9f, 0xa5, 0xe7,
         0x9c, 0x8b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe8, 0x81, 0x94,
         0xe7, 0xb3, 0xbb, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0xbd,
         0x91, 0xe7, 0xab, 0x99, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8,
         0xaf, 0x84, 0xe8, 0xae, 0xba, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83,
         0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
         0xb7, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe4, 0xbd, 0x9c, 0xe8,
         0x80, 0x85, 0xe6, 0x8a, 0x80, 0xe6, 0x9c, 0xaf, 0xe9, 0x97, 0xae,
         0xe9, 0xa2, 0x98, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xb8,
         0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe4,
         0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xbd, 0xaf, 0xe4, 0xbb, 0xb6,
         0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0xbb, 0xe9, 0xa2,
         0x98, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe8, 0xa7, 0x86, 0xe9,
         0xa2, 0x91, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0xb3, 0xa8,
         0xe5, 0x86, 0x8c, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x94,
         0xb6, 0xe8, 0x97, 0x8f, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6,
         0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe5, 0xb8, 0x82, 0xe5, 0x9c, 0xba,
         0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
         0xb4, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xbb, 0x80, 0xe4,
         0xb9, 0x88, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe7, 0x94, 0x9f,
         0xe6, 0xb4, 0xbb, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x8f,
         0x91, 0xe5, 0xb1, 0x95, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6,
         0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xbb,
         0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe6, 0x96, 0xb9, 0xe5, 0xbc,
         0x8f, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe6, 0x8f, 0x90, 0xe4,
         0xbe, 0x9b, 0xe5, 0x85, 0xb3, 0xe4, 0xba, 0x8e, 0xe6, 0x9b, 0xb4,
         0xe5, 0xa4, 0x9a, 0xe8, 0xbf, 0x99, 0xe4, 0xb8, 0xaa, 0xe7, 0xb3,
         0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9f, 0xa5, 0xe9, 0x81, 0x93, 0xe6,
         0xb8, 0xb8, 0xe6, 0x88, 0x8f, 0xe5, 0xb9, 0xbf, 0xe5, 0x91, 0x8a,
         0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xa1,
         0xa8, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xac, 0xac, 0xe4,
         0xb8, 0x80, 0xe4, 0xbc, 0x9a, 0xe5, 0x91, 0x98, 0xe8, 0xbf, 0x9b,
         0xe8, 0xa1, 0x8c, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe7, 0x89,
         0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xb5, 0xe5, 0xad, 0x90, 0xe4,
         0xb8, 0x96, 0xe7, 0x95, 0x8c, 0xe8, 0xae, 0xbe, 0xe8, 0xae, 0xa1,
         0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xb9, 0xe6, 0x95, 0x99, 0xe8, 0x82,
         0xb2, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe6, 0xb4, 0xbb, 0xe5,
         0x8a, 0xa8, 0xe4, 0xbb, 0x96, 0xe4, 0xbb, 0xac, 0xe5, 0x95, 0x86,
         0xe5, 0x93, 0x81, 0xe5, 0x8d, 0x9a, 0xe5, 0xae, 0xa2, 0xe7, 0x8e,
         0xb0, 0xe5, 0x9c, 0xa8, 0xe4, 0xb8, 0x8a, 0xe6, 0xb5, 0xb7, 0xe5,
         0xa6, 0x82, 0xe4, 0xbd, 0x95, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f,
         0xe7, 0x95, 0x99, 0xe8, 0xa8, 0x80, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb,
         0x86, 0xe7, 0xa4, 0xbe, 0xe5, 0x8c, 0xba, 0xe7, 0x99, 0xbb, 0xe5,
         0xbd, 0x95, 0xe6, 0x9c, 0xac, 0xe7, 0xab, 0x99, 0xe9, 0x9c, 0x80,
         0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xe6, 0x94,
         0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x9b, 0xbd, 0xe9, 0x99, 0x85, 0xe9,
         0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6,
         0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe6, 0x9c, 0x8b, 0xe5, 0x8f,
         0x8b, 0xe9, 0x98, 0x85, 0xe8, 0xaf, 0xbb, 0xe6, 0xb3, 0x95, 0xe5,
         0xbe, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xbb, 0x8f,
         0xe6, 0xb5, 0x8e, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe8, 0xbf,
         0x99, 0xe6, 0xa0, 0xb7, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5,
         0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c,
         0xe5, 0x9b, 0xa0, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
         0x93, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe9, 0x9f, 0xb3, 0xe4,
         0xb9, 0x90, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0x80, 0x9a,
         0xe8, 0xbf, 0x87, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0x9a, 0xe7, 0xa7,
         0x91, 0xe6, 0x8a, 0x80, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe8,
         0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x88, 0xe4, 0xbd, 0x9c,
         0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0xb6, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc,
         0x9a, 0xe7, 0xa0, 0x94, 0xe7, 0xa9, 0xb6, 0xe4, 0xb8, 0x93, 0xe4,
         0xb8, 0x9a, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe9, 0xa1, 0xb9,
         0xe7, 0x9b, 0xae, 0xe8, 0xbf, 0x99, 0xe9, 0x87, 0x8c, 0xe8, 0xbf,
         0x98, 0xe6, 0x98, 0xaf, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6,
         0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xb5, 0xe8, 0x84, 0x91,
         0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x81, 0xe7, 0x89,
         0x8c, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x96, 0x87, 0xe5,
         0x8c, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0xa4, 0xa7,
         0xe5, 0xad, 0xa6, 0xe5, 0xad, 0xa6, 0xe4, 0xb9, 0xa0, 0xe5, 0x9c,
         0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb5, 0x8f, 0xe8, 0xa7, 0x88, 0xe6,
         0x8a, 0x95, 0xe8, 0xb5, 0x84, 0xe5, 0xb7, 0xa5, 0xe7, 0xa8, 0x8b,
         0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe6, 0x80, 0x8e, 0xe4, 0xb9,
         0x88, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0x8a, 0x9f, 0xe8,
         0x83, 0xbd, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x9b, 0xae,
         0xe5, 0x89, 0x8d, 0xe8, 0xb5, 0x84, 0xe8, 0xae, 0xaf, 0xe5, 0x9f,
         0x8e, 0xe5, 0xb8, 0x82, 0xe6, 0x96, 0xb9, 0xe6, 0xb3, 0x95, 0xe7,
         0x94, 0xb5, 0xe5, 0xbd, 0xb1, 0xe6, 0x8b, 0x9b, 0xe8, 0x81, 0x98,
         0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd,
         0x95, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0x95, 0xb0, 0xe6,
         0x8d, 0xae, 0xe7, 0xbe, 0x8e, 0xe5, 0x9b, 0xbd, 0xe6, 0xb1, 0xbd,
         0xe8, 0xbd, 0xa6, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe4, 0xbd,
         0x86, 0xe6, 0x98, 0xaf, 0xe4, 0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7,
         0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x89, 0x80, 0xe4, 0xbb, 0xa5,
         0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe6, 0x98, 0xbe, 0xe7, 0xa4,
         0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x8d, 0x95, 0xe4,
         0xbd, 0x8d, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xe5, 0x88, 0x86,
         0xe6, 0x9e, 0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0x97,
         0x85, 0xe6, 0xb8, 0xb8, 0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0xb7, 0xe5,
         0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe7, 0xb3, 0xbb, 0xe5, 0x88, 0x97,
         0xe7, 0xbd, 0x91, 0xe5, 0x8f, 0x8b, 0xe5, 0xb8, 0x96, 0xe5, 0xad,
         0x90, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe9, 0xa2, 0x91, 0xe9,
         0x81, 0x93, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xb0,
         0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0x85,
         0xa8, 0xe5, 0x9b, 0xbd, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0x8a, 0xe9,
         0x87, 0x8d, 0xe8, 0xa6, 0x81, 0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c,
         0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe8, 0xbf, 0x9b, 0xe5, 0x85,
         0xa5, 0xe5, 0x8f, 0x8b, 0xe6, 0x83, 0x85, 0xe8, 0xbf, 0x99, 0xe4,
         0xba, 0x9b, 0xe8, 0x80, 0x83, 0xe8, 0xaf, 0x95, 0xe5, 0x8f, 0x91,
         0xe7, 0x8e, 0xb0, 0xe5, 0x9f, 0xb9, 0xe8, 0xae, 0xad, 0xe4, 0xbb,
         0xa5, 0xe4, 0xb8, 0x8a, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe6,
         0x88, 0x90, 0xe4, 0xb8, 0xba, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83,
         0xe9, 0xa6, 0x99, 0xe6, 0xb8, 0xaf, 0xe5, 0x90, 0x8c, 0xe6, 0x97,
         0xb6, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5, 0x8f, 0x91, 0xe9,
         0x80, 0x81, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe5, 0xbc, 0x80,
         0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0xa0,
         0x87, 0xe5, 0x87, 0x86, 0xe6, 0xac, 0xa2, 0xe8, 0xbf, 0x8e, 0xe8,
         0xa7, 0xa3, 0xe5, 0x86, 0xb3, 0xe5, 0x9c, 0xb0, 0xe6, 0x96, 0xb9,
         0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0x8b, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f,
         0x8a, 0xe8, 0xb4, 0xa3, 0xe4, 0xbb, 0xbb, 0xe6, 0x88, 0x96, 0xe8,
         0x80, 0x85, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe4, 0xbb, 0xa3,
         0xe8, 0xa1, 0xa8, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe5, 0xa5,
         0xb3, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe7, 0xa0, 0x81, 0xe9,
         0x94, 0x80, 0xe5, 0x94, 0xae, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0xb0,
         0xe7, 0xa6, 0xbb, 0xe7, 0xba, 0xbf, 0xe5, 0xba, 0x94, 0xe7, 0x94,
         0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5,
         0x90, 0x8c, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe7, 0xbb, 0x9f,
         0xe8, 0xae, 0xa1, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8,
         0x8d, 0xe8, 0xa6, 0x81, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb3, 0xe6,
         0x9c, 0xba, 0xe6, 0x9e, 0x84, 0xe5, 0xbe, 0x88, 0xe5, 0xa4, 0x9a,
         0xe6, 0x92, 0xad, 0xe6, 0x94, 0xbe, 0xe7, 0xbb, 0x84, 0xe7, 0xbb,
         0x87, 0xe6, 0x94, 0xbf, 0xe7, 0xad, 0x96, 0xe7, 0x9b, 0xb4, 0xe6,
         0x8e, 0xa5, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0xe6, 0x9d, 0xa5,
         0xe6, 0xba, 0x90, 0xe6, 0x99, 0x82, 0xe9, 0x96, 0x93, 0xe7, 0x9c,
         0x8b, 0xe5, 0x88, 0xb0, 0xe7, 0x83, 0xad, 0xe9, 0x97, 0xa8, 0xe5,
         0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe4, 0xb8, 0x93, 0xe5, 0x8c, 0xba,
         0xe9, 0x9d, 0x9e, 0xe5, 0xb8, 0xb8, 0xe8, 0x8b, 0xb1, 0xe8, 0xaf,
         0xad, 0xe7, 0x99, 0xbe, 0xe5, 0xba, 0xa6, 0xe5, 0xb8, 0x8c, 0xe6,
         0x9c, 0x9b, 0xe7, 0xbe, 0x8e, 0xe5, 0xa5, 0xb3, 0xe6, 0xaf, 0x94,
         0xe8, 0xbe, 0x83, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf, 0x86, 0xe8, 0xa7,
         0x84, 0xe5, 0xae, 0x9a, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae, 0xe9,
         0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe6, 0x84, 0x8f, 0xe8, 0xa7, 0x81,
         0xe7, 0xb2, 0xbe, 0xe5, 0xbd, 0xa9, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,
         0xac, 0xe6, 0x8f, 0x90, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0x91, 0xe8,
         0xa8, 0x80, 0xe6, 0x96, 0xb9, 0xe9, 0x9d, 0xa2, 0xe5, 0x9f, 0xba,
         0xe9, 0x87, 0x91, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe6, 0x9d,
         0x83, 0xe9, 0x99, 0x90, 0xe5, 0xbd, 0xb1, 0xe7, 0x89, 0x87, 0xe9,
         0x93, 0xb6, 0xe8, 0xa1, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0x89,
         0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe7, 0x89, 0xa9, 0xe5, 0x93,
         0x81, 0xe7, 0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe6, 0xb7, 0xbb, 0xe5,
         0x8a, 0xa0, 0xe4, 0xb8, 0x93, 0xe5, 0xae, 0xb6, 0xe8, 0xbf, 0x99,
         0xe7, 0xa7, 0x8d, 0xe8, 0xaf, 0x9d, 0xe9, 0xa2, 0x98, 0xe8, 0xb5,
         0xb7, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5,
         0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
         0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe8, 0xb4, 0xa8, 0xe9, 0x87,
         0x8f, 0xe7, 0x94, 0xb7, 0xe4, 0xba, 0xba, 0xe5, 0xbd, 0xb1, 0xe5,
         0x93, 0x8d, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0xa5,
         0xe5, 0x91, 0x8a, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0xbf,
         0xab, 0xe9, 0x80, 0x9f, 0xe5, 0x92, 0xa8, 0xe8, 0xaf, 0xa2, 0xe6,
         0x97, 0xb6, 0xe5, 0xb0, 0x9a, 0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f,
         0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xad, 0xa6, 0xe6, 0xa0,
         0xa1, 0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xa5, 0xe5, 0x8e, 0x86, 0xe5,
         0x8f, 0xb2, 0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe8, 0xbf, 0x94,
         0xe5, 0x9b, 0x9e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0x90,
         0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x86, 0xe6,
         0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e,
         0xe4, 0xbe, 0x9b, 0xe5, 0xba, 0x94, 0xe5, 0xad, 0xa9, 0xe5, 0xad,
         0x90, 0xe4, 0xb8, 0x93, 0xe9, 0xa2, 0x98, 0xe7, 0xa8, 0x8b, 0xe5,
         0xba, 0x8f, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe6, 0x9c, 0x83,
         0xe5, 0x93, 0xa1, 0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0x85,
         0xb6, 0xe5, 0xae, 0x83, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe8,
         0x80, 0x8c, 0xe4, 0xb8, 0x94, 0xe4, 0xbb, 0x8a, 0xe5, 0xa4, 0xa9,
         0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe5, 0x8a, 0xa8, 0xe6, 0x80,
         0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x89, 0xb9, 0xe5,
         0x88, 0xab, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0xbf, 0x85,
         0xe9, 0xa1, 0xbb, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb0,
         0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x88, 0x91, 0xe5, 0x80, 0x91, 0xe4,
         0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe5, 0xaa, 0x92, 0xe4, 0xbd, 0x93,
         0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe9, 0x82, 0xa3, 0xe4, 0xb9,
         0x88, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0xb7, 0xe5, 0x9b, 0xbd, 0xe5,
         0x86, 0x85, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xa0, 0xb9,
         0xe6, 0x8d, 0xae, 0xe7, 0x94, 0xb5, 0xe8, 0xa7, 0x86, 0xe5, 0xad,
         0xa6, 0xe9, 0x99, 0xa2, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0x89, 0xe8,
         0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x8e,
         0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8d, 0xe5, 0x87, 0xba, 0xe6, 0x9d,
         0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xbf, 0x87, 0xe6, 0xad, 0xa3, 0xe5,
         0x9c, 0xa8, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0x9f, 0xe6, 0x95, 0x85,
         0xe4, 0xba, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0xa0,
         0x87, 0xe9, 0xa2, 0x98, 0xe5, 0x95, 0x86, 0xe5, 0x8a, 0xa1, 0xe8,
         0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe4, 0xb8, 0x80, 0xe7, 0x9b, 0xb4,
         0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0x95, 0x99, 0xe5, 0xad,
         0xa6, 0xe4, 0xba, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0xbb, 0xba, 0xe7,
         0xad, 0x91, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8,
         0xe7, 0x90, 0x83, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xae,
         0xa1, 0xe5, 0x88, 0x92, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0xe8,
         0x89, 0xba, 0xe6, 0x9c, 0xaf, 0xe7, 0x9b, 0xb8, 0xe5, 0x86, 0x8c,
         0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe7, 0x9c, 0x9f, 0xe7, 0x9a,
         0x84, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b, 0xe7, 0xad, 0x89, 0xe7,
         0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0xbb, 0x8f,
         0xe9, 0xaa, 0x8c, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe5, 0x88,
         0xb6, 0xe4, 0xbd, 0x9c, 0xe6, 0x9d, 0xa5, 0xe8, 0x87, 0xaa, 0xe6,
         0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8b,
         0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x9b, 0xe6, 0x97, 0xa0, 0xe6, 0xb3,
         0x95, 0xe5, 0x85, 0xb6, 0xe4, 0xb8, 0xad, 0xe5, 0x80, 0x8b, 0xe4,
         0xba, 0xba, 0xe4, 0xb8, 0x80, 0xe5, 0x88, 0x87, 0xe6, 0x8c, 0x87,
         0xe5, 0x8d, 0x97, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe9, 0x9b,
         0x86, 0xe5, 0x9b, 0xa2, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe5,
         0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0xe5, 0x9b, 0xa0, 0xe6, 0xad, 0xa4,
         0xe7, 0x85, 0xa7, 0xe7, 0x89, 0x87, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c,
         0xb3, 0xe5, 0x95, 0x86, 0xe4, 0xb8, 0x9a, 0xe5, 0xb9, 0xbf, 0xe5,
         0xb7, 0x9e, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0x9f, 0xe9, 0xab, 0x98,
         0xe7, 0xba, 0xa7, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0xe7, 0xbb,
         0xbc, 0xe5, 0x90, 0x88, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4,
         0xb8, 0x93, 0xe8, 0xbe, 0x91, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba,
         0xe4, 0xba, 0xa4, 0xe9, 0x80, 0x9a, 0xe8, 0xaf, 0x84, 0xe4, 0xbb,
         0xb7, 0xe8, 0xa7, 0x89, 0xe5, 0xbe, 0x97, 0xe7, 0xb2, 0xbe, 0xe5,
         0x8d, 0x8e, 0xe5, 0xae, 0xb6, 0xe5, 0xba, 0xad, 0xe5, 0xae, 0x8c,
         0xe6, 0x88, 0x90, 0xe6, 0x84, 0x9f, 0xe8, 0xa7, 0x89, 0xe5, 0xae,
         0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xb0, 0xe9,
         0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0xb6, 0xe5, 0xba, 0xa6,
         0xe9, 0xa3, 0x9f, 0xe5, 0x93, 0x81, 0xe8, 0x99, 0xbd, 0xe7, 0x84,
         0xb6, 0xe8, 0xbd, 0xac, 0xe8, 0xbd, 0xbd, 0xe6, 0x8a, 0xa5, 0xe4,
         0xbb, 0xb7, 0xe8, 0xae, 0xb0, 0xe8, 0x80, 0x85, 0xe6, 0x96, 0xb9,
         0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0x8c, 0xe6, 0x94, 0xbf, 0xe4, 0xba,
         0xba, 0xe6, 0xb0, 0x91, 0xe7, 0x94, 0xa8, 0xe5, 0x93, 0x81, 0xe4,
         0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe6, 0x8f, 0x90, 0xe5, 0x87, 0xba,
         0xe9, 0x85, 0x92, 0xe5, 0xba, 0x97, 0xe7, 0x84, 0xb6, 0xe5, 0x90,
         0x8e, 0xe4, 0xbb, 0x98, 0xe6, 0xac, 0xbe, 0xe7, 0x83, 0xad, 0xe7,
         0x82, 0xb9, 0xe4, 0xbb, 0xa5, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x8c,
         0xe5, 0x85, 0xa8, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x96, 0xe8, 0xae,
         0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0xa2, 0x86, 0xe5, 0xaf, 0xbc, 0xe5,
         0xb7, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5, 0x8c, 0xbb, 0xe9, 0x99, 0xa2,
         0xe7, 0x9c, 0x8b, 0xe7, 0x9c, 0x8b, 0xe7, 0xbb, 0x8f, 0xe5, 0x85,
         0xb8, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0xe5, 0xb9, 0xb3, 0xe5,
         0x8f, 0xb0, 0xe5, 0x90, 0x84, 0xe7, 0xa7, 0x8d, 0xe5, 0xa2, 0x9e,
         0xe5, 0x8a, 0xa0, 0xe6, 0x9d, 0x90, 0xe6, 0x96, 0x99, 0xe6, 0x96,
         0xb0, 0xe5, 0xa2, 0x9e, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8,
         0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c,
         0xe4, 0xbb, 0x8a, 0xe5, 0xb9, 0xb4, 0xe8, 0xae, 0xba, 0xe6, 0x96,
         0x87, 0xe6, 0x88, 0x91, 0xe5, 0x9b, 0xbd, 0xe5, 0x91, 0x8a, 0xe8,
         0xaf, 0x89, 0xe7, 0x89, 0x88, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xae,
         0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x89,
         0x93, 0xe5, 0x8d, 0xb0, 0xe5, 0xbf, 0xab, 0xe4, 0xb9, 0x90, 0xe6,
         0x9c, 0xba, 0xe6, 0xa2, 0xb0, 0xe8, 0xa7, 0x82, 0xe7, 0x82, 0xb9,
         0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0xb2, 0xbe, 0xe7, 0xa5,
         0x9e, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xa9, 0xe7,
         0x94, 0xa8, 0xe7, 0xbb, 0xa7, 0xe7, 0xbb, 0xad, 0xe4, 0xbd, 0xa0,
         0xe4, 0xbb, 0xac, 0xe8, 0xbf, 0x99, 0xe4, 0xb9, 0x88, 0xe6, 0xa8,
         0xa1, 0xe5, 0xbc, 0x8f, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe8,
         0x83, 0xbd, 0xe5, 0xa4, 0x9f, 0xe9, 0x9b, 0x85, 0xe8, 0x99, 0x8e,
         0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe9, 0xa3, 0x8e, 0xe6, 0xa0,
         0xbc, 0xe4, 0xb8, 0x80, 0xe8, 0xb5, 0xb7, 0xe7, 0xa7, 0x91, 0xe5,
         0xad, 0xa6, 0xe4, 0xbd, 0x93, 0xe8, 0x82, 0xb2, 0xe7, 0x9f, 0xad,
         0xe4, 0xbf, 0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0xb2,
         0xbb, 0xe7, 0x96, 0x97, 0xe8, 0xbf, 0x90, 0xe5, 0x8a, 0xa8, 0xe4,
         0xba, 0xa7, 0xe4, 0xb8, 0x9a, 0xe4, 0xbc, 0x9a, 0xe8, 0xae, 0xae,
         0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe5, 0x85, 0x88, 0xe7, 0x94,
         0x9f, 0xe8, 0x81, 0x94, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0xaf, 0xe6,
         0x98, 0xaf, 0xe5, 0x95, 0x8f, 0xe9, 0xa1, 0x8c, 0xe7, 0xbb, 0x93,
         0xe6, 0x9e, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe8, 0xb0,
         0x83, 0xe6, 0x9f, 0xa5, 0xe8, 0xb3, 0x87, 0xe6, 0x96, 0x99, 0xe8,
         0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xb4, 0x9f, 0xe8, 0xb4, 0xa3,
         0xe5, 0x86, 0x9c, 0xe4, 0xb8, 0x9a, 0xe8, 0xae, 0xbf, 0xe9, 0x97,
         0xae, 0xe5, 0xae, 0x9e, 0xe6, 0x96, 0xbd, 0xe6, 0x8e, 0xa5, 0xe5,
         0x8f, 0x97, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe9, 0x82, 0xa3,
         0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe5, 0x8a,
         0xa0, 0xe5, 0xbc, 0xba, 0xe5, 0xa5, 0xb3, 0xe6, 0x80, 0xa7, 0xe8,
         0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe6, 0x9c, 0x8d, 0xe5, 0x8b, 0x99,
         0xe4, 0xbc, 0x91, 0xe9, 0x97, 0xb2, 0xe4, 0xbb, 0x8a, 0xe6, 0x97,
         0xa5, 0xe5, 0xae, 0xa2, 0xe6, 0x9c, 0x8d, 0xe8, 0xa7, 0x80, 0xe7,
         0x9c, 0x8b, 0xe5, 0x8f, 0x82, 0xe5, 0x8a, 0xa0, 0xe7, 0x9a, 0x84,
         0xe8, 0xaf, 0x9d, 0xe4, 0xb8, 0x80, 0xe7, 0x82, 0xb9, 0xe4, 0xbf,
         0x9d, 0xe8, 0xaf, 0x81, 0xe5, 0x9b, 0xbe, 0xe4, 0xb9, 0xa6, 0xe6,
         0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
         0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0x8d, 0xe8, 0x83,
         0xbd, 0xe5, 0x86, 0xb3, 0xe5, 0xae, 0x9a, 0xe8, 0x82, 0xa1, 0xe7,
         0xa5, 0xa8, 0xe4, 0xb8, 0x8d, 0xe6, 0x96, 0xad, 0xe9, 0x9c, 0x80,
         0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x8a,
         0x9e, 0xe6, 0xb3, 0x95, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe9,
         0x87, 0x87, 0xe7, 0x94, 0xa8, 0xe8, 0x90, 0xa5, 0xe9, 0x94, 0x80,
         0xe6, 0x8a, 0x95, 0xe8, 0xaf, 0x89, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
         0x87, 0xe7, 0x88, 0xb1, 0xe6, 0x83, 0x85, 0xe6, 0x91, 0x84, 0xe5,
         0xbd, 0xb1, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x9b, 0xe8, 0xa4, 0x87,
         0xe8, 0xa3, 0xbd, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0xa6, 0xe6, 0x9c,
         0xba, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8,
         0xa3, 0x85, 0xe4, 0xbf, 0xae, 0xe8, 0xb4, 0xad, 0xe7, 0x89, 0xa9,
         0xe5, 0x86, 0x9c, 0xe6, 0x9d, 0x91, 0xe5, 0x85, 0xa8, 0xe9, 0x9d,
         0xa2, 0xe7, 0xb2, 0xbe, 0xe5, 0x93, 0x81, 0xe5, 0x85, 0xb6, 0xe5,
         0xae, 0x9e, 0xe4, 0xba, 0x8b, 0xe6, 0x83, 0x85, 0xe6, 0xb0, 0xb4,
         0xe5, 0xb9, 0xb3, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xb8,
         0x8a, 0xe5, 0xb8, 0x82, 0xe8, 0xb0, 0xa2, 0xe8, 0xb0, 0xa2, 0xe6,
         0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x95, 0x99, 0xe5, 0xb8, 0x88,
         0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x88,
         0xab, 0xe6, 0xad, 0x8c, 0xe6, 0x9b, 0xb2, 0xe6, 0x8b, 0xa5, 0xe6,
         0x9c, 0x89, 0xe5, 0x88, 0x9b, 0xe6, 0x96, 0xb0, 0xe9, 0x85, 0x8d,
         0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xaa, 0xe8, 0xa6, 0x81, 0xe6, 0x97,
         0xb6, 0xe4, 0xbb, 0xa3, 0xe8, 0xb3, 0x87, 0xe8, 0xa8, 0x8a, 0xe8,
         0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0x9f,
         0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe8, 0x80, 0x81, 0xe5, 0xb8,
         0x88, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0xbf, 0x83, 0xe7,
         0x90, 0x86, 0xe8, 0xb4, 0xb4, 0xe5, 0xad, 0x90, 0xe7, 0xb6, 0xb2,
         0xe7, 0xab, 0x99, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0x8c, 0xe8, 0x87,
         0xaa, 0xe7, 0x84, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7,
         0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe6, 0x94, 0xb9, 0xe9, 0x9d, 0xa9,
         0xe9, 0x82, 0xa3, 0xe4, 0xba, 0x9b, 0xe6, 0x9d, 0xa5, 0xe8, 0xaf,
         0xb4, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe4, 0xbb, 0xa3, 0xe7,
         0xa0, 0x81, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0x81,
         0xe5, 0x88, 0xb8, 0xe8, 0x8a, 0x82, 0xe7, 0x9b, 0xae, 0xe9, 0x87,
         0x8d, 0xe7, 0x82, 0xb9, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb8, 0xe5,
         0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x92,
         0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x89, 0xbe, 0xe5, 0x88,
         0xb0, 0xe4, 0xbb, 0xa5, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0xa7, 0xe5,
         0x85, 0xa8, 0xe4, 0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe6, 0x9c, 0x80,
         0xe4, 0xbd, 0xb3, 0xe5, 0x9b, 0x9e, 0xe7, 0xad, 0x94, 0xe5, 0xa4,
         0xa9, 0xe4, 0xb8, 0x8b, 0xe4, 0xbf, 0x9d, 0xe9, 0x9a, 0x9c, 0xe7,
         0x8e, 0xb0, 0xe4, 0xbb, 0xa3, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5,
         0xe6, 0x8a, 0x95, 0xe7, 0xa5, 0xa8, 0xe5, 0xb0, 0x8f, 0xe6, 0x97,
         0xb6, 0xe6, 0xb2, 0x92, 0xe6, 0x9c, 0x89, 0xe6, 0xad, 0xa3, 0xe5,
         0xb8, 0xb8, 0xe7, 0x94, 0x9a, 0xe8, 0x87, 0xb3, 0xe4, 0xbb, 0xa3,
         0xe7, 0x90, 0x86, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85,
         0xac, 0xe5, 0xbc, 0x80, 0xe5, 0xa4, 0x8d, 0xe5, 0x88, 0xb6, 0xe9,
         0x87, 0x91, 0xe8, 0x9e, 0x8d, 0xe5, 0xb9, 0xb8, 0xe7, 0xa6, 0x8f,
         0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe6, 0x88,
         0x90, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0x8c, 0xe6,
         0x83, 0x85, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb0, 0xe6, 0x80, 0x9d,
         0xe6, 0x83, 0xb3, 0xe6, 0x80, 0x8e, 0xe6, 0xa0, 0xb7, 0xe5, 0x8d,
         0x8f, 0xe8, 0xae, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6,
         0x9c, 0x80, 0xe5, 0xa5, 0xbd, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f,
         0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe6, 0x9c, 0x8d, 0xe8, 0xa3,
         0x85, 0xe5, 0xb9, 0xbf, 0xe4, 0xb8, 0x9c, 0xe5, 0x8a, 0xa8, 0xe6,
         0xbc, 0xab, 0xe9, 0x87, 0x87, 0xe8, 0xb4, 0xad, 0xe6, 0x96, 0xb0,
         0xe6, 0x89, 0x8b, 0xe7, 0xbb, 0x84, 0xe5, 0x9b, 0xbe, 0xe9, 0x9d,
         0xa2, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x82, 0xe8, 0x80, 0x83, 0xe6,
         0x94, 0xbf, 0xe6, 0xb2, 0xbb, 0xe5, 0xae, 0xb9, 0xe6, 0x98, 0x93,
         0xe5, 0xa4, 0xa9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8a, 0xaa, 0xe5, 0x8a,
         0x9b, 0xe4, 0xba, 0xba, 0xe4, 0xbb, 0xac, 0xe5, 0x8d, 0x87, 0xe7,
         0xba, 0xa7, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0xe4, 0xba, 0xba,
         0xe7, 0x89, 0xa9, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe6, 0xb5,
         0x81, 0xe8, 0xa1, 0x8c, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6,
         0x96, 0x87, 0xe5, 0xad, 0x97, 0xe9, 0x9f, 0xa9, 0xe5, 0x9b, 0xbd,
         0xe8, 0xb4, 0xb8, 0xe6, 0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xb1,
         0x95, 0xe7, 0x9b, 0xb8, 0xe9, 0x97, 0x9c, 0xe8, 0xa1, 0xa8, 0xe7,
         0x8e, 0xb0, 0xe5, 0xbd, 0xb1, 0xe8, 0xa7, 0x86, 0xe5, 0xa6, 0x82,
         0xe6, 0xad, 0xa4, 0xe7, 0xbe, 0x8e, 0xe5, 0xae, 0xb9, 0xe5, 0xa4,
         0xa7, 0xe5, 0xb0, 0x8f, 0xe6, 0x8a, 0xa5, 0xe9, 0x81, 0x93, 0xe6,
         0x9d, 0xa1, 0xe6, 0xac, 0xbe, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85,
         0xe8, 0xae, 0xb8, 0xe5, 0xa4, 0x9a, 0xe6, 0xb3, 0x95, 0xe8, 0xa7,
         0x84, 0xe5, 0xae, 0xb6, 0xe5, 0xb1, 0x85, 0xe4, 0xb9, 0xa6, 0xe5,
         0xba, 0x97, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0xab, 0x8b,
         0xe5, 0x8d, 0xb3, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0x8a,
         0x80, 0xe5, 0xb7, 0xa7, 0xe5, 0xa5, 0xa5, 0xe8, 0xbf, 0x90, 0xe7,
         0x99, 0xbb, 0xe5, 0x85, 0xa5, 0xe4, 0xbb, 0xa5, 0xe6, 0x9d, 0xa5,
         0xe7, 0x90, 0x86, 0xe8, 0xae, 0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
         0xb6, 0xe8, 0x87, 0xaa, 0xe7, 0x94, 0xb1, 0xe4, 0xb8, 0xad, 0xe5,
         0x8d, 0x8e, 0xe5, 0x8a, 0x9e, 0xe5, 0x85, 0xac, 0xe5, 0xa6, 0x88,
         0xe5, 0xa6, 0x88, 0xe7, 0x9c, 0x9f, 0xe6, 0xad, 0xa3, 0xe4, 0xb8,
         0x8d, 0xe9, 0x94, 0x99, 0xe5, 0x85, 0xa8, 0xe6, 0x96, 0x87, 0xe5,
         0x90, 0x88, 0xe5, 0x90, 0x8c, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc,
         0xe5, 0x88, 0xab, 0xe4, 0xba, 0xba, 0xe7, 0x9b, 0x91, 0xe7, 0x9d,
         0xa3, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0x96, 0xe7,
         0xba, 0xaa, 0xe5, 0x9b, 0xa2, 0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x9b,
         0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xbf, 0xe6, 0x8b, 0x85, 0xe5, 0xa2,
         0x9e, 0xe9, 0x95, 0xbf, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4,
         0xbf, 0x9d, 0xe6, 0x8c, 0x81, 0xe5, 0x95, 0x86, 0xe5, 0xae, 0xb6,
         0xe7, 0xbb, 0xb4, 0xe4, 0xbf, 0xae, 0xe5, 0x8f, 0xb0, 0xe6, 0xb9,
         0xbe, 0xe5, 0xb7, 0xa6, 0xe5, 0x8f, 0xb3, 0xe8, 0x82, 0xa1, 0xe4,
         0xbb, 0xbd, 0xe7, 0xad, 0x94, 0xe6, 0xa1, 0x88, 0xe5, 0xae, 0x9e,
         0xe9, 0x99, 0x85, 0xe7, 0x94, 0xb5, 0xe4, 0xbf, 0xa1, 0xe7, 0xbb,
         0x8f, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,
         0xae, 0xa3, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
         0xe6, 0xad, 0xa3, 0xe5, 0xbc, 0x8f, 0xe7, 0x89, 0xb9, 0xe8, 0x89,
         0xb2, 0xe4, 0xb8, 0x8b, 0xe6, 0x9d, 0xa5, 0xe5, 0x8d, 0x8f, 0xe4,
         0xbc, 0x9a, 0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd, 0xe5, 0xbd, 0x93,
         0xe7, 0x84, 0xb6, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe5, 0x85,
         0xa7, 0xe5, 0xae, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xaf, 0xbc, 0xe8,
         0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97,
         0xe8, 0xb3, 0xa3, 0xe5, 0xae, 0xb6, 0xe8, 0xb6, 0x85, 0xe8, 0xbf,
         0x87, 0xe5, 0x9c, 0x9f, 0xe5, 0x9c, 0xb0, 0xe6, 0xb5, 0x99, 0xe6,
         0xb1, 0x9f, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe6, 0x8e, 0xa8,
         0xe5, 0x87, 0xba, 0xe7, 0xab, 0x99, 0xe9, 0x95, 0xbf, 0xe6, 0x9d,
         0xad, 0xe5, 0xb7, 0x9e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5,
         0x88, 0xb6, 0xe9, 0x80, 0xa0, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x80,
         0xe6, 0x8e, 0xa8, 0xe5, 0xb9, 0xbf, 0xe7, 0x8e, 0xb0, 0xe5, 0x9c,
         0xba, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe5, 0x8f, 0x98, 0xe5,
         0x8c, 0x96, 0xe4, 0xbc, 0xa0, 0xe7, 0xbb, 0x9f, 0xe6, 0xad, 0x8c,
         0xe6, 0x89, 0x8b, 0xe4, 0xbf, 0x9d, 0xe9, 0x99, 0xa9, 0xe8, 0xaf,
         0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c, 0xbb, 0xe7, 0x96, 0x97, 0xe7,
         0xbb, 0x8f, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x87, 0xe5, 0x8e, 0xbb,
         0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xb6, 0xe5, 0x85,
         0xa5, 0xe5, 0xb9, 0xb4, 0xe5, 0xba, 0xa6, 0xe6, 0x9d, 0x82, 0xe5,
         0xbf, 0x97, 0xe7, 0xbe, 0x8e, 0xe4, 0xb8, 0xbd, 0xe6, 0x9c, 0x80,
         0xe9, 0xab, 0x98, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86, 0xe6, 0x9c,
         0xaa, 0xe6, 0x9d, 0xa5, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0xa5, 0xe5,
         0x85, 0x8d, 0xe8, 0xb4, 0xa3, 0xe6, 0x95, 0x99, 0xe7, 0xa8, 0x8b,
         0xe7, 0x89, 0x88, 0xe5, 0x9d, 0x97, 0xe8, 0xba, 0xab, 0xe4, 0xbd,
         0x93, 0xe9, 0x87, 0x8d, 0xe5, 0xba, 0x86, 0xe5, 0x87, 0xba, 0xe5,
         0x94, 0xae, 0xe6, 0x88, 0x90, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2,
         0xe5, 0xbc, 0x8f, 0xe5, 0x9c, 0x9f, 0xe8, 0xb1, 0x86, 0xe5, 0x87,
         0xba, 0xe5, 0x83, 0xb9, 0xe4, 0xb8, 0x9c, 0xe6, 0x96, 0xb9, 0xe9,
         0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x8d, 0x97, 0xe4, 0xba, 0xac,
         0xe6, 0xb1, 0x82, 0xe8, 0x81, 0x8c, 0xe5, 0x8f, 0x96, 0xe5, 0xbe,
         0x97, 0xe8, 0x81, 0x8c, 0xe4, 0xbd, 0x8d, 0xe7, 0x9b, 0xb8, 0xe4,
         0xbf, 0xa1, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0x88, 0x86,
         0xe9, 0x92, 0x9f, 0xe7, 0xbd, 0x91, 0xe9, 0xa1, 0xb5, 0xe7, 0xa1,
         0xae, 0xe5, 0xae, 0x9a, 0xe5, 0x9b, 0xbe, 0xe4, 0xbe, 0x8b, 0xe7,
         0xbd, 0x91, 0xe5, 0x9d, 0x80, 0xe7, 0xa7, 0xaf, 0xe6, 0x9e, 0x81,
         0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xae, 0xe7, 0x9a,
         0x84, 0xe5, 0xae, 0x9d, 0xe8, 0xb4, 0x9d, 0xe6, 0x9c, 0xba, 0xe5,
         0x85, 0xb3, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0x8e, 0x88,
         0xe6, 0x9d, 0x83, 0xe7, 0x97, 0x85, 0xe6, 0xaf, 0x92, 0xe5, 0xae,
         0xa0, 0xe7, 0x89, 0xa9, 0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x86, 0xe8,
         0xa9, 0x95, 0xe8, 0xab, 0x96, 0xe7, 0x96, 0xbe, 0xe7, 0x97, 0x85,
         0xe5, 0x8f, 0x8a, 0xe6, 0x97, 0xb6, 0xe6, 0xb1, 0x82, 0xe8, 0xb4,
         0xad, 0xe7, 0xab, 0x99, 0xe7, 0x82, 0xb9, 0xe5, 0x84, 0xbf, 0xe7,
         0xab, 0xa5, 0xe6, 0xaf, 0x8f, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0xad,
         0xe5, 0xa4, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x86, 0xe6, 0xaf,
         0x8f, 0xe4, 0xb8, 0xaa, 0xe5, 0xa4, 0xa9, 0xe6, 0xb4, 0xa5, 0xe5,
         0xad, 0x97, 0xe4, 0xbd, 0x93, 0xe5, 0x8f, 0xb0, 0xe7, 0x81, 0xa3,
         0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0xe6, 0x9c, 0xac, 0xe9, 0xa1,
         0xb5, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0xae, 0x98, 0xe6,
         0x96, 0xb9, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x81, 0xe7, 0x9b, 0xb8,
         0xe6, 0x9c, 0xba, 0xe6, 0x88, 0x98, 0xe7, 0x95, 0xa5, 0xe5, 0xba,
         0x94, 0xe5, 0xbd, 0x93, 0xe5, 0xbe, 0x8b, 0xe5, 0xb8, 0x88, 0xe6,
         0x96, 0xb9, 0xe4, 0xbe, 0xbf, 0xe6, 0xa0, 0xa1, 0xe5, 0x9b, 0xad,
         0xe8, 0x82, 0xa1, 0xe5, 0xb8, 0x82, 0xe6, 0x88, 0xbf, 0xe5, 0xb1,
         0x8b, 0xe6, 0xa0, 0x8f, 0xe7, 0x9b, 0xae, 0xe5, 0x91, 0x98, 0xe5,
         0xb7, 0xa5, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0xe7, 0xaa, 0x81,
         0xe7, 0x84, 0xb6, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x9c,
         0xac, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x93, 0xe5, 0x90, 0x88, 0xe6,
         0xa1, 0xa3, 0xe6, 0xa1, 0x88, 0xe5, 0x8a, 0xb3, 0xe5, 0x8a, 0xa8,
         0xe5, 0x8f, 0xa6, 0xe5, 0xa4, 0x96, 0xe7, 0xbe, 0x8e, 0xe5, 0x85,
         0x83, 0xe5, 0xbc, 0x95, 0xe8, 0xb5, 0xb7, 0xe6, 0x94, 0xb9, 0xe5,
         0x8f, 0x98, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe4, 0xbc, 0x9a,
         0xe8, 0xae, 0xa1, 0xe8, 0xaa, 0xaa, 0xe6, 0x98, 0x8e, 0xe9, 0x9a,
         0x90, 0xe7, 0xa7, 0x81, 0xe5, 0xae, 0x9d, 0xe5, 0xae, 0x9d, 0xe8,
         0xa7, 0x84, 0xe8, 0x8c, 0x83, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9,
         0xe5, 0x85, 0xb1, 0xe5, 0x90, 0x8c, 0xe5, 0xbf, 0x98, 0xe8, 0xae,
         0xb0, 0xe4, 0xbd, 0x93, 0xe7, 0xb3, 0xbb, 0xe5, 0xb8, 0xa6, 0xe6,
         0x9d, 0xa5, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xe7, 0x99, 0xbc,
         0xe8, 0xa1, 0xa8, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe5, 0x8a,
         0xa0, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4,
         0xba, 0x8c, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f,
         0xe6, 0x88, 0x90, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
         0x8f, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0x8c, 0xba, 0xe5,
         0x9f, 0x9f, 0xe5, 0xa5, 0xb3, 0xe5, 0xad, 0xa9, 0xe5, 0x8e, 0x9f,
         0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0xbb,
         0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x80, 0x9a, 0xe4, 0xbf, 0xa1, 0xe8,
         0xb6, 0x85, 0xe7, 0xba, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
         0xe5, 0xbd, 0x93, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x98, 0xe7, 0xa7,
         0x80, 0xe6, 0x80, 0xa7, 0xe6, 0x84, 0x9f, 0xe6, 0x88, 0xbf, 0xe4,
         0xba, 0xa7, 0xe9, 0x81, 0x8a, 0xe6, 0x88, 0xb2, 0xe5, 0x87, 0xba,
         0xe5, 0x8f, 0xa3, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe5, 0xb0,
         0xb1, 0xe4, 0xb8, 0x9a, 0xe4, 0xbf, 0x9d, 0xe5, 0x81, 0xa5, 0xe7,
         0xa8, 0x8b, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
         0xe4, 0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0xb4, 0xe4, 0xb8,
         0xaa, 0xe5, 0xb1, 0xb1, 0xe4, 0xb8, 0x9c, 0xe6, 0x83, 0x85, 0xe6,
         0x84, 0x9f, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a, 0xe5, 0x88, 0x86,
         0xe9, 0xa1, 0x9e, 0xe6, 0x90, 0x9c, 0xe5, 0xb0, 0x8b, 0xe5, 0xb1,
         0x9e, 0xe4, 0xba, 0x8e, 0xe9, 0x97, 0xa8, 0xe6, 0x88, 0xb7, 0xe8,
         0xb4, 0xa2, 0xe5, 0x8a, 0xa1, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3,
         0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xb6, 0xe8, 0xb4, 0xa2, 0xe7, 0xbb,
         0x8f, 0xe5, 0x9d, 0x9a, 0xe6, 0x8c, 0x81, 0xe5, 0xb9, 0xb2, 0xe9,
         0x83, 0xa8, 0xe6, 0x88, 0x90, 0xe7, 0xab, 0x8b, 0xe5, 0x88, 0xa9,
         0xe7, 0x9b, 0x8a, 0xe8, 0x80, 0x83, 0xe8, 0x99, 0x91, 0xe6, 0x88,
         0x90, 0xe9, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe8, 0xa3, 0x85, 0xe7,
         0x94, 0xa8, 0xe6, 0x88, 0xb6, 0xe6, 0xaf, 0x94, 0xe8, 0xb5, 0x9b,
         0xe6, 0x96, 0x87, 0xe6, 0x98, 0x8e, 0xe6, 0x8b, 0x9b, 0xe5, 0x95,
         0x86, 0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9c, 0x9f, 0xe6,
         0x98, 0xaf, 0xe7, 0x9c, 0xbc, 0xe7, 0x9d, 0x9b, 0xe4, 0xbc, 0x99,
         0xe4, 0xbc, 0xb4, 0xe5, 0xa8, 0x81, 0xe6, 0x9c, 0x9b, 0xe9, 0xa2,
         0x86, 0xe5, 0x9f, 0x9f, 0xe5, 0x8d, 0xab, 0xe7, 0x94, 0x9f, 0xe4,
         0xbc, 0x98, 0xe6, 0x83, 0xa0, 0xe8, 0xab, 0x96, 0xe5, 0xa3, 0x87,
         0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe8, 0x89, 0xaf, 0xe5, 0xa5,
         0xbd, 0xe5, 0x85, 0x85, 0xe5, 0x88, 0x86, 0xe7, 0xac, 0xa6, 0xe5,
         0x90, 0x88, 0xe9, 0x99, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0xb9,
         0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0x8b,
         0xb1, 0xe6, 0x96, 0x87, 0xe8, 0xb5, 0x84, 0xe4, 0xba, 0xa7, 0xe6,
         0xa0, 0xb9, 0xe6, 0x9c, 0xac, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0xbe,
         0xe5, 0xaf, 0x86, 0xe7, 0xa2, 0xbc, 0xe5, 0x85, 0xac, 0xe4, 0xbc,
         0x97, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0xe6, 0x9b, 0xb4, 0xe5,
         0x8a, 0xa0, 0xe4, 0xba, 0xab, 0xe5, 0x8f, 0x97, 0xe5, 0x90, 0x8c,
         0xe5, 0xad, 0xa6, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0x80,
         0x82, 0xe5, 0x90, 0x88, 0xe5, 0x8e, 0x9f, 0xe6, 0x9d, 0xa5, 0xe9,
         0x97, 0xae, 0xe7, 0xad, 0x94, 0xe6, 0x9c, 0xac, 0xe6, 0x96, 0x87,
         0xe7, 0xbe, 0x8e, 0xe9, 0xa3, 0x9f, 0xe7, 0xbb, 0xbf, 0xe8, 0x89,
         0xb2, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0xbb, 0x88, 0xe4,
         0xba, 0x8e, 0xe7, 0x94, 0x9f, 0xe7, 0x89, 0xa9, 0xe4, 0xbe, 0x9b,
         0xe6, 0xb1, 0x82, 0xe6, 0x90, 0x9c, 0xe7, 0x8b, 0x90, 0xe5, 0x8a,
         0x9b, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0xa5, 0xe9, 0x87, 0x8d, 0xe6,
         0xb0, 0xb8, 0xe8, 0xbf, 0x9c, 0xe5, 0x86, 0x99, 0xe7, 0x9c, 0x9f,
         0xe6, 0x9c, 0x89, 0xe9, 0x99, 0x90, 0xe7, 0xab, 0x9e, 0xe4, 0xba,
         0x89, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7,
         0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0xa5, 0xbd, 0xe7, 0xbb, 0x9d,
         0xe5, 0xaf, 0xb9, 0xe5, 0x8d, 0x81, 0xe5, 0x88, 0x86, 0xe4, 0xbf,
         0x83, 0xe8, 0xbf, 0x9b, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0x84, 0xe5,
         0xbd, 0xb1, 0xe9, 0x9f, 0xb3, 0xe4, 0xbc, 0x98, 0xe5, 0x8a, 0xbf,
         0xe4, 0xb8, 0x8d, 0xe5, 0xb0, 0x91, 0xe6, 0xac, 0xa3, 0xe8, 0xb5,
         0x8f, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe6, 0x9c, 0x89, 0xe7,
         0x82, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe5, 0x85, 0xa8,
         0xe6, 0x96, 0xb0, 0xe4, 0xbf, 0xa1, 0xe7, 0x94, 0xa8, 0xe8, 0xae,
         0xbe, 0xe6, 0x96, 0xbd, 0xe5, 0xbd, 0xa2, 0xe8, 0xb1, 0xa1, 0xe8,
         0xb5, 0x84, 0xe6, 0xa0, 0xbc, 0xe7, 0xaa, 0x81, 0xe7, 0xa0, 0xb4,
         0xe9, 0x9a, 0x8f, 0xe7, 0x9d, 0x80, 0xe9, 0x87, 0x8d, 0xe5, 0xa4,
         0xa7, 0xe4, 0xba, 0x8e, 0xe6, 0x98, 0xaf, 0xe6, 0xaf, 0x95, 0xe4,
         0xb8, 0x9a, 0xe6, 0x99, 0xba, 0xe8, 0x83, 0xbd, 0xe5, 0x8c, 0x96,
         0xe5, 0xb7, 0xa5, 0xe5, 0xae, 0x8c, 0xe7, 0xbe, 0x8e, 0xe5, 0x95,
         0x86, 0xe5, 0x9f, 0x8e, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5,
         0x87, 0xba, 0xe7, 0x89, 0x88, 0xe6, 0x89, 0x93, 0xe9, 0x80, 0xa0,
         0xe7, 0x94, 0xa2, 0xe5, 0x93, 0x81, 0xe6, 0xa6, 0x82, 0xe5, 0x86,
         0xb5, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xbf, 0x9d, 0xe7,
         0x95, 0x99, 0xe5, 0x9b, 0xa0, 0xe7, 0xb4, 0xa0, 0xe4, 0xb8, 0xad,
         0xe5, 0x9c, 0x8b, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe8, 0xb4,
         0xb4, 0xe5, 0x9b, 0xbe, 0xe6, 0x9c, 0x80, 0xe6, 0x84, 0x9b, 0xe9,
         0x95, 0xbf, 0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0xb7,
         0xe7, 0x90, 0x86, 0xe8, 0xb4, 0xa2, 0xe5, 0x9f, 0xba, 0xe5, 0x9c,
         0xb0, 0xe5, 0xae, 0x89, 0xe6, 0x8e, 0x92, 0xe6, 0xad, 0xa6, 0xe6,
         0xb1, 0x89, 0xe9, 0x87, 0x8c, 0xe9, 0x9d, 0xa2, 0xe5, 0x88, 0x9b,
         0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xa9, 0xe7, 0xa9, 0xba, 0xe9, 0xa6,
         0x96, 0xe5, 0x85, 0x88, 0xe5, 0xae, 0x8c, 0xe5, 0x96, 0x84, 0xe9,
         0xa9, 0xb1, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0xa2,
         0xe4, 0xb8, 0x8d, 0xe5, 0x86, 0x8d, 0xe8, 0xaf, 0x9a, 0xe4, 0xbf,
         0xa1, 0xe6, 0x84, 0x8f, 0xe4, 0xb9, 0x89, 0xe9, 0x98, 0xb3, 0xe5,
         0x85, 0x89, 0xe8, 0x8b, 0xb1, 0xe5, 0x9b, 0xbd, 0xe6, 0xbc, 0x82,
         0xe4, 0xba, 0xae, 0xe5, 0x86, 0x9b, 0xe4, 0xba, 0x8b, 0xe7, 0x8e,
         0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xbe, 0xa4, 0xe4, 0xbc, 0x97, 0xe5,
         0x86, 0x9c, 0xe6, 0xb0, 0x91, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf,
         0xe5, 0x90, 0x8d, 0xe7, 0xa8, 0xb1, 0xe5, 0xae, 0xb6, 0xe5, 0x85,
         0xb7, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0xbb, 0xe6, 0x83, 0xb3, 0xe5,
         0x88, 0xb0, 0xe6, 0xb3, 0xa8, 0xe6, 0x98, 0x8e, 0xe5, 0xb0, 0x8f,
         0xe5, 0xad, 0xa6, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe8, 0x80,
         0x83, 0xe7, 0xa0, 0x94, 0xe7, 0xa1, 0xac, 0xe4, 0xbb, 0xb6, 0xe8,
         0xa7, 0x82, 0xe7, 0x9c, 0x8b, 0xe6, 0xb8, 0x85, 0xe6, 0xa5, 0x9a,
         0xe6, 0x90, 0x9e, 0xe7, 0xac, 0x91, 0xe9, 0xa6, 0x96, 0xe9, 0xa0,
         0x81, 0xe9, 0xbb, 0x84, 0xe9, 0x87, 0x91, 0xe9, 0x80, 0x82, 0xe7,
         0x94, 0xa8, 0xe6, 0xb1, 0x9f, 0xe8, 0x8b, 0x8f, 0xe7, 0x9c, 0x9f,
         0xe5, 0xae, 0x9e, 0xe4, 0xb8, 0xbb, 0xe7, 0xae, 0xa1, 0xe9, 0x98,
         0xb6, 0xe6, 0xae, 0xb5, 0xe8, 0xa8, 0xbb, 0xe5, 0x86, 0x8a, 0xe7,
         0xbf, 0xbb, 0xe8, 0xaf, 0x91, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9,
         0xe5, 0x81, 0x9a, 0xe5, 0xa5, 0xbd, 0xe4, 0xbc, 0xbc, 0xe4, 0xb9,
         0x8e, 0xe9, 0x80, 0x9a, 0xe8, 0xae, 0xaf, 0xe6, 0x96, 0xbd, 0xe5,
         0xb7, 0xa5, 0xe7, 0x8b, 0x80, 0xe6, 0x85, 0x8b, 0xe4, 0xb9, 0x9f,
         0xe8, 0xae, 0xb8, 0xe7, 0x8e, 0xaf, 0xe4, 0xbf, 0x9d, 0xe5, 0x9f,
         0xb9, 0xe5, 0x85, 0xbb, 0xe6, 0xa6, 0x82, 0xe5, 0xbf, 0xb5, 0xe5,
         0xa4, 0xa7, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe7, 0xa5, 0xa8,
         0xe7, 0x90, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0x8c, 0xbf, 0xe5, 0x90,
         0x8d, 0x63, 0x75, 0x61, 0x6e, 0x64, 0x6f, 0x65, 0x6e, 0x76, 0x69,
         0x61, 0x72, 0x6d, 0x61, 0x64, 0x72, 0x69, 0x64, 0x62, 0x75, 0x73,
         0x63, 0x61, 0x72, 0x69, 0x6e, 0x69, 0x63, 0x69, 0x6f, 0x74, 0x69,
         0x65, 0x6d, 0x70, 0x6f, 0x70, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x63,
         0x75, 0x65, 0x6e, 0x74, 0x61, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f,
         0x70, 0x75, 0x65, 0x64, 0x65, 0x6e, 0x6a, 0x75, 0x65, 0x67, 0x6f,
         0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x65, 0x73, 0x74, 0xc3,
         0xa1, 0x6e, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x74, 0x69, 0x65,
         0x6e, 0x65, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6d, 0x61,
         0x6e, 0x65, 0x72, 0x61, 0x61, 0x6d, 0x69, 0x67, 0x6f, 0x73, 0x63,
         0x69, 0x75, 0x64, 0x61, 0x64, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f,
         0x61, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x70, 0x75, 0x65, 0x64, 0x65,
         0x73, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d,
         0x65, 0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73, 0x65, 0x67,
         0xc3, 0xba, 0x6e, 0x62, 0x75, 0x65, 0x6e, 0x6f, 0x73, 0x76, 0x6f,
         0x6c, 0x76, 0x65, 0x72, 0x70, 0x75, 0x6e, 0x74, 0x6f, 0x73, 0x73,
         0x65, 0x6d, 0x61, 0x6e, 0x61, 0x68, 0x61, 0x62, 0xc3, 0xad, 0x61,
         0x61, 0x67, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x75, 0x65, 0x76, 0x6f,
         0x73, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x6c,
         0x6f, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6f, 0x6e, 0x69, 0xc3,
         0xb1, 0x6f, 0x73, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x73, 0x61, 0x6c,
         0x67, 0x75, 0x6e, 0x61, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6f, 0x69,
         0x6d, 0x61, 0x67, 0x65, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x72,
         0x61, 0x72, 0x72, 0x69, 0x62, 0x61, 0x6d, 0x61, 0x72, 0xc3, 0xad,
         0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x6c,
         0x65, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x61, 0x64, 0x63, 0x61, 0x6d,
         0x62, 0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x66, 0x75,
         0x65, 0x72, 0x6f, 0x6e, 0x70, 0x61, 0x73, 0x61, 0x64, 0x6f, 0x6c,
         0xc3, 0xad, 0x6e, 0x65, 0x61, 0x70, 0x61, 0x72, 0x65, 0x63, 0x65,
         0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x63, 0x75, 0x72, 0x73, 0x6f,
         0x73, 0x65, 0x73, 0x74, 0x61, 0x62, 0x61, 0x71, 0x75, 0x69, 0x65,
         0x72, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x63, 0x75, 0x61,
         0x6e, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x6d, 0x69,
         0x67, 0x75, 0x65, 0x6c, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x63,
         0x75, 0x61, 0x74, 0x72, 0x6f, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73,
         0x67, 0x72, 0x75, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x72, 0xc3, 0xa1,
         0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x6d, 0x65, 0x64, 0x69,
         0x6f, 0x73, 0x66, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63, 0x65,
         0x72, 0x63, 0x61, 0x64, 0x65, 0x6d, 0xc3, 0xa1, 0x73, 0x6f, 0x66,
         0x65, 0x72, 0x74, 0x61, 0x63, 0x6f, 0x63, 0x68, 0x65, 0x73, 0x6d,
         0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x61,
         0x6c, 0x65, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6c, 0x67, 0xc3, 0xba,
         0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x61, 0x63, 0x75, 0x61, 0x6c,
         0x65, 0x73, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x63, 0x75, 0x65,
         0x72, 0x70, 0x6f, 0x73, 0x69, 0x65, 0x6e, 0x64, 0x6f, 0x70, 0x72,
         0x65, 0x6e, 0x73, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x76,
         0x69, 0x61, 0x6a, 0x65, 0x73, 0x64, 0x69, 0x6e, 0x65, 0x72, 0x6f,
         0x6d, 0x75, 0x72, 0x63, 0x69, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3,
         0xa1, 0x70, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x72,
         0x69, 0x6f, 0x70, 0x75, 0x65, 0x62, 0x6c, 0x6f, 0x71, 0x75, 0x69,
         0x65, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x65, 0x6c, 0x70, 0x72,
         0x6f, 0x70, 0x69, 0x6f, 0x63, 0x72, 0x69, 0x73, 0x69, 0x73, 0x63,
         0x69, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75, 0x72, 0x6f,
         0x6d, 0x75, 0x65, 0x72, 0x74, 0x65, 0x66, 0x75, 0x65, 0x6e, 0x74,
         0x65, 0x63, 0x65, 0x72, 0x72, 0x61, 0x72, 0x67, 0x72, 0x61, 0x6e,
         0x64, 0x65, 0x65, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x70, 0x61, 0x72,
         0x74, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x64, 0x61, 0x70, 0x72,
         0x6f, 0x70, 0x69, 0x61, 0x6f, 0x66, 0x72, 0x65, 0x63, 0x65, 0x74,
         0x69, 0x65, 0x72, 0x72, 0x61, 0x65, 0x2d, 0x6d, 0x61, 0x69, 0x6c,
         0x76, 0x61, 0x72, 0x69, 0x61, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
         0x73, 0x66, 0x75, 0x74, 0x75, 0x72, 0x6f, 0x6f, 0x62, 0x6a, 0x65,
         0x74, 0x6f, 0x73, 0x65, 0x67, 0x75, 0x69, 0x72, 0x72, 0x69, 0x65,
         0x73, 0x67, 0x6f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x73, 0x6d, 0x69,
         0x73, 0x6d, 0x6f, 0x73, 0xc3, 0xba, 0x6e, 0x69, 0x63, 0x6f, 0x63,
         0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x73,
         0x72, 0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x62, 0x69, 0x64,
         0x6f, 0x70, 0x72, 0x75, 0x65, 0x62, 0x61, 0x74, 0x6f, 0x6c, 0x65,
         0x64, 0x6f, 0x74, 0x65, 0x6e, 0xc3, 0xad, 0x61, 0x6a, 0x65, 0x73,
         0xc3, 0xba, 0x73, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6f, 0x63, 0x6f,
         0x63, 0x69, 0x6e, 0x61, 0x6f, 0x72, 0x69, 0x67, 0x65, 0x6e, 0x74,
         0x69, 0x65, 0x6e, 0x64, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6f,
         0x63, 0xc3, 0xa1, 0x64, 0x69, 0x7a, 0x68, 0x61, 0x62, 0x6c, 0x61,
         0x72, 0x73, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x6c, 0x61, 0x74, 0x69,
         0x6e, 0x61, 0x66, 0x75, 0x65, 0x72, 0x7a, 0x61, 0x65, 0x73, 0x74,
         0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x72, 0x72, 0x61, 0x65, 0x6e,
         0x74, 0x72, 0x61, 0x72, 0xc3, 0xa9, 0x78, 0x69, 0x74, 0x6f, 0x6c,
         0xc3, 0xb3, 0x70, 0x65, 0x7a, 0x61, 0x67, 0x65, 0x6e, 0x64, 0x61,
         0x76, 0xc3, 0xad, 0x64, 0x65, 0x6f, 0x65, 0x76, 0x69, 0x74, 0x61,
         0x72, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x72,
         0x6f, 0x73, 0x6a, 0x61, 0x76, 0x69, 0x65, 0x72, 0x70, 0x61, 0x64,
         0x72, 0x65, 0x73, 0x66, 0xc3, 0xa1, 0x63, 0x69, 0x6c, 0x63, 0x61,
         0x62, 0x65, 0x7a, 0x61, 0xc3, 0xa1, 0x72, 0x65, 0x61, 0x73, 0x73,
         0x61, 0x6c, 0x69, 0x64, 0x61, 0x65, 0x6e, 0x76, 0xc3, 0xad, 0x6f,
         0x6a, 0x61, 0x70, 0xc3, 0xb3, 0x6e, 0x61, 0x62, 0x75, 0x73, 0x6f,
         0x73, 0x62, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74,
         0x6f, 0x73, 0x6c, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x70, 0x75, 0x65,
         0x64, 0x61, 0x6e, 0x66, 0x75, 0x65, 0x72, 0x74, 0x65, 0x63, 0x6f,
         0x6d, 0xc3, 0xba, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x65, 0x73, 0x68,
         0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f,
         0x62, 0x69, 0x6c, 0x62, 0x61, 0x6f, 0x75, 0x6e, 0x69, 0x64, 0x61,
         0x64, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x73, 0x65, 0x64, 0x69, 0x74,
         0x61, 0x72, 0x63, 0x72, 0x65, 0x61, 0x64, 0x6f, 0xd0, 0xb4, 0xd0,
         0xbb, 0xd1, 0x8f, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba,
         0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1,
         0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,
         0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
         0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb5, 0xd1, 0x89,
         0xd0, 0xb5, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0x9a, 0xd0,
         0xb0, 0xd0, 0xba, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xb1,
         0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
         0x92, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4,
         0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
         0xbc, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xb5,
         0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
         0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3,
         0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
         0x94, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8,
         0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
         0x85, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xba, 0xd1, 0x82,
         0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0,
         0xbe, 0xd1, 0x82, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xa1,
         0xd0, 0xa8, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0,
         0xa7, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81,
         0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1,
         0x83, 0xd0, 0xa2, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb4, 0xd0, 0xb2,
         0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1,
         0x82, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0x92,
         0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0,
         0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x82,
         0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1,
         0x8f, 0xd0, 0x92, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x82, 0xd1, 0x80,
         0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0x92, 0xd0,
         0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81,
         0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82, 0xd1,
         0x80, 0xd1, 0x83, 0xd0, 0xb1, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8,
         0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
         0xb5, 0xd0, 0x9e, 0xd0, 0x9e, 0xd0, 0x9e, 0xd0, 0xbb, 0xd0, 0xb8,
         0xd1, 0x86, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0x9e, 0xd0,
         0xbd, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb4,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0,
         0xb4, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbe,
         0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xb4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
         0x94, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa5,
         0x80, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0x6a, 0x61, 0x67, 0x72, 0x61,
         0x6e, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x9c, 0xe0,
         0xa5, 0x8b, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x88, 0xe0, 0xa4,
         0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x8f, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xa5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa5, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0x95, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0,
         0xa4, 0xb5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x88,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x88, 0xe0,
         0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x93, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xd8,
         0xb9, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa5, 0xd9, 0x84, 0xd9, 0x89,
         0xd9, 0x87, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xa2, 0xd8, 0xae, 0xd8,
         0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd9, 0x87, 0xd8, 0xb5, 0xd9,
         0x88, 0xd8, 0xb1, 0xd8, 0xba, 0xd9, 0x8a, 0xd8, 0xb1, 0xd9, 0x83,
         0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
         0xa8, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xb6,
         0xd8, 0xb0, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x87, 0xd9, 0x86, 0xd8,
         0xa7, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9,
         0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xad,
         0xd8, 0xaa, 0xd9, 0x89, 0xd9, 0x82, 0xd8, 0xa8, 0xd9, 0x84, 0xd9,
         0x88, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xa7, 0xd8, 0xae, 0xd8, 0xb1,
         0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8,
         0xaf, 0xd8, 0xb1, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xa5, 0xd8, 0xb0,
         0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8,
         0xad, 0xd8, 0xaf, 0xd8, 0xa5, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x81,
         0xd9, 0x8a, 0xd9, 0x87, 0xd8, 0xa8, 0xd8, 0xb9, 0xd8, 0xb6, 0xd9,
         0x83, 0xd9, 0x8a, 0xd9, 0x81, 0xd8, 0xa8, 0xd8, 0xad, 0xd8, 0xab,
         0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x88, 0xd9, 0x87, 0xd9,
         0x88, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xac, 0xd8, 0xaf,
         0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
         0x84, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x84,
         0xd9, 0x8a, 0xd8, 0xb3, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8,
         0xb5, 0xd9, 0x84, 0xd9, 0x89, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb0,
         0xd8, 0xa8, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa3, 0xd9, 0x86, 0xd9,
         0x87, 0xd9, 0x85, 0xd8, 0xab, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x86,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xad, 0xd9,
         0x8a, 0xd8, 0xab, 0xd9, 0x85, 0xd8, 0xb5, 0xd8, 0xb1, 0xd8, 0xb4,
         0xd8, 0xb1, 0xd8, 0xad, 0xd8, 0xad, 0xd9, 0x88, 0xd9, 0x84, 0xd9,
         0x88, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb0, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb1, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x81, 0xd8, 0xa3, 0xd8, 0xa8, 0xd9, 0x88, 0xd8, 0xae, 0xd8,
         0xa7, 0xd8, 0xb5, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,
         0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd8,
         0xb9, 0xd8, 0xb6, 0xd9, 0x88, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xaf,
         0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xae, 0xd9, 0x8a, 0xd8,
         0xb1, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x83,
         0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xa1, 0xd9, 0x88, 0xd9,
         0x87, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x88, 0xd9, 0x82,
         0xd8, 0xb5, 0xd8, 0xb5, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8,
         0xb1, 0xd9, 0x82, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xad, 0xd8, 0xaf,
         0xd9, 0x86, 0xd8, 0xad, 0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xaf, 0xd9,
         0x85, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xad,
         0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9,
         0x88, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa8, 0xd9, 0x85,
         0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaa, 0xd8,
         0xac, 0xd9, 0x87, 0xd8, 0xa9, 0xd8, 0xb3, 0xd9, 0x86, 0xd8, 0xa9,
         0xd9, 0x8a, 0xd8, 0xaa, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xb1, 0xd8,
         0xa9, 0xd8, 0xba, 0xd8, 0xb2, 0xd8, 0xa9, 0xd9, 0x86, 0xd9, 0x81,
         0xd8, 0xb3, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xaa, 0xd9, 0x84, 0xd9,
         0x84, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa,
         0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd9,
         0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x87,
         0xd8, 0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8,
         0xa1, 0xd9, 0x86, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x85,
         0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xa8, 0xd9,
         0x83, 0xd9, 0x84, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb1,
         0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa8, 0xd8, 0xa3, 0xd9, 0x86, 0xd9,
         0x87, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x83,
         0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x81, 0xd9, 0x82, 0xd8,
         0xaf, 0xd8, 0xad, 0xd8, 0xb3, 0xd9, 0x86, 0xd9, 0x84, 0xd9, 0x87,
         0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9,
         0x87, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x87, 0xd8, 0xb1, 0xd9, 0x82,
         0xd8, 0xb7, 0xd8, 0xb1, 0xd8, 0xb7, 0xd9, 0x84, 0xd8, 0xa8, 0x70,
         0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
         0x63, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x68, 0x69,
         0x6d, 0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
         0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70,
         0x70, 0x6f, 0x72, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
         0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x75, 0x63, 0x63,
         0x65, 0x73, 0x73, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x3c,
         0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
         0x72, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x72,
         0x65, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
         0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x72, 0x75, 0x6e,
         0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
         0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x62, 0x6a, 0x65,
         0x63, 0x74, 0x73, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x77,
         0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x72, 0x74, 0x69, 0x63,
         0x6c, 0x65, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x6e, 0x65,
         0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
         0x79, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x62, 0x72, 0x6f,
         0x77, 0x73, 0x65, 0x72, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
         0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
         0x69, 0x63, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x64,
         0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65,
         0x73, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x77, 0x65,
         0x62, 0x73, 0x69, 0x74, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
         0x79, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x6f, 0x70, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
         0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6d, 0x69, 0x6c, 0x6c,
         0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x77,
         0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
         0x73, 0x73, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x77, 0x65,
         0x61, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
         0x74, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x69,
         0x72, 0x65, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
         0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x72, 0x65, 0x6d, 0x6f,
         0x76, 0x65, 0x64, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63,
         0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x72, 0x63, 0x68, 0x69,
         0x76, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x65,
         0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
         0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x6e,
         0x61, 0x67, 0x65, 0x72, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
         0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x6d, 0x61, 0x63, 0x68,
         0x69, 0x6e, 0x65, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x70,
         0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65,
         0x78, 0x74, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x6f,
         0x63, 0x69, 0x65, 0x74, 0x79, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
         0x73, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x6e, 0x61,
         0x62, 0x6c, 0x65, 0x64, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
         0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x6c, 0x6f, 0x61, 0x64,
         0x69, 0x6e, 0x67, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
         0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x66, 0x69, 0x6e, 0x61, 0x6c,
         0x6c, 0x79, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x6d, 0x65,
         0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
         0x73, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x75, 0x6c,
         0x74, 0x75, 0x72, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2c,
         0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x6a,
         0x65, 0x63, 0x74, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
         0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x78, 0x70, 0x69, 0x72,
         0x65, 0x73, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x62, 0x61,
         0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
         0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72,
         0x6f, 0x75, 0x67, 0x68, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
         0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
         0x61, 0x63, 0x74, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x70,
         0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x76, 0x69, 0x6c, 0x6c, 0x61,
         0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x67, 0x61,
         0x6c, 0x6c, 0x65, 0x72, 0x79, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
         0x65, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73,
         0x73, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
         0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x6d, 0x65, 0x61, 0x73,
         0x75, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73,
         0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,
         0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x72,
         0x69, 0x74, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
         0x72, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x70,
         0x6f, 0x72, 0x74, 0x73, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73,
         0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x6c, 0x64,
         0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x65,
         0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x65, 0x78, 0x70, 0x72, 0x65,
         0x73, 0x73, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x70, 0x69,
         0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65,
         0x72, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x74, 0x72, 0x61,
         0x66, 0x66, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
         0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x63, 0x65, 0x6e, 0x74,
         0x72, 0x61, 0x6c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x69,
         0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x73, 0x6f,
         0x6e, 0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x66, 0x65,
         0x61, 0x74, 0x75, 0x72, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
         0x67, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x73, 0x63, 0x68,
         0x6f, 0x6f, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
         0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x65, 0x70, 0x69, 0x73,
         0x6f, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x67,
         0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6f, 0x62, 0x76, 0x69, 0x6f,
         0x75, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x70, 0x72,
         0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0d, 0x0a, 0x77, 0x72, 0x61,
         0x70, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
         0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x72, 0x65, 0x61, 0x6c,
         0x69, 0x74, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x61,
         0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x73, 0x6b, 0x74,
         0x6f, 0x70, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x70, 0x61,
         0x74, 0x74, 0x65, 0x72, 0x6e, 0x75, 0x6e, 0x75, 0x73, 0x75, 0x61,
         0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x63, 0x61, 0x70,
         0x69, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
         0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
         0x65, 0x63, 0x74, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x41,
         0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x64, 0x65, 0x63, 0x61, 0x64,
         0x65, 0x73, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x26,
         0x61, 0x6d, 0x70, 0x3b, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
         0x73, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74,
         0x6f, 0x6d, 0x61, 0x74, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
         0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x6e, 0x6f, 0x74, 0x68,
         0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x63,
         0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x74, 0x74, 0x65,
         0x72, 0x73, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63,
         0x69, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
         0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x67,
         0x6c, 0x61, 0x6e, 0x64, 0x3d, 0x31, 0x26, 0x61, 0x6d, 0x70, 0x3b,
         0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x3d, 0x20, 0x6e,
         0x65, 0x77, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x75,
         0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
         0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x72, 0x65,
         0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
         0x74, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
         0x6c, 0x65, 0x67, 0x65, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x61, 0x72,
         0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x63, 0x61,
         0x75, 0x73, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
         0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x66, 0x69, 0x6e, 0x61, 0x6e,
         0x63, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x71, 0x75,
         0x69, 0x63, 0x6b, 0x6c, 0x79, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
         0x6e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x73, 0x65, 0x74,
         0x74, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
         0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x77, 0x65, 0x61, 0x70,
         0x6f, 0x6e, 0x73, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x26,
         0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
         0x6f, 0x6c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x63, 0x6f,
         0x76, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
         0x65, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x64, 0x65, 0x76,
         0x69, 0x63, 0x65, 0x73, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
         0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x69, 0x74, 0x6c,
         0x65, 0x3d, 0x22, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x6b,
         0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x6f, 0x77, 0x69,
         0x6e, 0x67, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x64, 0x72,
         0x6f, 0x70, 0x70, 0x65, 0x64, 0x68, 0x65, 0x61, 0x76, 0x69, 0x6c,
         0x79, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x31, 0x27,
         0x5d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
         0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x76, 0x61,
         0x6e, 0x63, 0x65, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f,
         0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x72, 0x61, 0x77, 0x69,
         0x6e, 0x67, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x6f, 0x72,
         0x64, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e,
         0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x66,
         0x6f, 0x72, 0x6d, 0x3e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
         0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x66, 0x69,
         0x6e, 0x65, 0x64, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x63,
         0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x41, 0x72, 0x74, 0x69, 0x63,
         0x6c, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x6c, 0x61,
         0x72, 0x67, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
         0x6d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x69, 0x64,
         0x65, 0x62, 0x61, 0x72, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 0x6f,
         0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x65,
         0x72, 0x61, 0x6c, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c,
         0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x6e, 0x69, 0x6d, 0x61,
         0x74, 0x65, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x72,
         0x72, 0x69, 0x76, 0x65, 0x64, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e,
         0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x6f, 0x75,
         0x67, 0x68, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20,
         0x62, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x64, 0x65, 0x6e, 0x73,
         0x69, 0x74, 0x79, 0x42, 0x72, 0x69, 0x74, 0x61, 0x69, 0x6e, 0x43,
         0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x6c, 0x61, 0x63, 0x6b, 0x20,
         0x6f, 0x66, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x72,
         0x65, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61,
         0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x72, 0x65, 0x63,
         0x65, 0x69, 0x76, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73,
         0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x68, 0x75, 0x73, 0x62,
         0x61, 0x6e, 0x64, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x63, 0x74, 0x61,
         0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x6c,
         0x65, 0x73, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x72,
         0x6f, 0x75, 0x67, 0x68, 0x74, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
         0x67, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x6c, 0x61,
         0x6e, 0x67, 0x3d, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
         0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x61, 0x6e,
         0x6e, 0x65, 0x64, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x70,
         0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x65, 0x72, 0x69,
         0x63, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x26,
         0x71, 0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
         0x65, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x61, 0x6c,
         0x75, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
         0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x73,
         0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x62, 0x69,
         0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x77, 0x61,
         0x6e, 0x74, 0x20, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f,
         0x66, 0x46, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x79, 0x6f, 0x75,
         0x20, 0x61, 0x72, 0x65, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
         0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x64, 0x6d, 0x61, 0x78, 0x69,
         0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x72,
         0x61, 0x70, 0x69, 0x64, 0x6c, 0x79, 0x63, 0x6c, 0x69, 0x6d, 0x61,
         0x74, 0x65, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x65, 0x6d,
         0x65, 0x72, 0x67, 0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
         0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x70, 0x69, 0x6f,
         0x6e, 0x65, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
         0x64, 0x79, 0x6e, 0x61, 0x73, 0x74, 0x79, 0x68, 0x6f, 0x77, 0x20,
         0x74, 0x6f, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x72,
         0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
         0x6d, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x62, 0x72,
         0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
         0x72, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x63, 0x61, 0x6c,
         0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
         0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x64, 0x77, 0x61,
         0x72, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
         0x6f, 0x62, 0x65, 0x72, 0x74, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72,
         0x74, 0x73, 0x50, 0x61, 0x63, 0x69, 0x66, 0x69, 0x63, 0x6c, 0x65,
         0x61, 0x72, 0x6e, 0x65, 0x64, 0x75, 0x70, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x77, 0x65, 0x20,
         0x68, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x65, 0x6c, 0x65, 0x73,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x61,
         0x72, 0x63, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x61,
         0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x61, 0x73, 0x73, 0x69,
         0x76, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x20,
         0x66, 0x61, 0x6c, 0x73, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65,
         0x64, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x62, 0x65, 0x6e,
         0x65, 0x66, 0x69, 0x74, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67,
         0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x69,
         0x6d, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x6d,
         0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x6c, 0x69,
         0x6e, 0x67, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x72, 0x65,
         0x76, 0x65, 0x72, 0x73, 0x65, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
         0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x69, 0x73,
         0x73, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
         0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x75, 0x64,
         0x65, 0x6e, 0x74, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x65,
         0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f,
         0x72, 0x65, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x65, 0x76,
         0x6f, 0x6c, 0x76, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
         0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x6e, 0x67,
         0x6c, 0x69, 0x73, 0x68, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20,
         0x20, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x73, 0x79, 0x6d, 0x62,
         0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x6d,
         0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x6d, 0x75, 0x73, 0x69, 0x63,
         0x61, 0x6c, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x73, 0x65,
         0x72, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0d,
         0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x6f,
         0x75, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
         0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
         0x6e, 0x74, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x72,
         0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
         0x6f, 0x72, 0x20, 0x27, 0x27, 0x54, 0x68, 0x65, 0x20, 0x77, 0x69,
         0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
         0x65, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6c,
         0x6c, 0x65, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
         0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x65, 0x6e, 0x68, 0x61,
         0x6e, 0x63, 0x65, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x73, 0x29,
         0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
         0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x6e,
         0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
         0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e,
         0x64, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x64,
         0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x45, 0x61, 0x73, 0x74,
         0x65, 0x72, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x77,
         0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
         0x65, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6e, 0x65,
         0x75, 0x74, 0x72, 0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
         0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x69, 0x67,
         0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e,
         0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x77, 0x65, 0x73, 0x74,
         0x65, 0x72, 0x6e, 0x63, 0x61, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x2d,
         0x77, 0x65, 0x62, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x61, 0x69, 0x6d,
         0x65, 0x64, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x65, 0x63, 0x68,
         0x61, 0x70, 0x74, 0x65, 0x72, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
         0x73, 0x54, 0x68, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x7a,
         0x69, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65,
         0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x65, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x3a,
         0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x68, 0x75, 0x6e, 0x64, 0x72,
         0x65, 0x64, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x5f, 0x62,
         0x75, 0x74, 0x74, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
         0x73, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x63, 0x68, 0x72,
         0x6f, 0x6e, 0x69, 0x63, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73,
         0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x70, 0x72, 0x6f, 0x74,
         0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x70,
         0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x69, 0x74, 0x68,
         0x65, 0x72, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6c, 0x79, 0x67, 0x72,
         0x65, 0x61, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
         0x6c, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x63, 0x6f, 0x6d,
         0x6d, 0x61, 0x6e, 0x64, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
         0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x77, 0x6f, 0x72, 0x73,
         0x68, 0x69, 0x70, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x74,
         0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x68, 0x69, 0x67, 0x68, 0x65,
         0x73, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x75, 0x74,
         0x69, 0x6c, 0x69, 0x74, 0x79, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65,
         0x72, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x74, 0x65, 0x73,
         0x74, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79,
         0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x77,
         0x73, 0x65, 0x72, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x6c, 0x7d,
         0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65,
         0x63, 0x74, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x68, 0x69,
         0x64, 0x65, 0x28, 0x29, 0x3b, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x64,
         0x61, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x6c,
         0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72,
         0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69,
         0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x53,
         0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x74, 0x74,
         0x6f, 0x6e, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x75,
         0x74, 0x20, 0x6f, 0x66, 0x20, 0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c,
         0x6c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6e,
         0x6d, 0x61, 0x72, 0x6b, 0x76, 0x6f, 0x69, 0x64, 0x28, 0x30, 0x29,
         0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x6a, 0x73, 0x70, 0x72, 0x65, 0x76,
         0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
         0x74, 0x65, 0x70, 0x68, 0x65, 0x6e, 0x0a, 0x0a, 0x57, 0x68, 0x65,
         0x6e, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x3c, 0x2f,
         0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x6e,
         0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x22, 0x20, 0x61,
         0x6c, 0x74, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
         0x2e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x0a, 0x0a, 0x4d, 0x61,
         0x6e, 0x79, 0x20, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x70,
         0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x70, 0x65, 0x72, 0x66, 0x6f,
         0x72, 0x6d, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79,
         0x70, 0x65, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
         0x6c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x6f, 0x70, 0x70,
         0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
         0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x6a, 0x75, 0x73, 0x74,
         0x69, 0x63, 0x65, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x65, 0x20, 0x42,
         0x65, 0x6c, 0x67, 0x69, 0x75, 0x6d, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f,
         0x61, 0x3e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x6f,
         0x74, 0x61, 0x62, 0x6c, 0x79, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
         0x67, 0x77, 0x61, 0x72, 0x66, 0x61, 0x72, 0x65, 0x20, 0x4f, 0x74,
         0x68, 0x65, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
         0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x73,
         0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x3c, 0x2f, 0x70, 0x3e, 0x0d,
         0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x69, 0x67,
         0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x6f,
         0x66, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61, 0x73, 0x47, 0x65, 0x6f,
         0x72, 0x67, 0x69, 0x61, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
         0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x3c, 0x73, 0x74, 0x6f, 0x70,
         0x70, 0x65, 0x64, 0x31, 0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x69,
         0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x6e, 0x6f, 0x74, 0x61, 0x62,
         0x6c, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x6c, 0x69,
         0x73, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
         0x64, 0x31, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x3c, 0x2f, 0x68,
         0x33, 0x3e, 0x0a, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c,
         0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x65,
         0x63, 0x74, 0x20, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x30,
         0x30, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x6f, 0x6e, 0x61, 0x72,
         0x63, 0x68, 0x6f, 0x66, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x65,
         0x61, 0x63, 0x68, 0x65, 0x72, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79,
         0x20, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x6c, 0x69, 0x66,
         0x65, 0x20, 0x6f, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e,
         0x72, 0x69, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x26, 0x72, 0x61, 0x71,
         0x75, 0x6f, 0x3b, 0x70, 0x6c, 0x75, 0x73, 0x6f, 0x6e, 0x65, 0x68,
         0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x28, 0x74, 0x68, 0x6f, 0x75,
         0x67, 0x68, 0x44, 0x6f, 0x75, 0x67, 0x6c, 0x61, 0x73, 0x6a, 0x6f,
         0x69, 0x6e, 0x69, 0x6e, 0x67, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
         0x73, 0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x41, 0x6e, 0x63,
         0x69, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d,
         0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x75, 0x63, 0x68,
         0x20, 0x61, 0x73, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x76,
         0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x57, 0x69, 0x6e, 0x64, 0x6f,
         0x77, 0x73, 0x65, 0x6e, 0x6a, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x20,
         0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65,
         0x64, 0x3c, 0x61, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x72,
         0x65, 0x69, 0x67, 0x6e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69,
         0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x44, 0x69, 0x73, 0x70,
         0x6c, 0x61, 0x79, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x68,
         0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x68, 0x69, 0x64, 0x64, 0x65,
         0x6e, 0x3b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x65,
         0x65, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65,
         0x74, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x6c, 0x6f, 0x6f,
         0x6b, 0x20, 0x61, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
         0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4a, 0x61, 0x6e, 0x75,
         0x61, 0x72, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x74,
         0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x61, 0x3a, 0x68, 0x6f, 0x76,
         0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x72,
         0x65, 0x6e, 0x63, 0x68, 0x20, 0x6c, 0x61, 0x63, 0x6b, 0x69, 0x6e,
         0x67, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x78, 0x74,
         0x72, 0x61, 0x63, 0x74, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73,
         0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x67, 0x65, 0x6e, 0x65,
         0x72, 0x61, 0x74, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x61,
         0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2d, 0x69,
         0x6d, 0x61, 0x67, 0x65, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
         0x64, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
         0x69, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
         0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x64, 0x66, 0x69, 0x72, 0x73, 0x74, 0x22, 0x3e, 0x63,
         0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x6c, 0x61,
         0x6e, 0x64, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x68,
         0x65, 0x20, 0x77, 0x61, 0x73, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22,
         0x3e, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x64, 0x69, 0x76,
         0x69, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
         0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x65,
         0x20, 0x6f, 0x66, 0x61, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6d,
         0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65,
         0x78, 0x2e, 0x66, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x75,
         0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x61, 0x69, 0x6c, 0x77, 0x61,
         0x79, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x6d, 0x6f, 0x6e,
         0x73, 0x74, 0x65, 0x72, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74,
         0x69, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x75, 0x63, 0x6c,
         0x65, 0x61, 0x72, 0x4a, 0x65, 0x77, 0x69, 0x73, 0x68, 0x20, 0x70,
         0x72, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x74, 0x69,
         0x73, 0x68, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x70, 0x72,
         0x65, 0x64, 0x69, 0x63, 0x74, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x6d,
         0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x6f,
         0x20, 0x77, 0x61, 0x73, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
         0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x69, 0x63,
         0x69, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x70,
         0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x65,
         0x74, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x66, 0x69,
         0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
         0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x77, 0x69, 0x6e,
         0x6e, 0x65, 0x72, 0x73, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x3c,
         0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x61, 0x74, 0x75,
         0x72, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63,
         0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x6f, 0x75, 0x74, 0x63, 0x6f,
         0x6d, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x77,
         0x65, 0x64, 0x69, 0x73, 0x68, 0x62, 0x72, 0x69, 0x65, 0x66, 0x6c,
         0x79, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x6f, 0x20,
         0x6d, 0x75, 0x63, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
         0x64, 0x65, 0x70, 0x69, 0x63, 0x74, 0x73, 0x63, 0x6f, 0x6c, 0x75,
         0x6d, 0x6e, 0x73, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x6e, 0x65, 0x78, 0x74, 0x20,
         0x74, 0x6f, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x61,
         0x70, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65,
         0x64, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x2d, 0x77, 0x69,
         0x64, 0x74, 0x68, 0x3a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e,
         0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x53, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x54,
         0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x79, 0x6f, 0x75, 0x6e, 0x67,
         0x65, 0x72, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x28, 0x7d, 0x29,
         0x28, 0x29, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e,
         0x67, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x67,
         0x72, 0x65, 0x65, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d,
         0x52, 0x69, 0x63, 0x68, 0x61, 0x72, 0x64, 0x63, 0x6c, 0x6f, 0x73,
         0x65, 0x6c, 0x79, 0x70, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x65,
         0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
         0x0d, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x75, 0x6c,
         0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,
         0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x79,
         0x73, 0x69, 0x63, 0x73, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
         0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x44,
         0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3c, 0x62, 0x72, 0x20, 0x2f,
         0x3e, 0x0a, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x63, 0x68,
         0x61, 0x72, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73,
         0x6d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x70, 0x72, 0x6f,
         0x63, 0x65, 0x65, 0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
         0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0d, 0x0a, 0x6f, 0x6e, 0x6c, 0x69,
         0x6e, 0x65, 0x2e, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x68,
         0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x61, 0x6d, 0x6f,
         0x6e, 0x64, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x69,
         0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x20, 0x2d, 0x2d,
         0x3e, 0x29, 0x2e, 0x61, 0x74, 0x74, 0x72, 0x28, 0x72, 0x65, 0x61,
         0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
         0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x72, 0x65, 0x61, 0x6c,
         0x69, 0x7a, 0x65, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x73,
         0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x73, 0x72, 0x63, 0x3d,
         0x22, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x64, 0x65,
         0x73, 0x70, 0x69, 0x74, 0x65, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
         0x65, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62,
         0x6c, 0x69, 0x63, 0x20, 0x68, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e,
         0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x74, 0x72, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x3c,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x61, 0x20, 0x6c, 0x61, 0x72,
         0x67, 0x65, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x6c, 0x61,
         0x74, 0x65, 0x72, 0x2c, 0x20, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
         0x74, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65,
         0x61, 0x74, 0x6f, 0x72, 0x48, 0x75, 0x6e, 0x67, 0x61, 0x72, 0x79,
         0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x65, 0x65, 0x20,
         0x74, 0x68, 0x65, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x4d,
         0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65,
         0x6d, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2c,
         0x20, 0x61, 0x6e, 0x64, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x3d, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x74, 0x72, 0x61,
         0x64, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x3e, 0x0a,
         0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x47, 0x6f, 0x6c, 0x64,
         0x65, 0x6e, 0x20, 0x41, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x67,
         0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69,
         0x6e, 0x67, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x64,
         0x65, 0x61, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f,
         0x66, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x69,
         0x73, 0x20, 0x69, 0x73, 0x2e, 0x73, 0x72, 0x63, 0x20, 0x3d, 0x20,
         0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x69,
         0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d,
         0x75, 0x73, 0x6c, 0x69, 0x6d, 0x73, 0x57, 0x68, 0x61, 0x74, 0x20,
         0x69, 0x73, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x6d, 0x61,
         0x72, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
         0x73, 0x49, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x2c, 0x65, 0x71, 0x75,
         0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61,
         0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x73, 0x63, 0x61,
         0x70, 0x65, 0x28, 0x41, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x67,
         0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x79, 0x73, 0x74, 0x65,
         0x6d, 0x2c, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69,
         0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x20, 0x61, 0x6c, 0x73,
         0x6f, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x63, 0x61,
         0x64, 0x65, 0x6d, 0x79, 0x0a, 0x09, 0x09, 0x3c, 0x21, 0x2d, 0x2d,
         0x44, 0x61, 0x6e, 0x69, 0x65, 0x6c, 0x20, 0x62, 0x69, 0x6e, 0x64,
         0x69, 0x6e, 0x67, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3e, 0x69,
         0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69,
         0x7a, 0x65, 0x41, 0x62, 0x72, 0x61, 0x68, 0x61, 0x6d, 0x28, 0x65,
         0x78, 0x63, 0x65, 0x70, 0x74, 0x7b, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x3a, 0x70, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x68,
         0x74, 0x6d, 0x6c, 0x28, 0x7c, 0x7c, 0x20, 0x5b, 0x5d, 0x3b, 0x0a,
         0x44, 0x41, 0x54, 0x41, 0x5b, 0x20, 0x2a, 0x6b, 0x69, 0x74, 0x63,
         0x68, 0x65, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x61,
         0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x61, 0x6c, 0x65,
         0x63, 0x74, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x79, 0x20, 0x5f, 0x62,
         0x6c, 0x61, 0x6e, 0x6b, 0x27, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
         0x6c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x69, 0x66, 0x28,
         0x74, 0x79, 0x70, 0x65, 0x49, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f,
         0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x22, 0x3e, 0x54, 0x65,
         0x72, 0x6d, 0x73, 0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x4f,
         0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x73, 0x74, 0x65,
         0x72, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x6f,
         0x6e, 0x63, 0x65, 0x72, 0x6e, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64,
         0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6a, 0x75, 0x73,
         0x74, 0x69, 0x66, 0x79, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x73,
         0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x69, 0x74, 0x73, 0x20,
         0x6f, 0x77, 0x6e, 0x61, 0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x69,
         0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x6c, 0x61, 0x73, 0x74, 0x69,
         0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,
         0x22, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x63, 0x6f, 0x6e,
         0x63, 0x65, 0x72, 0x74, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d,
         0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x63, 0x6c, 0x75, 0x73,
         0x74, 0x65, 0x72, 0x70, 0x68, 0x70, 0x3f, 0x69, 0x64, 0x3d, 0x61,
         0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x29, 0x3b, 0x7d, 0x29, 0x28,
         0x29, 0x3b, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x3e, 0x3c,
         0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
         0x73, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64,
         0x72, 0x65, 0x73, 0x73, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x75, 0x72,
         0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x61, 0x6c, 0x6c, 0x65,
         0x67, 0x65, 0x64, 0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x77,
         0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x6d, 0x61,
         0x74, 0x63, 0x68, 0x65, 0x73, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
         0x64, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x65, 0x66,
         0x65, 0x6e, 0x73, 0x65, 0x64, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e,
         0x0a, 0x09, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x63, 0x75, 0x73, 0x74,
         0x6f, 0x6d, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
         0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x42, 0x6f, 0x6f, 0x6b, 0x20,
         0x6f, 0x66, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x6d, 0x69,
         0x6e, 0x2e, 0x6a, 0x73, 0x3f, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x6b, 0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x74, 0x6f, 0x64,
         0x61, 0x79, 0x27, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20,
         0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x77, 0x65, 0x61, 0x72,
         0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x20, 0x52, 0x69, 0x67, 0x3b,
         0x0a, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x72, 0x61, 0x69, 0x73, 0x69,
         0x6e, 0x67, 0x20, 0x41, 0x6c, 0x73, 0x6f, 0x2c, 0x20, 0x63, 0x72,
         0x75, 0x63, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22,
         0x3e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x2d, 0x3e,
         0x0a, 0x3c, 0x73, 0x63, 0x66, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78,
         0x61, 0x73, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x70, 0x70, 0x6c,
         0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x20, 0x73,
         0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
         0x3d, 0x20, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x74, 0x6f,
         0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
         0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
         0x65, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72,
         0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x56, 0x69, 0x72, 0x74,
         0x75, 0x61, 0x6c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x43,
         0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
         0x65, 0x64, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x70, 0x6f,
         0x76, 0x65, 0x72, 0x74, 0x79, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65,
         0x72, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x6f, 0x6c,
         0x75, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e, 0x79,
         0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x20, 0x52, 0x65, 0x6c, 0x61,
         0x74, 0x65, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x72,
         0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x63, 0x75, 0x74, 0x74, 0x69,
         0x6e, 0x67, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x6c, 0x69,
         0x66, 0x65, 0x20, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
         0x72, 0x2d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4e, 0x6f, 0x74,
         0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
         0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61, 0x64,
         0x69, 0x75, 0x6d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x76,
         0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x72, 0x61, 0x76, 0x65,
         0x6c, 0x73, 0x68, 0x65, 0x6c, 0x64, 0x20, 0x62, 0x79, 0x77, 0x68,
         0x6f, 0x20, 0x61, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69,
         0x6e, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x61, 0x6e, 0x67,
         0x75, 0x6c, 0x61, 0x72, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x64,
         0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x77, 0x6e,
         0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x27,
         0x63, 0x6c, 0x69, 0x63, 0x6b, 0x27, 0x63, 0x68, 0x61, 0x72, 0x67,
         0x65, 0x73, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x74,
         0x20, 0x77, 0x69, 0x6c, 0x6c, 0x63, 0x69, 0x74, 0x79, 0x20, 0x6f,
         0x66, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x3b, 0x41, 0x6e, 0x64,
         0x72, 0x65, 0x77, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
         0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x6f, 0x72, 0x20, 0x6d,
         0x6f, 0x72, 0x65, 0x33, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x72,
         0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x72, 0x73, 0x69, 0x6f, 0x6e,
         0x3d, 0x22, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x77, 0x69,
         0x74, 0x68, 0x69, 0x6e, 0x20, 0x68, 0x65, 0x72, 0x73, 0x65, 0x6c,
         0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x64,
         0x65, 0x72, 0x61, 0x6c, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
         0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x73, 0x65, 0x6e, 0x74,
         0x20, 0x74, 0x6f, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61,
         0x63, 0x74, 0x72, 0x65, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x65, 0x20,
         0x74, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x44, 0x75,
         0x6b, 0x65, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
         0x2c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x77, 0x68, 0x61,
         0x74, 0x20, 0x69, 0x73, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79,
         0x61, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x68,
         0x74, 0x74, 0x70, 0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6d,
         0x65, 0x6e, 0x75, 0x22, 0x3e, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
         0x6c, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x63, 0x6f,
         0x75, 0x6e, 0x63, 0x69, 0x6c, 0x67, 0x61, 0x69, 0x6e, 0x69, 0x6e,
         0x67, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x53, 0x75, 0x6d,
         0x6d, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
         0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x66, 0x69, 0x74, 0x6e,
         0x65, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x61, 0x73, 0x65,
         0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x73, 0x75, 0x70, 0x72, 0x65,
         0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x65,
         0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61,
         0x6e, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x62,
         0x65, 0x72, 0x74, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
         0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6d, 0x61, 0x6c,
         0x6c, 0x22, 0x3e, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x64,
         0x6f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x66, 0x65, 0x64, 0x65, 0x72,
         0x61, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6f, 0x66, 0x62, 0x65,
         0x6e, 0x65, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74,
         0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x72, 0x6f,
         0x75, 0x6e, 0x64, 0x73, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20,
         0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x66,
         0x72, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x63,
         0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x65,
         0x61, 0x64, 0x66, 0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x73,
         0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2e, 0x79, 0x61, 0x68, 0x6f, 0x6f,
         0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x66, 0x69, 0x67,
         0x68, 0x74, 0x65, 0x72, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72, 0x65,
         0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x67, 0x61,
         0x6e, 0x69, 0x63, 0x3d, 0x20, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x65,
         0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
         0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x20,
         0x77, 0x68, 0x6f, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f,
         0x72, 0x79, 0x65, 0x61, 0x72, 0x20, 0x6f, 0x66, 0x65, 0x6e, 0x64,
         0x20, 0x6f, 0x66, 0x20, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
         0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x68, 0x65, 0x61, 0x64,
         0x65, 0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x72,
         0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x72, 0x65, 0x6e, 0x61, 0x6d,
         0x65, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x68, 0x65,
         0x61, 0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e,
         0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x77, 0x61, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x31,
         0x6b, 0x6e, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x20, 0x70,
         0x61, 0x72, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6c,
         0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
         0x73, 0x74, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x69,
         0x6e, 0x6b, 0x73, 0x22, 0x3e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65,
         0x64, 0x45, 0x4e, 0x44, 0x20, 0x2d, 0x2d, 0x3e, 0x66, 0x61, 0x6d,
         0x6f, 0x75, 0x73, 0x20, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
         0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c,
         0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x79, 0x20, 0x77,
         0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
         0x61, 0x6c, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f,
         0x6d, 0x70, 0x65, 0x74, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
         0x3e, 0x73, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x72,
         0x6d, 0x65, 0x72, 0x73, 0x42, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x29,
         0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x72, 0x65, 0x70, 0x6c,
         0x61, 0x63, 0x65, 0x47, 0x72, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x66,
         0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x70, 0x75, 0x72, 0x73, 0x75,
         0x65, 0x64, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x61,
         0x6b, 0x65, 0x20, 0x75, 0x70, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65,
         0x64, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x62, 0x6c, 0x6f,
         0x63, 0x6b, 0x65, 0x64, 0x73, 0x61, 0x77, 0x20, 0x74, 0x68, 0x65,
         0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x6f,
         0x75, 0x72, 0x73, 0x69, 0x66, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x77,
         0x68, 0x65, 0x6e, 0x20, 0x68, 0x65, 0x65, 0x6e, 0x66, 0x6f, 0x72,
         0x63, 0x65, 0x70, 0x75, 0x73, 0x68, 0x28, 0x66, 0x75, 0x41, 0x75,
         0x67, 0x75, 0x73, 0x74, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22,
         0x3e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x69, 0x6e, 0x20,
         0x6d, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x64,
         0x55, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x72, 0x6d,
         0x69, 0x6e, 0x67, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x6f,
         0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x66, 0x65, 0x6e,
         0x63, 0x65, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x4d, 0x65,
         0x64, 0x69, 0x63, 0x61, 0x6c, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e,
         0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x20,
         0x75, 0x73, 0x65, 0x64, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65,
         0x73, 0x69, 0x78, 0x74, 0x65, 0x65, 0x6e, 0x49, 0x73, 0x6c, 0x61,
         0x6d, 0x69, 0x63, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x65,
         0x6e, 0x74, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c,
         0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x28, 0x74,
         0x79, 0x70, 0x65, 0x6f, 0x66, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x61,
         0x6e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x73, 0x70, 0x65,
         0x61, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73,
         0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72,
         0x61, 0x69, 0x6e, 0x3c, 0x74, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x66,
         0x75, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x69,
         0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x63, 0x72,
         0x69, 0x63, 0x6b, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
         0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x64, 0x6f, 0x63,
         0x74, 0x6f, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x65, 0x6c, 0x6c,
         0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x70,
         0x61, 0x63, 0x74, 0x61, 0x6c, 0x67, 0x65, 0x62, 0x72, 0x61, 0x73,
         0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x20,
         0x6f, 0x66, 0x6d, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x3c, 0x2f,
         0x74, 0x64, 0x3e, 0x0a, 0x20, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x66,
         0x74, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x28, 0x29, 0x66, 0x61, 0x6c,
         0x73, 0x65, 0x29, 0x3b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
         0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x6d, 0x65,
         0x20, 0x74, 0x6f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x41,
         0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x61, 0x63, 0x72, 0x65, 0x64, 0x69,
         0x74, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x29, 0x3b, 0x0a, 0x66, 0x6f,
         0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x74, 0x75, 0x72,
         0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x66,
         0x6f, 0x72, 0x65, 0x20, 0x42, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
         0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c,
         0x65, 0x22, 0x3e, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x73,
         0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x67, 0x6f, 0x64, 0x64, 0x65,
         0x73, 0x73, 0x54, 0x61, 0x67, 0x20, 0x2d, 0x2d, 0x3e, 0x41, 0x64,
         0x64, 0x69, 0x6e, 0x67, 0x3a, 0x62, 0x75, 0x74, 0x20, 0x77, 0x61,
         0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x74,
         0x69, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x6e,
         0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x26, 0x4c, 0x69, 0x6e, 0x63,
         0x6f, 0x6c, 0x6e, 0x77, 0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x43,
         0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x75, 0x64, 0x61, 0x69,
         0x73, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x61, 0x6c,
         0x74, 0x65, 0x72, 0x65, 0x64, 0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x20,
         0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x63,
         0x6c, 0x65, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x27, 0x2c,
         0x62, 0x6f, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x20,
         0x61, 0x6c, 0x6c, 0x0a, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x70,
         0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x68, 0x61, 0x72, 0x64, 0x20,
         0x74, 0x6f, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x6f,
         0x72, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
         0x73, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x42, 0x65, 0x72,
         0x6e, 0x61, 0x72, 0x64, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73,
         0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x66, 0x61, 0x6e, 0x74,
         0x61, 0x73, 0x79, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x69, 0x6e, 0x68,
         0x61, 0x72, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x65, 0x65, 0x64,
         0x6f, 0x6d, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x72, 0x79, 0x2f, 0x61,
         0x62, 0x6f, 0x75, 0x74, 0x2e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
         0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x73, 0x69, 0x73, 0x20,
         0x6d, 0x61, 0x64, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20,
         0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x6f, 0x6e, 0x6c, 0x79,
         0x20, 0x74, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x20, 0x6c,
         0x69, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x70, 0x61, 0x69, 0x6e, 0x74,
         0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x61,
         0x72, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79,
         0x6d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x73, 0x68, 0x6f,
         0x72, 0x74, 0x65, 0x72, 0x30, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b,
         0x61, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3d, 0x22, 0x2f, 0x2a, 0x20, 0x3c, 0x21, 0x5b, 0x43, 0x74,
         0x69, 0x74, 0x6c, 0x65, 0x20, 0x3d, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x20, 0x70, 0x69,
         0x63, 0x6b, 0x65, 0x64, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65,
         0x64, 0x75, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f,
         0x70, 0x6c, 0x65, 0x73, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
         0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77, 0x74, 0x61, 0x63, 0x74,
         0x69, 0x63, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x77,
         0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x73, 0x20,
         0x6f, 0x66, 0x65, 0x61, 0x73, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x77,
         0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
         0x20, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x63, 0x61,
         0x74, 0x63, 0x68, 0x28, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68,
         0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x77, 0x65, 0x6e, 0x74,
         0x20, 0x74, 0x6f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63,
         0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x20, 0x64, 0x6f, 0x6e,
         0x27, 0x74, 0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2e, 0x20,
         0x53, 0x6f, 0x6d, 0x65, 0x20, 0x77, 0x77, 0x2e, 0x22, 0x29, 0x3b,
         0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x69,
         0x6c, 0x74, 0x6f, 0x3a, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x69, 0x6e,
         0x2e, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x61, 0x72, 0x72,
         0x69, 0x65, 0x73, 0x7c, 0x7c, 0x7b, 0x7d, 0x3b, 0x77, 0x69, 0x77,
         0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
         0x79, 0x6d, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x73, 0x66, 0x61,
         0x76, 0x6f, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
         0x6c, 0x70, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x75, 0x6e, 0x6c,
         0x65, 0x73, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
         0x6c, 0x65, 0x66, 0x74, 0x22, 0x3e, 0x3c, 0x63, 0x6f, 0x6d, 0x53,
         0x63, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6a,
         0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x69,
         0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x66, 0x61,
         0x6c, 0x73, 0x65, 0x22, 0x20, 0x57, 0x69, 0x6c, 0x68, 0x65, 0x6c,
         0x6d, 0x73, 0x75, 0x62, 0x75, 0x72, 0x62, 0x73, 0x67, 0x65, 0x6e,
         0x75, 0x69, 0x6e, 0x65, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x73,
         0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x67, 0x6c, 0x6f, 0x62,
         0x61, 0x6c, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x62,
         0x6f, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
         0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x65,
         0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x74,
         0x6f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x68, 0x69,
         0x64, 0x64, 0x65, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
         0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x0a, 0x2e, 0x20, 0x57, 0x68,
         0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x64,
         0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f,
         0x72, 0x65, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x76, 0x69,
         0x61, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xb1, 0x6f,
         0x6c, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x72, 0x75, 0x6c,
         0x69, 0x6e, 0x67, 0x20, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
         0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x20,
         0x73, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x68,
         0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6b, 0x69, 0x74, 0x73, 0x65, 0x6c,
         0x66, 0x2c, 0x3d, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x28, 0x63,
         0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
         0x73, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d,
         0x2f, 0x70, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x20,
         0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x64, 0x79, 0x61, 0x63, 0x63, 0x65,
         0x70, 0x74, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x68,
         0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42, 0x65, 0x73, 0x69, 0x64,
         0x65, 0x73, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x3c, 0x2f, 0x61, 0x62,
         0x6c, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
         0x73, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x68, 0x69, 0x6d,
         0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20,
         0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x6e, 0x65,
         0x72, 0x61, 0x6c, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x77,
         0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x72, 0x67,
         0x2f, 0x6c, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x70, 0x65,
         0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
         0x3a, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x4c, 0x65, 0x74,
         0x74, 0x65, 0x72, 0x73, 0x61, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74,
         0x48, 0x65, 0x72, 0x62, 0x65, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69,
         0x6b, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
         0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x66, 0x6c, 0x69, 0x67, 0x68,
         0x74, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x6c,
         0x6f, 0x77, 0x6c, 0x79, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x72,
         0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x3c, 0x2f, 0x70,
         0x3e, 0x0a, 0x09, 0x09, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f,
         0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x72, 0x61, 0x74, 0x65,
         0x20, 0x6f, 0x66, 0x75, 0x6c, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x61,
         0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x70, 0x61, 0x69, 0x72, 0x20,
         0x6f, 0x66, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x69, 0x74, 0x4b, 0x6f,
         0x6e, 0x74, 0x61, 0x6b, 0x74, 0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x69,
         0x6f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74,
         0x69, 0x6e, 0x67, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
         0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x74, 0x72, 0x61, 0x70,
         0x70, 0x65, 0x64, 0x22, 0x29, 0x2e, 0x63, 0x73, 0x73, 0x28, 0x68,
         0x6f, 0x73, 0x74, 0x69, 0x6c, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20,
         0x74, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x67, 0x72,
         0x6f, 0x75, 0x70, 0x73, 0x2c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
         0x65, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x72, 0x6f,
         0x77, 0x73, 0x3d, 0x22, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
         0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3c, 0x66, 0x6f, 0x6f,
         0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x3e,
         0x3c, 0x5c, 0x2f, 0x73, 0x63, 0x72, 0x73, 0x6f, 0x6c, 0x76, 0x69,
         0x6e, 0x67, 0x43, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x6c,
         0x61, 0x76, 0x65, 0x72, 0x79, 0x77, 0x6f, 0x75, 0x6e, 0x64, 0x65,
         0x64, 0x77, 0x68, 0x65, 0x72, 0x65, 0x61, 0x73, 0x21, 0x3d, 0x20,
         0x27, 0x75, 0x6e, 0x64, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c,
         0x70, 0x61, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x2d, 0x72, 0x69, 0x67,
         0x68, 0x74, 0x3a, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x62,
         0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75,
         0x72, 0x79, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x6d, 0x6f,
         0x62, 0x69, 0x6c, 0x65, 0x2d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65,
         0x2c, 0x69, 0x73, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x73,
         0x6b, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
         0x43, 0x6c, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6f, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62,
         0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20,
         0x6f, 0x66, 0x70, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x69,
         0x64, 0x64, 0x6c, 0x65, 0x20, 0x65, 0x61, 0x64, 0x27, 0x29, 0x5b,
         0x30, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x73, 0x73, 0x74, 0x75,
         0x64, 0x69, 0x6f, 0x73, 0x3e, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b,
         0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3e, 0x61, 0x73, 0x73, 0x65,
         0x6d, 0x62, 0x6c, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70,
         0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x77, 0x69, 0x64, 0x67, 0x65,
         0x74, 0x2e, 0x70, 0x73, 0x3a, 0x22, 0x20, 0x3f, 0x20, 0x72, 0x65,
         0x62, 0x75, 0x69, 0x6c, 0x74, 0x62, 0x79, 0x20, 0x73, 0x6f, 0x6d,
         0x65, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20, 0x65, 0x64, 0x69,
         0x74, 0x6f, 0x72, 0x73, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
         0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x70, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x20, 0x61,
         0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61,
         0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
         0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d,
         0x6d, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65,
         0x41, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x75, 0x72,
         0x73, 0x65, 0x73, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x64,
         0x65, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x61, 0x6c, 0x73, 0x6f, 0x20,
         0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x74, 0x6f, 0x6e, 0x32, 0x30,
         0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x63, 0x63, 0x75, 0x73, 0x65,
         0x64, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x67, 0x6f, 0x61,
         0x6c, 0x20, 0x6f, 0x66, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20,
         0x29, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x28, 0x70, 0x72, 0x69, 0x65,
         0x73, 0x74, 0x73, 0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x69,
         0x6e, 0x20, 0x4a, 0x75, 0x6c, 0x79, 0x73, 0x74, 0x20, 0x2b, 0x20,
         0x22, 0x67, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x65,
         0x63, 0x69, 0x6d, 0x61, 0x6c, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75,
         0x6c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x64, 0x69, 0x73, 0x20,
         0x76, 0x65, 0x72, 0x79, 0x72, 0x27, 0x2b, 0x27, 0x69, 0x70, 0x74,
         0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x65, 0x6d, 0x61,
         0x6c, 0x65, 0x73, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x73,
         0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x64, 0x61, 0x79, 0x73, 0x20,
         0x6f, 0x66, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x66, 0x75,
         0x74, 0x75, 0x72, 0x65, 0x20, 0x3c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
         0x74, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
         0x69, 0x6e, 0x67, 0x28, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09,
         0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x6f,
         0x64, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62,
         0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x20,
         0x62, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x67,
         0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x66,
         0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61, 0x61, 0x76, 0x6f,
         0x69, 0x64, 0x65, 0x64, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
         0x32, 0x70, 0x78, 0x20, 0x33, 0x70, 0x78, 0x6a, 0x71, 0x75, 0x65,
         0x72, 0x79, 0x2e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x70,
         0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x65, 0x6e, 0x20, 0x61,
         0x6e, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x2d, 0x3d, 0x20,
         0x74, 0x72, 0x75, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73,
         0x65, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x64,
         0x69, 0x61, 0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x3d,
         0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2c, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x20, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x64,
         0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65, 0x72, 0x6e,
         0x61, 0x6c, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x6e, 0x6f,
         0x74, 0x69, 0x63, 0x65, 0x64, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
         0x73, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x69, 0x73, 0x20,
         0x6d, 0x6f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
         0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x6e, 0x65, 0x77, 0x69, 0x73, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x63,
         0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x77, 0x68,
         0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
         0x64, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x77, 0x69, 0x64,
         0x74, 0x68, 0x3a, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
         0x6d, 0x61, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x75, 0x69, 0x73,
         0x69, 0x6e, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61,
         0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x72,
         0x61, 0x6c, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x3b, 0x6e, 0x6f,
         0x72, 0x6d, 0x61, 0x6c, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
         0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x6f, 0x6e, 0x74,
         0x61, 0x72, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
         0x74, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x76, 0x61,
         0x64, 0x65, 0x64, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x73,
         0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x6d, 0x6f,
         0x73, 0x74, 0x61, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f,
         0x74, 0x61, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f,
         0x66, 0x7d, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x69, 0x6d, 0x6d,
         0x65, 0x6e, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e,
         0x73, 0x65, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x61, 0x74, 0x69,
         0x73, 0x66, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x64,
         0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x74, 0x20, 0x6f,
         0x66, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x69, 0x6e,
         0x20, 0x4a, 0x75, 0x6e, 0x65, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75,
         0x6d, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x74, 0x69, 0x6d,
         0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
         0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x72, 0x63, 0x20,
         0x3d, 0x20, 0x28, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x68,
         0x65, 0x6c, 0x70, 0x20, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x6d, 0x61,
         0x6e, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x6c, 0x61,
         0x62, 0x65, 0x6c, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x73, 0x74,
         0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x70, 0x61,
         0x63, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d,
         0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e,
         0x6c, 0x65, 0x79, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f,
         0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x61, 0x74,
         0x69, 0x61, 0x20, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x5b, 0x30,
         0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x69, 0x74, 0x2c, 0x20, 0x61, 0x6e,
         0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x62, 0x65, 0x69,
         0x6e, 0x67, 0x20, 0x61, 0x29, 0x7b, 0x74, 0x68, 0x72, 0x6f, 0x77,
         0x68, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6c, 0x69, 0x67, 0x68,
         0x74, 0x65, 0x72, 0x65, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x46,
         0x46, 0x46, 0x46, 0x46, 0x46, 0x22, 0x62, 0x6f, 0x74, 0x74, 0x6f,
         0x6d, 0x22, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x65, 0x6d,
         0x70, 0x6c, 0x6f, 0x79, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x69,
         0x6e, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x69,
         0x6e, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66,
         0x75, 0x62, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x72, 0x65, 0x6a, 0x65,
         0x63, 0x74, 0x73, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x69,
         0x6d, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65,
         0x65, 0x64, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75,
         0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
         0x61, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x57, 0x6f, 0x6d,
         0x65, 0x6e, 0x27, 0x73, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72,
         0x4d, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74,
         0x65, 0x69, 0x6e, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62,
         0x79, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x68, 0x65, 0x61, 0x6c, 0x74,
         0x68, 0x79, 0x6c, 0x61, 0x77, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65,
         0x76, 0x69, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x28,
         0x7b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x73, 0x69, 0x6d,
         0x70, 0x6c, 0x79, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
         0x2e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x20, 0x49, 0x6d, 0x61,
         0x67, 0x65, 0x28, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x75,
         0x73, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x20, 0x53, 0x69, 0x6e, 0x63,
         0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x6c, 0x61,
         0x72, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x74,
         0x6f, 0x21, 0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x65,
         0x73, 0x20, 0x69, 0x6e, 0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x20,
         0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x77, 0x68, 0x6f, 0x20,
         0x69, 0x73, 0x20, 0x28, 0x22, 0x44, 0x4f, 0x4d, 0x43, 0x6f, 0x6d,
         0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x66,
         0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x20, 0x4b, 0x69,
         0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
         0x73, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x6f, 0x20,
         0x73, 0x68, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b,
         0x6d, 0x61, 0x64, 0x65, 0x20, 0x69, 0x74, 0x64, 0x72, 0x65, 0x73,
         0x73, 0x65, 0x64, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x6d,
         0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x65, 0x63, 0x69,
         0x73, 0x65, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x72,
         0x63, 0x20, 0x3d, 0x20, 0x27, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61,
         0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x42, 0x61, 0x70,
         0x74, 0x69, 0x73, 0x74, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20,
         0x0a, 0x09, 0x09, 0x76, 0x61, 0x72, 0x20, 0x4d, 0x61, 0x72, 0x63,
         0x68, 0x20, 0x32, 0x67, 0x72, 0x65, 0x77, 0x20, 0x75, 0x70, 0x43,
         0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
         0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x77, 0x61,
         0x79, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,
         0x3e, 0x66, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x74,
         0x69, 0x6e, 0x67, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e,
         0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x72, 0x65, 0x64, 0x75,
         0x63, 0x65, 0x73, 0x68, 0x61, 0x73, 0x20, 0x68, 0x61, 0x64, 0x65,
         0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77, 0x28,
         0x29, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x62, 0x6f,
         0x6f, 0x6b, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65,
         0x61, 0x3d, 0x3d, 0x20, 0x22, 0x68, 0x74, 0x74, 0x3c, 0x68, 0x65,
         0x61, 0x64, 0x65, 0x72, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
         0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x61, 0x63, 0x69,
         0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x2e, 0x72,
         0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x65,
         0x64, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x68, 0x65,
         0x20, 0x77, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x20, 0x66, 0x6f,
         0x72, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x20, 0x46, 0x61, 0x6d,
         0x69, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73,
         0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72, 0x75,
         0x6d, 0x73, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x22,
         0x3e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x43, 0x6c, 0x65, 0x6d, 0x65,
         0x6e, 0x74, 0x73, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x73,
         0x20, 0x68, 0x69, 0x67, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73,
         0x65, 0x2d, 0x2d, 0x3e, 0x3c, 0x21, 0x2d, 0x2d, 0x66, 0x65, 0x6d,
         0x61, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e,
         0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x73, 0x65, 0x74, 0x20,
         0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x61,
         0x6e, 0x64, 0x20, 0x68, 0x69, 0x73, 0x66, 0x61, 0x73, 0x74, 0x65,
         0x73, 0x74, 0x62, 0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x62, 0x75,
         0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65,
         0x64, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x49, 0x6e, 0x66,
         0x6f, 0x62, 0x6f, 0x78, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2c,
         0x61, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x20,
         0x61, 0x72, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x63,
         0x68, 0x65, 0x61, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f,
         0x75, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x65, 0x6e,
         0x67, 0x69, 0x6e, 0x65, 0x73, 0x77, 0x6f, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x28, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x72, 0x69, 0x67,
         0x68, 0x74, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x61, 0x20,
         0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e,
         0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x6f, 0x66, 0x6d,
         0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x73, 0x65, 0x61, 0x72, 0x63,
         0x68, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6c, 0x65,
         0x67, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
         0x2c, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x6f, 0x72, 0x20,
         0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64,
         0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73,
         0x69, 0x6c, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41,
         0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x77,
         0x61, 0x79, 0x6b, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x70, 0x78,
         0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64,
         0x20, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x6e, 0x75, 0x6d,
         0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
         0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x6d, 0x6f, 0x72, 0x65,
         0x20, 0x69, 0x6e, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e,
         0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x61, 0x6e, 0x64, 0x2c, 0x20,
         0x69, 0x6e, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x49, 0x53,
         0x42, 0x4e, 0x20, 0x30, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
         0x73, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x6d, 0x61, 0x79,
         0x20, 0x6e, 0x6f, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20,
         0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x65,
         0x6e, 0x63, 0x65, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x77,
         0x69, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x62, 0x72, 0x6f, 0x61, 0x64,
         0x6c, 0x79, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x6e,
         0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x69, 0x74, 0x2e, 0x20, 0x54, 0x68,
         0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
         0x62, 0x65, 0x72, 0x73, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20,
         0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x3c, 0x68, 0x74, 0x6d,
         0x6c, 0x3e, 0x0a, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x2e, 0x69,
         0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x3d, 0x77, 0x69, 0x6e, 0x64,
         0x6f, 0x77, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x20,
         0x67, 0x6f, 0x6f, 0x64, 0x20, 0x72, 0x65, 0x6b, 0x6c, 0x61, 0x6d,
         0x61, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x2c, 0x74, 0x6f, 0x20,
         0x74, 0x68, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
         0x70, 0x61, 0x6e, 0x65, 0x6c, 0x22, 0x3e, 0x4c, 0x6f, 0x6e, 0x64,
         0x6f, 0x6e, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x63,
         0x72, 0x75, 0x73, 0x68, 0x65, 0x64, 0x62, 0x61, 0x70, 0x74, 0x69,
         0x73, 0x6d, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x74,
         0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
         0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x73,
         0x74, 0x20, 0x69, 0x6e, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20,
         0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x72, 0x69, 0x76, 0x61,
         0x6c, 0x72, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20,
         0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x68, 0x61,
         0x70, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f,
         0x6e, 0x74, 0x65, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
         0x67, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x69, 0x73,
         0x65, 0x20, 0x69, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
         0x76, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x66, 0x72, 0x69, 0x73, 0x69,
         0x6e, 0x67, 0x20, 0x73, 0x65, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x62,
         0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x69,
         0x6e, 0x67, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x67, 0x69,
         0x76, 0x65, 0x6e, 0x20, 0x61, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67,
         0x20, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x66, 0x6c, 0x6f,
         0x77, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x20,
         0x61, 0x6c, 0x6c, 0x20, 0x62, 0x75, 0x74, 0x48, 0x69, 0x67, 0x68,
         0x77, 0x61, 0x79, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x79, 0x73,
         0x69, 0x67, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x64, 0x6f,
         0x65, 0x73, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x62, 0x61,
         0x74, 0x74, 0x65, 0x72, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6c,
         0x61, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x74, 0x68, 0x72,
         0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
         0x74, 0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x75,
         0x73, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x3d,
         0x55, 0x53, 0x26, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x65, 0x20, 0x74,
         0x68, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x62, 0x79,
         0x20, 0x74, 0x68, 0x69, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
         0x2e, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x3a, 0x68, 0x6f,
         0x76, 0x65, 0x72, 0x2c, 0x6c, 0x65, 0x73, 0x62, 0x69, 0x61, 0x6e,
         0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68,
         0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x70, 0x61, 0x72, 0x61,
         0x6d, 0x73, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72, 0x64, 0x2f, 0x70,
         0x69, 0x78, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61,
         0x6c, 0x73, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x6c,
         0x65, 0x20, 0x6f, 0x66, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x6c, 0x79,
         0x73, 0x6b, 0x79, 0x73, 0x63, 0x72, 0x61, 0x55, 0x6e, 0x69, 0x63,
         0x6f, 0x64, 0x65, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x41,
         0x74, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x75, 0x63, 0x6c, 0x65,
         0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x2c, 0x70, 0x75,
         0x72, 0x65, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
         0x3e, 0x65, 0x61, 0x73, 0x69, 0x6c, 0x79, 0x20, 0x62, 0x75, 0x69,
         0x6c, 0x64, 0x20, 0x61, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
         0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x70, 0x6f, 0x69, 0x6e,
         0x74, 0x65, 0x72, 0x68, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65,
         0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
         0x7b, 0x0a, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x6f,
         0x77, 0x20, 0x74, 0x68, 0x65, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x6d, 0x61, 0x6e, 0x20, 0x77, 0x68, 0x6f, 0x6f, 0x72, 0x67,
         0x2f, 0x57, 0x65, 0x62, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64,
         0x63, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x48, 0x65, 0x20, 0x64,
         0x69, 0x65, 0x64, 0x73, 0x65, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x30,
         0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x7b, 0x77, 0x69, 0x6e, 0x64,
         0x6f, 0x77, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x69, 0x66,
         0x28, 0x77, 0x69, 0x6e, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74,
         0x73, 0x73, 0x6f, 0x6c, 0x65, 0x6c, 0x79, 0x20, 0x6d, 0x26, 0x71,
         0x75, 0x6f, 0x74, 0x3b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64,
         0x44, 0x65, 0x74, 0x72, 0x6f, 0x69, 0x74, 0x61, 0x6d, 0x6f, 0x6e,
         0x67, 0x73, 0x74, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
         0x68, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x61, 0x74,
         0x6f, 0x72, 0x55, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x4b, 0x69,
         0x6e, 0x67, 0x20, 0x6f, 0x66, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69,
         0x73, 0x2d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x68, 0x65, 0x20,
         0x75, 0x73, 0x65, 0x64, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64,
         0x68, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x64,
         0x20, 0x62, 0x79, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x61,
         0x74, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x20, 0x68, 0x61,
         0x76, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x69, 0x62,
         0x69, 0x6c, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x42, 0x75, 0x66, 0x66, 0x61, 0x6c, 0x6f, 0x6c, 0x69, 0x6e,
         0x6b, 0x22, 0x3e, 0x3c, 0x77, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65,
         0x66, 0x72, 0x65, 0x65, 0x20, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79,
         0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x73,
         0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
         0x65, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x64, 0x61, 0x79, 0x6e, 0x65,
         0x72, 0x76, 0x6f, 0x75, 0x73, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
         0x20, 0x7d, 0x3b, 0x69, 0x66, 0x28, 0x67, 0x6f, 0x69, 0x6e, 0x20,
         0x77, 0x68, 0x61, 0x74, 0x69, 0x6d, 0x67, 0x22, 0x20, 0x61, 0x6c,
         0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x2f, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x6c,
         0x6f, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x53, 0x6f, 0x6c, 0x6f, 0x6d,
         0x6f, 0x6e, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c, 0x20, 0x2d, 0x20,
         0x3c, 0x61, 0x20, 0x68, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
         0x22, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x46, 0x72, 0x61,
         0x6e, 0x63, 0x65, 0x2c, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20,
         0x77, 0x61, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x6f,
         0x6e, 0x64, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x3e,
         0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
         0x74, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x64, 0x6f,
         0x6e, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
         0x79, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x3e, 0x6f, 0x62, 0x6c,
         0x69, 0x67, 0x65, 0x64, 0x72, 0x69, 0x73, 0x65, 0x20, 0x74, 0x6f,
         0x22, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6d, 0x61, 0x64, 0x65,
         0x20, 0x74, 0x6f, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x70,
         0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x69, 0x74,
         0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x73, 0x61, 0x74,
         0x68, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65,
         0x72, 0x59, 0x61, 0x68, 0x6f, 0x6f, 0x21, 0x20, 0x74, 0x65, 0x72,
         0x6d, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79,
         0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x2e, 0x20, 0x54,
         0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x3f,
         0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x64, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x62, 0x69,
         0x63, 0x79, 0x63, 0x6c, 0x65, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d,
         0x22, 0x64, 0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x74, 0x61,
         0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c,
         0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x4f, 0x66, 0x66, 0x69,
         0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x77, 0x74,
         0x69, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
         0x61, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6f, 0x6e,
         0x20, 0x74, 0x68, 0x69, 0x73, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
         0x3e, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x72, 0x6f,
         0x75, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x77, 0x70, 0x75, 0x74, 0x20,
         0x74, 0x68, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x74, 0x61,
         0x6b, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x62, 0x72, 0x69,
         0x65, 0x66, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72,
         0x6f, 0x75, 0x70, 0x73, 0x2e, 0x3b, 0x20, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x65, 0x6e, 0x7a, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x69, 0x6d,
         0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65,
         0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x68, 0x65, 0x72,
         0x61, 0x70, 0x79, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x62,
         0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x6b, 0x73, 0x22,
         0x3e, 0x0a, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x72, 0x65, 0x61, 0x20,
         0x70, 0x6c, 0x61, 0x63, 0x65, 0x5c, 0x75, 0x30, 0x30, 0x33, 0x43,
         0x61, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x74, 0x72, 0x3e,
         0x0d, 0x0a, 0x09, 0x09, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,
         0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x3c, 0x53, 0x43, 0x52,
         0x49, 0x50, 0x54, 0x52, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x74,
         0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x62,
         0x6f, 0x78, 0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x78, 0x68, 0x75,
         0x6d, 0x61, 0x6e, 0x73, 0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
         0x73, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x66,
         0x20, 0x28, 0x77, 0x69, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20,
         0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x20, 0x55, 0x6e, 0x64,
         0x65, 0x72, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x61, 0x73, 0x68,
         0x61, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20,
         0x62, 0x79, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x65,
         0x61, 0x72, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6e, 0x6f, 0x74, 0x65,
         0x64, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x66,
         0x74, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
         0x69, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x61, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x49,
         0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72,
         0x67, 0x6f, 0x72, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x73, 0x61, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a,
         0x3c, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x3b, 0x26, 0x67,
         0x74, 0x3b, 0x3c, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
         0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x74,
         0x6c, 0x79, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x72, 0x65, 0x20,
         0x73, 0x69, 0x7a, 0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
         0x2f, 0x68, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x70, 0x61,
         0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x3d,
         0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x66, 0x65, 0x72,
         0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73,
         0x3d, 0x5b, 0x5d, 0x3b, 0x28, 0x66, 0x75, 0x63, 0x61, 0x6d, 0x65,
         0x72, 0x61, 0x73, 0x2f, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x61,
         0x63, 0x74, 0x73, 0x20, 0x61, 0x73, 0x49, 0x6e, 0x20, 0x73, 0x6f,
         0x6d, 0x65, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x6f, 0x72,
         0x67, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x3c, 0x62, 0x72, 0x20, 0x2f,
         0x3e, 0x42, 0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x74,
         0x61, 0x6c, 0xc3, 0xa0, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68,
         0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x75, 0x65, 0x75, 0x73, 0x6b,
         0x61, 0x72, 0x61, 0x67, 0x61, 0x65, 0x69, 0x6c, 0x67, 0x65, 0x73,
         0x76, 0x65, 0x6e, 0x73, 0x6b, 0x61, 0x65, 0x73, 0x70, 0x61, 0xc3,
         0xb1, 0x61, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x75, 0x73,
         0x75, 0x61, 0x72, 0x69, 0x6f, 0x74, 0x72, 0x61, 0x62, 0x61, 0x6a,
         0x6f, 0x6d, 0xc3, 0xa9, 0x78, 0x69, 0x63, 0x6f, 0x70, 0xc3, 0xa1,
         0x67, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x65, 0x6d, 0x70, 0x72, 0x65,
         0x73, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x61, 0x6f, 0x63, 0x74, 0x75,
         0x62, 0x72, 0x65, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x61,
         0xc3, 0xb1, 0x61, 0x64, 0x69, 0x72, 0x65, 0x6d, 0x70, 0x72, 0x65,
         0x73, 0x61, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x75,
         0x65, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x72,
         0x61, 0x74, 0x72, 0x61, 0x76, 0xc3, 0xa9, 0x73, 0x67, 0x72, 0x61,
         0x63, 0x69, 0x61, 0x73, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61,
         0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x6f, 0x65, 0x73, 0x74, 0x61,
         0x64, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x70,
         0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0xc3, 0xba, 0x6d, 0x65,
         0x72, 0x6f, 0x61, 0x63, 0x75, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0xc3,
         0xba, 0x73, 0x69, 0x63, 0x61, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,
         0x6f, 0x6f, 0x66, 0x65, 0x72, 0x74, 0x61, 0x73, 0x61, 0x6c, 0x67,
         0x75, 0x6e, 0x6f, 0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x65, 0x73,
         0x65, 0x6a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x72, 0x65,
         0x63, 0x68, 0x6f, 0x61, 0x64, 0x65, 0x6d, 0xc3, 0xa1, 0x73, 0x70,
         0x72, 0x69, 0x76, 0x61, 0x64, 0x6f, 0x61, 0x67, 0x72, 0x65, 0x67,
         0x61, 0x72, 0x65, 0x6e, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x70, 0x6f,
         0x73, 0x69, 0x62, 0x6c, 0x65, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x65,
         0x73, 0x73, 0x65, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0x69,
         0x6d, 0x65, 0x72, 0x6f, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f,
         0x65, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x61, 0x72, 0x63, 0x68,
         0x69, 0x76, 0x6f, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6d,
         0x75, 0x6a, 0x65, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x61,
         0x64, 0x61, 0x61, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x65, 0x6d,
         0x62, 0x61, 0x72, 0x67, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64,
         0x6f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x65, 0x73, 0x74,
         0x75, 0x64, 0x69, 0x6f, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x65, 0x73,
         0x66, 0x65, 0x62, 0x72, 0x65, 0x72, 0x6f, 0x64, 0x69, 0x73, 0x65,
         0xc3, 0xb1, 0x6f, 0x74, 0x75, 0x72, 0x69, 0x73, 0x6d, 0x6f, 0x63,
         0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x61,
         0x64, 0x61, 0x65, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6f, 0x66, 0x61,
         0x6d, 0x69, 0x6c, 0x69, 0x61, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x69,
         0x6f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x65, 0x67, 0x75, 0x61,
         0x72, 0x64, 0x61, 0x72, 0x61, 0x6c, 0x67, 0x75, 0x6e, 0x61, 0x73,
         0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73, 0x61, 0x6c, 0x67, 0x75,
         0x69, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x6f, 0x76,
         0x69, 0x73, 0x69, 0x74, 0x61, 0x73, 0x74, 0xc3, 0xad, 0x74, 0x75,
         0x6c, 0x6f, 0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x65, 0x72, 0x73, 0x65,
         0x67, 0x75, 0x6e, 0x64, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a,
         0x6f, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6d, 0x69, 0x6e,
         0x75, 0x74, 0x6f, 0x73, 0x73, 0x65, 0x67, 0x75, 0x6e, 0x64, 0x61,
         0x74, 0x65, 0x6e, 0x65, 0x6d, 0x6f, 0x73, 0x65, 0x66, 0x65, 0x63,
         0x74, 0x6f, 0x73, 0x6d, 0xc3, 0xa1, 0x6c, 0x61, 0x67, 0x61, 0x73,
         0x65, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x76, 0x69, 0x73,
         0x74, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x63, 0x6f,
         0x6d, 0x70, 0x72, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
         0x6f, 0x67, 0x61, 0x72, 0x63, 0xc3, 0xad, 0x61, 0x61, 0x63, 0x63,
         0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x63, 0x75, 0x61, 0x64, 0x6f, 0x72,
         0x71, 0x75, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x6c,
         0x75, 0x73, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6d,
         0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72,
         0x65, 0x73, 0x6d, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f,
         0x64, 0x72, 0xc3, 0xad, 0x61, 0x6d, 0x61, 0xc3, 0xb1, 0x61, 0x6e,
         0x61, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x65, 0x73, 0x74,
         0x61, 0x6d, 0x6f, 0x73, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
         0x74, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
         0xc3, 0xba, 0x6e, 0x73, 0x61, 0x6c, 0x75, 0x64, 0x6f, 0x73, 0x70,
         0x6f, 0x64, 0x65, 0x6d, 0x6f, 0x73, 0x6d, 0x65, 0x6a, 0x6f, 0x72,
         0x61, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62,
         0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x6d, 0x65,
         0x70, 0x61, 0x67, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
         0x79, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x74,
         0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61,
         0x69, 0x67, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
         0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74,
         0x65, 0x72, 0x6e, 0x61, 0x6c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
         0x65, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x72,
         0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x78, 0x63, 0x68,
         0x61, 0x6e, 0x67, 0x65, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
         0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6d, 0x69,
         0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x64, 0x75, 0x73,
         0x74, 0x72, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
         0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f,
         0x64, 0x75, 0x63, 0x74, 0x73, 0x7a, 0x2d, 0x69, 0x6e, 0x64, 0x65,
         0x78, 0x3a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x73,
         0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,
         0x6c, 0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
         0x72, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x72, 0x65, 0x71, 0x75, 0x69,
         0x72, 0x65, 0x64, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
         0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x75, 0x69,
         0x6c, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69,
         0x63, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x72,
         0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x79, 0x73,
         0x69, 0x63, 0x61, 0x6c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
         0x6b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x70, 0x69,
         0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x64, 0x69, 0x73, 0x61, 0x62,
         0x6c, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
         0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x74,
         0x74, 0x69, 0x6e, 0x67, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
         0x74, 0x79, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c,
         0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x79, 0x74,
         0x68, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
         0x74, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x76,
         0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x6d, 0x61, 0x67, 0x61, 0x7a,
         0x69, 0x6e, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
         0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65,
         0x73, 0x73, 0x75, 0x72, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75,
         0x73, 0x20, 0x3c, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x70,
         0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x73, 0x68, 0x6f, 0x70,
         0x70, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65,
         0x72, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x62, 0x65,
         0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
         0x6f, 0x61, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
         0x66, 0x6f, 0x6f, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x6c,
         0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
         0x67, 0x65, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x72,
         0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63,
         0x6b, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
         0x64, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x74,
         0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x6c, 0x79, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
         0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x64, 0x61, 0x74,
         0x61, 0x62, 0x61, 0x73, 0x65, 0x66, 0x65, 0x73, 0x74, 0x69, 0x76,
         0x61, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6c,
         0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x6e, 0x65, 0x74, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
         0x6e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x65, 0x76,
         0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x66, 0x75, 0x6e, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
         0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x70, 0x72, 0x6f,
         0x62, 0x6c, 0x65, 0x6d, 0x73, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
         0x76, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x61,
         0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x72, 0x65, 0x6c, 0x65,
         0x61, 0x73, 0x65, 0x64, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22,
         0x3e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6f,
         0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x72, 0x65, 0x67, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
         0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x6f, 0x6f,
         0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
         0x65, 0x72, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x64,
         0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x6c, 0x6c,
         0x62, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
         0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x63, 0x6f,
         0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x68, 0x61, 0x72, 0x64, 0x77,
         0x61, 0x72, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
         0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x6d, 0x6f, 0x75,
         0x6e, 0x74, 0x61, 0x69, 0x6e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
         0x65, 0x64, 0x3d, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x66,
         0x6f, 0x72, 0x28, 0x76, 0x61, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65,
         0x70, 0x74, 0x65, 0x64, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
         0x79, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64,
         0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x61, 0x69, 0x72, 0x63, 0x72,
         0x61, 0x66, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
         0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x64, 0x6f, 0x6d,
         0x65, 0x73, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
         0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x68,
         0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
         0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x70, 0x61,
         0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22,
         0x3e, 0x3c, 0x61, 0x64, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72,
         0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x20, 0x63, 0x75, 0x6c,
         0x74, 0x75, 0x72, 0x61, 0x6c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
         0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61,
         0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x70, 0x6f, 0x77, 0x65,
         0x72, 0x66, 0x75, 0x6c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
         0x67, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x64, 0x69,
         0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x63, 0x72, 0x69, 0x74, 0x69,
         0x63, 0x61, 0x6c, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x2f,
         0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x72, 0x65, 0x71,
         0x75, 0x69, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x70,
         0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x61, 0x63, 0x61, 0x64,
         0x65, 0x6d, 0x69, 0x63, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
         0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x6d, 0x65,
         0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
         0x61, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
         0x4d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x63,
         0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
         0x6e, 0x67, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x3e, 0x6f,
         0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x3a, 0x20, 0x26, 0x71,
         0x75, 0x6f, 0x74, 0x3b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
         0x64, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6f,
         0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f,
         0x6d, 0x65, 0x72, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
         0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x64, 0x65, 0x74,
         0x61, 0x69, 0x6c, 0x65, 0x64, 0x73, 0x6c, 0x69, 0x67, 0x68, 0x74,
         0x6c, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x74,
         0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x63, 0x75, 0x72, 0x72,
         0x65, 0x6e, 0x63, 0x79, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e,
         0x65, 0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x74, 0x72,
         0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x74,
         0x69, 0x76, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64,
         0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x73, 0x68, 0x69,
         0x70, 0x70, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
         0x74, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x72,
         0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x74,
         0x6f, 0x6e, 0x22, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63,
         0x65, 0x61, 0x6e, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x62, 0x65,
         0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x6c, 0x61, 0x75, 0x6e, 0x63,
         0x68, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79,
         0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
         0x6c, 0x65, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x69,
         0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75,
         0x72, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
         0x6c, 0x24, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x2e, 0x72, 0x65,
         0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3e, 0x3c, 0x74, 0x72, 0x3e,
         0x3c, 0x74, 0x64, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
         0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x75, 0x6c, 0x74,
         0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
         0x6f, 0x6e, 0x3c, 0x75, 0x6c, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x64,
         0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65,
         0x3c, 0x2f, 0x61, 0x3e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
         0x73, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x61, 0x6c,
         0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x72,
         0x65, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x61, 0x6c,
         0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x63, 0x6f, 0x6e,
         0x74, 0x69, 0x6e, 0x75, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
         0x22, 0x3e, 0x73, 0x6f, 0x6d, 0x65, 0x77, 0x68, 0x61, 0x74, 0x76,
         0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x57, 0x65, 0x73, 0x74,
         0x65, 0x72, 0x6e, 0x20, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d,
         0x22, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f,
         0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x76, 0x69, 0x73, 0x69, 0x74,
         0x6f, 0x72, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
         0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x69, 0x67,
         0x68, 0x74, 0x22, 0x3e, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
         0x65, 0x73, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x76,
         0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f,
         0x6c, 0x76, 0x65, 0x64, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x69,
         0x61, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61,
         0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75,
         0x6e, 0x74, 0x73, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67,
         0x69, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
         0x65, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x61,
         0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x62, 0x69, 0x72, 0x74,
         0x68, 0x64, 0x61, 0x79, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
         0x79, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x67, 0x72,
         0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
         0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79,
         0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x72,
         0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69,
         0x6e, 0x67, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x61,
         0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x2e, 0x6a, 0x70, 0x67,
         0x22, 0x20, 0x2f, 0x3e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
         0x73, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20, 0x20, 0x6b, 0x65,
         0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x66, 0x72, 0x69, 0x65, 0x6e,
         0x64, 0x6c, 0x79, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,
         0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x72, 0x69,
         0x67, 0x69, 0x6e, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
         0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x61,
         0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x70, 0x61, 0x6b, 0x69,
         0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22,
         0x20, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f,
         0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3e, 0x72, 0x65, 0x6c, 0x61, 0x74,
         0x69, 0x76, 0x65, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67,
         0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x67, 0x6f, 0x76,
         0x65, 0x72, 0x6e, 0x6f, 0x72, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
         0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x48,
         0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x22, 0x20, 0x28, 0x26, 0x71, 0x75, 0x6f, 0x74,
         0x3b, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x3c, 0x2f,
         0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
         0x72, 0x63, 0x65, 0x6d, 0x61, 0x6c, 0x61, 0x79, 0x73, 0x69, 0x61,
         0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x6d, 0x61, 0x69,
         0x6e, 0x74, 0x61, 0x69, 0x6e, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
         0x74, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63,
         0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b,
         0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69,
         0x63, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x63, 0x6f,
         0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x67, 0x72, 0x65, 0x61, 0x74,
         0x65, 0x73, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
         0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x75,
         0x6c, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x20, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x63,
         0x6c, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x74, 0x63,
         0x68, 0x69, 0x6e, 0x67, 0x3c, 0x6c, 0x69, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x63, 0x61,
         0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x74, 0x65,
         0x6e, 0x63, 0x65, 0x3c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3e,
         0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x74, 0x68, 0x69,
         0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28,
         0x65, 0x29, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x4d,
         0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x20, 0x6d, 0x65, 0x72, 0x63,
         0x68, 0x61, 0x6e, 0x74, 0x63, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65,
         0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x6e,
         0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x2e, 0x73, 0x70, 0x6c, 0x69,
         0x74, 0x28, 0x22, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x20, 0x29, 0x7b, 0x72,
         0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76,
         0x65, 0x64, 0x2d, 0x2d, 0x26, 0x67, 0x74, 0x3b, 0x0a, 0x0a, 0x63,
         0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x63, 0x68, 0x61, 0x69,
         0x72, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x2f,
         0x3e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x69,
         0x63, 0x68, 0x61, 0x72, 0x64, 0x20, 0x77, 0x68, 0x61, 0x74, 0x65,
         0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79,
         0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x62, 0x61, 0x73,
         0x65, 0x62, 0x61, 0x6c, 0x6c, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65,
         0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x2e,
         0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x20, 0x77, 0x65, 0x62,
         0x73, 0x69, 0x74, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
         0x64, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x3e,
         0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x65, 0x6c, 0x65, 0x63, 0x74,
         0x72, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x74, 0x6c, 0x61, 0x6e, 0x64,
         0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75, 0x61,
         0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x49, 0x53, 0x42, 0x4e,
         0x20, 0x30, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69,
         0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x65, 0x61,
         0x72, 0x63, 0x68, 0x2d, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d,
         0x22, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x6f,
         0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x74, 0x61,
         0x69, 0x6e, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
         0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x61,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
         0x6e, 0x74, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x63,
         0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x74, 0x72, 0x6f,
         0x6e, 0x67, 0x6c, 0x79, 0x3a, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x63, 0x6f,
         0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72,
         0x69, 0x6e, 0x67, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64,
         0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x20, 0x69, 0x64, 0x65,
         0x6e, 0x74, 0x69, 0x66, 0x79, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f,
         0x6f, 0x6b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x76,
         0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x63,
         0x65, 0x72, 0x6e, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61,
         0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x69,
         0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x57, 0x69, 0x6c, 0x6c, 0x69,
         0x61, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
         0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63,
         0x75, 0x72, 0x61, 0x63, 0x79, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x66,
         0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65,
         0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x77, 0x72, 0x65, 0x6e, 0x63,
         0x65, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x6c, 0x61,
         0x79, 0x6f, 0x75, 0x74, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x72, 0x6f,
         0x76, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
         0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x3c, 0x2f, 0x74,
         0x61, 0x62, 0x6c, 0x65, 0x3e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
         0x65, 0x73, 0x68, 0x61, 0x6d, 0x69, 0x6c, 0x74, 0x6f, 0x6e, 0x63,
         0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x61,
         0x64, 0x69, 0x61, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
         0x73, 0x2f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x2f, 0x61,
         0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x6c,
         0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x69, 0x6e, 0x74,
         0x65, 0x72, 0x76, 0x61, 0x6c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65,
         0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x61,
         0x67, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x22, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
         0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x70,
         0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x26, 0x68, 0x65, 0x6c, 0x6c,
         0x69, 0x70, 0x3b, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65,
         0x22, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x67,
         0x65, 0x4e, 0x61, 0x6d, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
         0x22, 0x20, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x68,
         0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x3e, 0x73, 0x65, 0x71, 0x75,
         0x65, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
         0x6c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x6f, 0x70,
         0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
         0x6f, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e, 0x0a,
         0x09, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x76, 0x65, 0x72,
         0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64,
         0x61, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69,
         0x74, 0x65, 0x6d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x67, 0x69,
         0x6e, 0x65, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x70, 0x72,
         0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x3d, 0x22, 0x66, 0x61, 0x6c,
         0x73, 0x65, 0x22, 0x45, 0x73, 0x70, 0x61, 0xc3, 0xb1, 0x6f, 0x6c,
         0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x73, 0x75, 0x62,
         0x6d, 0x69, 0x74, 0x22, 0x20, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f,
         0x74, 0x3b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x6f, 0x72, 0x69, 0x65,
         0x6e, 0x74, 0x65, 0x64, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
         0x65, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x3c, 0x70, 0x6c,
         0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
         0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x62, 0x6f,
         0x72, 0x64, 0x65, 0x72, 0x3d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x74, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x2e,
         0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c,
         0x65, 0x62, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61, 0x2e, 0x73,
         0x68, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x64, 0x65, 0x73, 0x69, 0x67,
         0x6e, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20,
         0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x78, 0x61,
         0x6d, 0x70, 0x6c, 0x65, 0x73, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x61,
         0x6d, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x22,
         0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x73, 0x65, 0x61, 0x72,
         0x63, 0x68, 0x22, 0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
         0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x61, 0x20,
         0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
         0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
         0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x0a,
         0x0a, 0x54, 0x68, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x73, 0x65,
         0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x6d,
         0x69, 0x63, 0x68, 0x69, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x6c,
         0x69, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69,
         0x61, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72,
         0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x64, 0x72, 0x69, 0x6e, 0x6b,
         0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
         0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
         0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
         0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x20, 0x67,
         0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x38, 0x38, 0x35,
         0x39, 0x2d, 0x31, 0x22, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
         0x65, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x20, 0x71,
         0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x72, 0x67, 0x69,
         0x6e, 0x3a, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
         0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e,
         0x74, 0x61, 0x63, 0x74, 0x73, 0x2d, 0x74, 0x69, 0x74, 0x6c, 0x65,
         0x22, 0x3e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
         0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x65, 0x6c, 0x69, 0x67,
         0x69, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65,
         0x73, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x6f, 0x6e,
         0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75,
         0x6c, 0x74, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
         0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x67, 0x6c, 0x6f,
         0x73, 0x73, 0x61, 0x72, 0x79, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65,
         0x72, 0x20, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x3c,
         0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64, 0x65, 0x6e, 0x63, 0x6f,
         0x64, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22,
         0x3e, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69,
         0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x73, 0x63, 0x6f, 0x74, 0x74,
         0x69, 0x73, 0x68, 0x6a, 0x6f, 0x6e, 0x61, 0x74, 0x68, 0x61, 0x6e,
         0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x77, 0x69, 0x64,
         0x67, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63,
         0x61, 0x6c, 0x74, 0x68, 0x61, 0x69, 0x6c, 0x61, 0x6e, 0x64, 0x74,
         0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3c, 0x68, 0x65, 0x61,
         0x64, 0x3e, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
         0x64, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x6f,
         0x69, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x74, 0x6f, 0x53, 0x74, 0x72,
         0x69, 0x6e, 0x67, 0x3c, 0x2f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x3e,
         0x6f, 0x6b, 0x6c, 0x61, 0x68, 0x6f, 0x6d, 0x61, 0x77, 0x69, 0x6c,
         0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
         0x6f, 0x72, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x68,
         0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f,
         0x75, 0x72, 0x63, 0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
         0x64, 0x20, 0x28, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x2e, 0x20,
         0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
         0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67,
         0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x70, 0x72, 0x69,
         0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
         0x22, 0x20, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x71,
         0x75, 0x69, 0x63, 0x6b, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x65, 0x74,
         0x69, 0x6e, 0x67, 0x73, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
         0x65, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x3b, 0x63,
         0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x20, 0x68, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
         0x2c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x63, 0x68,
         0x65, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a,
         0x73, 0x22, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x3e,
         0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x68, 0x66, 0x6f, 0x72, 0x65,
         0x63, 0x61, 0x73, 0x74, 0x2e, 0x20, 0x57, 0x68, 0x69, 0x6c, 0x65,
         0x20, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x64, 0x76,
         0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x26, 0x65, 0x61, 0x63, 0x75,
         0x74, 0x65, 0x3b, 0x68, 0x61, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
         0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
         0x6e, 0x67, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20,
         0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f,
         0x72, 0x61, 0x64, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x22, 0x63, 0x61, 0x6d, 0x70, 0x62, 0x65, 0x6c, 0x6c, 0x3c, 0x21,
         0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x3c, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a,
         0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x7c, 0x73, 0x63, 0x69,
         0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x26, 0x71, 0x75, 0x6f, 0x74,
         0x3b, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x57,
         0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69,
         0x67, 0x6e, 0x65, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
         0x20, 0x3c, 0x62, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65,
         0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75,
         0x65, 0x3d, 0x22, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
         0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3c, 0x69, 0x66,
         0x72, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
         0x65, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x6d,
         0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x6c,
         0x79, 0x29, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61,
         0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x6d, 0x75, 0x63, 0x68, 0x20,
         0x6f, 0x66, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0a,
         0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x72, 0x74, 0x75,
         0x67, 0x75, 0xc3, 0xaa, 0x73, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
         0x54, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3c,
         0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x61, 0x74, 0x74, 0x6f,
         0x72, 0x6e, 0x65, 0x79, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69,
         0x73, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x66, 0x61,
         0x6e, 0x63, 0x79, 0x62, 0x6f, 0x78, 0x77, 0x6f, 0x72, 0x6c, 0x64,
         0x27, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x6c, 0x69, 0x66, 0x65,
         0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x3d, 0x73, 0x65, 0x73,
         0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
         0x6d, 0x6d, 0x70, 0x78, 0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x20,
         0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6a, 0x6f, 0x75, 0x72,
         0x6e, 0x61, 0x6c, 0x73, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65,
         0x64, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68,
         0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74,
         0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x62, 0x6f, 0x72,
         0x64, 0x65, 0x72, 0x3d, 0x30, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69,
         0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c,
         0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70,
         0x6c, 0x65, 0x74, 0x65, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69,
         0x78, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x3c, 0x73, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
         0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x70,
         0x75, 0x6c, 0x61, 0x72, 0x20, 0x20, 0x4f, 0x63, 0x74, 0x6f, 0x62,
         0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x65,
         0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64,
         0x20, 0x74, 0x6f, 0x20, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
         0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c,
         0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x72,
         0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
         0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6e, 0x75,
         0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x6f,
         0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x79,
         0x6c, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65,
         0x73, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x6c, 0x69,
         0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61,
         0x63, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
         0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x62,
         0x6c, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x74, 0x22, 0x73, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x29, 0x73,
         0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x63, 0x6b,
         0x61, 0x67, 0x65, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f,
         0x78, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x70, 0x72,
         0x65, 0x67, 0x6e, 0x61, 0x6e, 0x74, 0x74, 0x6f, 0x6d, 0x6f, 0x72,
         0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d,
         0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x6a, 0x61, 0x70,
         0x61, 0x6e, 0x65, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61,
         0x73, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x3e, 0x67,
         0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x63, 0x68,
         0x20, 0x61, 0x73, 0x20, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65,
         0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x6d, 0x69,
         0x73, 0x73, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x72, 0x74,
         0x69, 0x6e, 0x67, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x70, 0x78, 0x20,
         0x2e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x74, 0x65, 0x6e,
         0x73, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d,
         0x22, 0x32, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x6e,
         0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x75, 0x73, 0x65, 0x64,
         0x20, 0x69, 0x6e, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
         0x22, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x3e, 0x0a, 0x26, 0x6e,
         0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x3c, 0x74, 0x72, 0x3e, 0x3c,
         0x74, 0x64, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x32,
         0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x63, 0x6f, 0x75,
         0x6e, 0x74, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
         0x65, 0x20, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x20, 0x26,
         0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x20, 0x74, 0x69, 0x74, 0x6c,
         0x65, 0x22, 0x3e, 0x3c, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79,
         0x2e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x28, 0xe7,
         0xae, 0x80, 0xe4, 0xbd, 0x93, 0x29, 0x28, 0xe7, 0xb9, 0x81, 0xe9,
         0xab, 0x94, 0x29, 0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69,
         0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x72, 0x6f, 0x6d,
         0xc3, 0xa2, 0x6e, 0xc4, 0x83, 0x74, 0xc3, 0xbc, 0x72, 0x6b, 0xc3,
         0xa7, 0x65, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0x74,
         0x61, 0x6d, 0x62, 0x69, 0xc3, 0xa9, 0x6e, 0x6e, 0x6f, 0x74, 0x69,
         0x63, 0x69, 0x61, 0x73, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65,
         0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x73, 0x64, 0x65,
         0x72, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x6e, 0x61, 0x63, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f,
         0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x75, 0x73, 0x75,
         0x61, 0x72, 0x69, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
         0x6d, 0x61, 0x67, 0x6f, 0x62, 0x69, 0x65, 0x72, 0x6e, 0x6f, 0x65,
         0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x73, 0x61, 0x6e, 0x75, 0x6e,
         0x63, 0x69, 0x6f, 0x73, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x69,
         0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x6d, 0x62, 0x69, 0x61, 0x64, 0x65,
         0x73, 0x70, 0x75, 0xc3, 0xa9, 0x73, 0x64, 0x65, 0x70, 0x6f, 0x72,
         0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x79, 0x65, 0x63, 0x74, 0x6f,
         0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x70, 0xc3, 0xba,
         0x62, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x73, 0x6f, 0x74, 0x72,
         0x6f, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x70,
         0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x69, 0x6c, 0x6c,
         0x6f, 0x6e, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x74,
         0x65, 0x70, 0x72, 0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x61, 0x6e,
         0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x75, 0x72,
         0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61,
         0x73, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x67, 0x6f, 0x6e, 0x75, 0x65,
         0x73, 0x74, 0x72, 0x6f, 0x73, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0xc3,
         0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x72, 0x6d,
         0x69, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6d, 0xc3, 0xa9,
         0x72, 0x69, 0x63, 0x61, 0x76, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x6f,
         0x72, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x64, 0x61, 0x64, 0x72, 0x65,
         0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x69,
         0x7a, 0x61, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x6f,
         0x70, 0x61, 0x6c, 0x61, 0x62, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x74,
         0x65, 0x72, 0xc3, 0xa9, 0x73, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x63,
         0x65, 0x73, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6d,
         0x69, 0x65, 0x6d, 0x62, 0x72, 0x6f, 0x73, 0x72, 0x65, 0x61, 0x6c,
         0x69, 0x64, 0x61, 0x64, 0x63, 0xc3, 0xb3, 0x72, 0x64, 0x6f, 0x62,
         0x61, 0x7a, 0x61, 0x72, 0x61, 0x67, 0x6f, 0x7a, 0x61, 0x70, 0xc3,
         0xa1, 0x67, 0x69, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
         0x6c, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x71, 0x75, 0x65, 0x61, 0x72,
         0x67, 0x65, 0x73, 0x74, 0x69, 0xc3, 0xb3, 0x6e, 0x61, 0x6c, 0x71,
         0x75, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6d,
         0x61, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x73, 0x63,
         0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x73,
         0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
         0x61, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x70, 0xc3,
         0xba, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6f, 0x62, 0x6a, 0x65, 0x74,
         0x69, 0x76, 0x6f, 0x61, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x65,
         0x62, 0x75, 0x73, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x63, 0x61, 0x6e,
         0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x64,
         0x61, 0x73, 0x61, 0x63, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x61,
         0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x73, 0x73, 0x75, 0x70, 0x65,
         0x72, 0x69, 0x6f, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0xc3, 0xad,
         0x61, 0x61, 0x6c, 0x65, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x66, 0x75,
         0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0xc3, 0xba, 0x6c, 0x74, 0x69,
         0x6d, 0x6f, 0x73, 0x68, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x64, 0x6f,
         0x61, 0x71, 0x75, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x69,
         0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x6e,
         0x64, 0x6f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x66,
         0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x65, 0x73,
         0x74, 0x72, 0x61, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65,
         0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x6f, 0x73, 0x62, 0x61,
         0x73, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
         0x6e, 0x74, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x72,
         0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x70, 0x75, 0x62,
         0x6c, 0x69, 0x63, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63,
         0x69, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x6a,
         0xc3, 0xb3, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74,
         0x72, 0x69, 0x74, 0x6f, 0x74, 0xc3, 0xa9, 0x63, 0x6e, 0x69, 0x63,
         0x61, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x74, 0x6f, 0x65, 0x6e,
         0x65, 0x72, 0x67, 0xc3, 0xad, 0x61, 0x74, 0x72, 0x61, 0x62, 0x61,
         0x6a, 0x61, 0x72, 0x61, 0x73, 0x74, 0x75, 0x72, 0x69, 0x61, 0x73,
         0x72, 0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x75, 0x74, 0x69,
         0x6c, 0x69, 0x7a, 0x61, 0x72, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0xc3,
         0xad, 0x6e, 0x73, 0x61, 0x6c, 0x76, 0x61, 0x64, 0x6f, 0x72, 0x63,
         0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x74, 0x72, 0x61, 0x62,
         0x61, 0x6a, 0x6f, 0x73, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x72, 0x6f,
         0x73, 0x6e, 0x65, 0x67, 0x6f, 0x63, 0x69, 0x6f, 0x73, 0x6c, 0x69,
         0x62, 0x65, 0x72, 0x74, 0x61, 0x64, 0x64, 0x65, 0x74, 0x61, 0x6c,
         0x6c, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x61,
         0x70, 0x72, 0xc3, 0xb3, 0x78, 0x69, 0x6d, 0x6f, 0x61, 0x6c, 0x6d,
         0x65, 0x72, 0xc3, 0xad, 0x61, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
         0x65, 0x73, 0x71, 0x75, 0x69, 0xc3, 0xa9, 0x6e, 0x65, 0x73, 0x63,
         0x6f, 0x72, 0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x63, 0x63,
         0x69, 0xc3, 0xb3, 0x6e, 0x62, 0x75, 0x73, 0x63, 0x61, 0x6e, 0x64,
         0x6f, 0x6f, 0x70, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x78,
         0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x63, 0x65,
         0x70, 0x74, 0x6f, 0x74, 0x6f, 0x64, 0x61, 0x76, 0xc3, 0xad, 0x61,
         0x67, 0x61, 0x6c, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x65, 0x73, 0x63,
         0x72, 0x69, 0x62, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
         0x6e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63,
         0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x61, 0x73, 0x70, 0x65,
         0x63, 0x74, 0x6f, 0x73, 0x63, 0x72, 0xc3, 0xad, 0x74, 0x69, 0x63,
         0x61, 0x64, 0xc3, 0xb3, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x6a, 0x75,
         0x73, 0x74, 0x69, 0x63, 0x69, 0x61, 0x64, 0x65, 0x62, 0x65, 0x72,
         0xc3, 0xa1, 0x6e, 0x70, 0x65, 0x72, 0xc3, 0xad, 0x6f, 0x64, 0x6f,
         0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x74, 0x61, 0x6d, 0x61, 0x6e,
         0x74, 0x65, 0x6e, 0x65, 0x72, 0x70, 0x65, 0x71, 0x75, 0x65, 0xc3,
         0xb1, 0x6f, 0x72, 0x65, 0x63, 0x69, 0x62, 0x69, 0x64, 0x61, 0x74,
         0x72, 0x69, 0x62, 0x75, 0x6e, 0x61, 0x6c, 0x74, 0x65, 0x6e, 0x65,
         0x72, 0x69, 0x66, 0x65, 0x63, 0x61, 0x6e, 0x63, 0x69, 0xc3, 0xb3,
         0x6e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x69, 0x61, 0x73, 0x64, 0x65,
         0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x69, 0x76, 0x65, 0x72,
         0x73, 0x6f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x63, 0x61,
         0x72, 0x65, 0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x74, 0xc3, 0xa9,
         0x63, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3,
         0xad, 0x61, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x66,
         0x69, 0x6e, 0x61, 0x6e, 0x7a, 0x61, 0x73, 0x61, 0x64, 0x65, 0x6c,
         0x61, 0x6e, 0x74, 0x65, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x6e,
         0x61, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x73, 0x64, 0x69,
         0x66, 0xc3, 0xad, 0x63, 0x69, 0x6c, 0x63, 0x69, 0x75, 0x64, 0x61,
         0x64, 0x65, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x61, 0x73,
         0x61, 0x76, 0x61, 0x6e, 0x7a, 0x61, 0x64, 0x61, 0x74, 0xc3, 0xa9,
         0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64,
         0x65, 0x73, 0x73, 0xc3, 0xa1, 0x6e, 0x63, 0x68, 0x65, 0x7a, 0x63,
         0x61, 0x6d, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x73, 0x6f, 0x66, 0x74,
         0x6f, 0x6e, 0x69, 0x63, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74, 0x61,
         0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x65,
         0x63, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
         0x74, 0x6f, 0x73, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x64,
         0x63, 0x72, 0xc3, 0xa9, 0x64, 0x69, 0x74, 0x6f, 0x64, 0x69, 0x76,
         0x65, 0x72, 0x73, 0x61, 0x73, 0x73, 0x75, 0x70, 0x75, 0x65, 0x73,
         0x74, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x73,
         0x65, 0x67, 0x75, 0x6e, 0x64, 0x6f, 0x73, 0x70, 0x65, 0x71, 0x75,
         0x65, 0xc3, 0xb1, 0x61, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
         0xb0, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb5,
         0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0,
         0xbb, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x82, 0xd1, 0x8c,
         0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0x95, 0xd1,
         0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0,
         0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x85, 0xd1, 0x8d, 0xd1, 0x82,
         0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0,
         0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb3,
         0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0,
         0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82,
         0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd0,
         0xb5, 0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8,
         0xd0, 0xbd, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0,
         0xbd, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0,
         0xd0, 0xb9, 0xd1, 0x82, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
         0xbe, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81,
         0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb2, 0xd0,
         0xbe, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x8b,
         0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1,
         0x81, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe,
         0xd1, 0x8e, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x88, 0xd1, 0x8c, 0xd1,
         0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbf, 0xd0, 0xbe,
         0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
         0xb9, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbc,
         0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0,
         0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83,
         0xd1, 0x85, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0,
         0xb2, 0xd1, 0x83, 0xd1, 0x85, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x82,
         0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0,
         0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8,
         0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1,
         0x8f, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb2,
         0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0,
         0xb3, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc,
         0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x82, 0xd0,
         0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x86, 0xd0, 0xb5, 0xd0, 0xbd,
         0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
         0xb2, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xb5,
         0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1,
         0x8b, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb2,
         0xd1, 0x8b, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
         0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf, 0xd0, 0xb0,
         0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd1,
         0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86,
         0xd0, 0xb0, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
         0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8b, 0xd0, 0xb7, 0xd0, 0xbd,
         0xd0, 0xb0, 0xd1, 0x8e, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1,
         0x83, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb2,
         0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0,
         0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe,
         0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
         0xb5, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb,
         0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0,
         0xb8, 0xd1, 0x8e, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xb5,
         0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0x95, 0xd1, 0x81, 0xd1, 0x82, 0xd1,
         0x8c, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd,
         0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
         0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x8a,
         0xd8, 0xac, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xae, 0xd8,
         0xa7, 0xd8, 0xb5, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0,
         0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x87, 0xd8,
         0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,
         0xaf, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb5,
         0xd9, 0x81, 0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7, 0xd9,
         0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x8a,
         0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xb4, 0xd8,
         0xa8, 0xd9, 0x83, 0xd8, 0xa9, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x87,
         0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
         0xad, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa3, 0xd9, 0x83,
         0xd8, 0xab, 0xd8, 0xb1, 0xd8, 0xae, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd8, 0xa8, 0xd8, 0xaf,
         0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9,
         0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xba, 0xd8, 0xb7,
         0xd8, 0xaa, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x87, 0xd9,
         0x86, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xad,
         0xd8, 0xa9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xb9, 0xd9, 0x84,
         0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xb4, 0xd9, 0x83, 0xd8, 0xb1, 0xd8,
         0xa7, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0xd9, 0x85,
         0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8, 0xb1, 0xd9,
         0x83, 0xd8, 0xa9, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xb3,
         0xd9, 0x86, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xb7, 0xd9, 0x85, 0xd8,
         0xa7, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81,
         0xd9, 0x86, 0xd8, 0xb4, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
         0xaa, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xb1, 0xd8, 0xad,
         0xd9, 0x85, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x81, 0xd8,
         0xa9, 0xd9, 0x8a, 0xd9, 0x82, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x85,
         0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xb2, 0xd9, 0x83, 0xd9, 0x84, 0xd9,
         0x85, 0xd8, 0xa9, 0xd8, 0xa3, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xaf,
         0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x8a, 0xd8,
         0xb9, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1,
         0xd8, 0xa9, 0xd8, 0xb7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9, 0x82, 0xd8,
         0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xac, 0xd9, 0x88,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xb1, 0xd9,
         0x89, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7,
         0xd8, 0xa8, 0xd8, 0xad, 0xd8, 0xab, 0xd8, 0xb9, 0xd8, 0xb1, 0xd9,
         0x88, 0xd8, 0xb6, 0xd8, 0xa8, 0xd8, 0xb4, 0xd9, 0x83, 0xd9, 0x84,
         0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x84, 0xd8, 0xa8, 0xd9,
         0x86, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xae, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xaf, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9,
         0x83, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa8, 0xd8, 0xaf,
         0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xb6, 0xd8,
         0xa7, 0xd9, 0x8a, 0xd9, 0x88, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x81,
         0xd8, 0xb1, 0xd9, 0x8a, 0xd9, 0x82, 0xd9, 0x83, 0xd8, 0xaa, 0xd8,
         0xa8, 0xd8, 0xaa, 0xd8, 0xa3, 0xd9, 0x81, 0xd8, 0xb6, 0xd9, 0x84,
         0xd9, 0x85, 0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xae, 0xd8, 0xa7, 0xd9,
         0x83, 0xd8, 0xab, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1,
         0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xb6, 0xd9, 0x84, 0xd8,
         0xa7, 0xd8, 0xad, 0xd9, 0x84, 0xd9, 0x89, 0xd9, 0x86, 0xd9, 0x81,
         0xd8, 0xb3, 0xd9, 0x87, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9,
         0x85, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa3,
         0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9,
         0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x86,
         0xd9, 0x85, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8,
         0xb9, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xae,
         0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
         0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
         0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x01,
         0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,
         0x02, 0x01, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
         0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x10, 0x11, 0x12,
         0x13, 0x14, 0x15, 0x16, 0x17, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12,
         0x11, 0x10, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x1f,
         0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0xff, 0xff, 0xff, 0xff,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
         0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
         0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
         0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
         0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00,
         0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02,
         0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x72,
         0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x75,
         0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x71, 0x75, 0x65, 0x73, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
         0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
         0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x68, 0x69,
         0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x54, 0x44, 0x2f,
         0x78, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
         0x69, 0x6e, 0x67, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
         0x65, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x63,
         0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x69, 0x72,
         0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
         0x72, 0x69, 0x62, 0x65, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
         0x73, 0x65, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
         0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x3c, 0x2f,
         0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e, 0x41, 0x75, 0x73, 0x74,
         0x72, 0x61, 0x6c, 0x69, 0x61, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x66,
         0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x69,
         0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x6f, 0x70, 0x65, 0x72, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
         0x67, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64,
         0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x66, 0x75,
         0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
         0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
         0x65, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
         0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x74,
         0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x75, 0x63, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
         0x74, 0x73, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
         0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x61,
         0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x65, 0x78, 0x63, 0x6c,
         0x75, 0x73, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0d,
         0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
         0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6f,
         0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x7d, 0x20, 0x65, 0x6c, 0x73,
         0x65, 0x20, 0x7b, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x74, 0x65,
         0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x64, 0x61, 0x6e, 0x67,
         0x65, 0x72, 0x6f, 0x75, 0x73, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c,
         0x69, 0x74, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
         0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x69,
         0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x70, 0x72, 0x6f,
         0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6e, 0x66, 0x6c, 0x75,
         0x65, 0x6e, 0x63, 0x65, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b,
         0x3c, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
         0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x72,
         0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x65, 0x61, 0x75,
         0x74, 0x69, 0x66, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
         0x6f, 0x72, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
         0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x70,
         0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x74,
         0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x75, 0x6d, 0x62,
         0x6e, 0x61, 0x69, 0x6c, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x20, 0x2e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x28, 0x29, 0x3b,
         0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
         0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x6e, 0x6f,
         0x75, 0x6e, 0x63, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
         0x22, 0x3e, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x65,
         0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x66, 0x6f, 0x72,
         0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x72, 0x61, 0x6d, 0x65,
         0x77, 0x6f, 0x72, 0x6b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
         0x72, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x63, 0x72, 0x69, 0x74,
         0x69, 0x63, 0x69, 0x73, 0x6d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x65, 0x72,
         0x65, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x61,
         0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74,
         0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x62, 0x72, 0x6f, 0x61, 0x64,
         0x63, 0x61, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
         0x65, 0x64, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
         0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x74, 0x72,
         0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
         0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
         0x74, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x62,
         0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x6f, 0x74, 0x68,
         0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x70, 0x65, 0x72, 0x6d, 0x61,
         0x6e, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61,
         0x69, 0x73, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x77, 0x6f, 0x6f, 0x64,
         0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74,
         0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x3c, 0x2f, 0x73, 0x74,
         0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72,
         0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43,
         0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6f, 0x70, 0x70,
         0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e,
         0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69,
         0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e,
         0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x65, 0x78,
         0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x64, 0x6f, 0x65, 0x73,
         0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77,
         0x69, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
         0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e,
         0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x3c, 0x2f, 0x74,
         0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
         0x61, 0x69, 0x6e, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
         0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x65,
         0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
         0x6e, 0x65, 0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x28, 0x73,
         0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x75, 0x6e, 0x61,
         0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x3c, 0x2f, 0x74, 0x69, 0x74,
         0x6c, 0x65, 0x3e, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x65,
         0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x74, 0x77, 0x6f, 0x20,
         0x79, 0x65, 0x61, 0x72, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20,
         0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72,
         0x65, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x3e, 0x61,
         0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x63,
         0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c,
         0x65, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x72, 0x63, 0x65, 0x69, 0x76,
         0x65, 0x64, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
         0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x70, 0x6f,
         0x72, 0x74, 0x72, 0x61, 0x79, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x69, 0x7a, 0x61, 0x62,
         0x65, 0x74, 0x68, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65,
         0x3e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x69,
         0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6c,
         0x65, 0x6e, 0x67, 0x74, 0x68, 0x3b, 0x6c, 0x65, 0x67, 0x65, 0x6e,
         0x64, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
         0x68, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
         0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x6f,
         0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76,
         0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
         0x74, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
         0x3e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x72,
         0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x6f, 0x63,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
         0x74, 0x74, 0x65, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
         0x67, 0x73, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
         0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x62, 0x65,
         0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x66, 0x65,
         0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
         0x20, 0x62, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
         0x79, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x69,
         0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c,
         0x61, 0x74, 0x69, 0x76, 0x65, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72,
         0x64, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
         0x6e, 0x74, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79,
         0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x74, 0x68,
         0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20, 0x63,
         0x61, 0x6e, 0x20, 0x62, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
         0x6e, 0x63, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
         0x65, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x74,
         0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x69, 0x74, 0x65,
         0x6d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x70, 0x72, 0x61, 0x63, 0x74,
         0x69, 0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
         0x67, 0x65, 0x29, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
         0x46, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x70, 0x72,
         0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6d, 0x6f,
         0x63, 0x72, 0x61, 0x63, 0x79, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76,
         0x65, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73,
         0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d,
         0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
         0x61, 0x6c, 0x73, 0x61, 0x69, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x69, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x45, 0x6e,
         0x67, 0x6c, 0x69, 0x73, 0x68, 0x3c, 0x2f, 0x66, 0x72, 0x6f, 0x6d,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
         0x6c, 0x65, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
         0x73, 0x3c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3e, 0x0a, 0x73,
         0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x72,
         0x67, 0x69, 0x6e, 0x3a, 0x20, 0x30, 0x73, 0x70, 0x69, 0x72, 0x69,
         0x74, 0x75, 0x61, 0x6c, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e,
         0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
         0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x69,
         0x73, 0x63, 0x75, 0x73, 0x73, 0x65, 0x64, 0x68, 0x65, 0x20, 0x62,
         0x65, 0x63, 0x61, 0x6d, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
         0x69, 0x76, 0x65, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6a,
         0x73, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x63,
         0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x70, 0x75, 0x72,
         0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x6c, 0x69, 0x74, 0x65, 0x72,
         0x61, 0x6c, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
         0x65, 0x64, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
         0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
         0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x74, 0x20, 0x69,
         0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72,
         0x69, 0x65, 0x73, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65,
         0x20, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x63,
         0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x6c, 0x67,
         0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72,
         0x65, 0x73, 0x74, 0x73, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x6c, 0x69,
         0x6f, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
         0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x72, 0x65,
         0x73, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f,
         0x6c, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
         0x69, 0x76, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
         0x6c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x28,
         0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x66, 0x65, 0x61,
         0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x64, 0x75,
         0x63, 0x74, 0x65, 0x64, 0x29, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64,
         0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x46, 0x65,
         0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x65,
         0x72, 0x6f, 0x75, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
         0x6f, 0x77, 0x3a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
         0x74, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65,
         0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c,
         0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e,
         0x69, 0x63, 0x61, 0x6c, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20,
         0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x65, 0x78,
         0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x6e, 0x67,
         0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x20, 0x46, 0x61, 0x63, 0x65, 0x62,
         0x6f, 0x6f, 0x6b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
         0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x65,
         0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66,
         0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x72,
         0x6d, 0x3e, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
         0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
         0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x74, 0x68,
         0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x74, 0x68, 0x6f, 0x73,
         0x65, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
         0x6e, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
         0x73, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x73,
         0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x72, 0x65, 0x63,
         0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x76, 0x69,
         0x6e, 0x63, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
         0x6e, 0x67, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
         0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x61, 0x6c,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69,
         0x72, 0x73, 0x74, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
         0x73, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
         0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x76, 0x6f,
         0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x72, 0x61, 0x70,
         0x70, 0x65, 0x72, 0x22, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20,
         0x74, 0x6f, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
         0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x2d,
         0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x41, 0x6d, 0x65, 0x72,
         0x69, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
         0x74, 0x65, 0x64, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72,
         0x20, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x3c, 0x66,
         0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74,
         0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x20, 0x6f, 0x6e, 0x62, 0x6c,
         0x75, 0x72, 0x3d, 0x22, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
         0x65, 0x64, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
         0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f,
         0x72, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x61, 0x62, 0x6f, 0x6c,
         0x69, 0x73, 0x68, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
         0x74, 0x65, 0x64, 0x77, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x64,
         0x65, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65,
         0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x6e, 0x61, 0x72,
         0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x61, 0x64, 0x76, 0x6f, 0x63,
         0x61, 0x74, 0x65, 0x73, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
         0x64, 0x69, 0x72, 0x3d, 0x22, 0x6c, 0x74, 0x72, 0x22, 0x65, 0x6d,
         0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x72, 0x65, 0x73, 0x65,
         0x61, 0x72, 0x63, 0x68, 0x2e, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x65, 0x64, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
         0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x64,
         0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x70,
         0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x64, 0x64, 0x43, 0x6c,
         0x61, 0x73, 0x73, 0x28, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
         0x6b, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
         0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x6f, 0x70,
         0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x61, 0x62,
         0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x69,
         0x6d, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
         0x65, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6c, 0x79, 0x69,
         0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x66, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x4a, 0x65, 0x72, 0x75, 0x73,
         0x61, 0x6c, 0x65, 0x6d, 0x74, 0x68, 0x65, 0x79, 0x20, 0x68, 0x61,
         0x76, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67,
         0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72,
         0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x67, 0x75, 0x61, 0x72,
         0x61, 0x6e, 0x74, 0x65, 0x65, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72,
         0x61, 0x72, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
         0x65, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x70,
         0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x74, 0x68, 0x65,
         0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x62, 0x65, 0x68, 0x61, 0x76,
         0x69, 0x6f, 0x75, 0x72, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74,
         0x68, 0x65, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
         0x62, 0x65, 0x67, 0x61, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74,
         0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x6d, 0x61, 0x67, 0x6e,
         0x69, 0x74, 0x75, 0x64, 0x65, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68,
         0x61, 0x76, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61,
         0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x65,
         0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63,
         0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x6e, 0x61, 0x74, 0x75, 0x72,
         0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x69,
         0x6e, 0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
         0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6c,
         0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x3c, 0x2f, 0x6c, 0x61,
         0x62, 0x65, 0x6c, 0x3e, 0x3c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
         0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
         0x73, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73,
         0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x61, 0x6c, 0x6f,
         0x6e, 0x67, 0x73, 0x69, 0x64, 0x65, 0x20, 0x2d, 0x2d, 0x26, 0x67,
         0x74, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x77, 0x65,
         0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74,
         0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
         0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x75, 0x6e, 0x65, 0x73,
         0x63, 0x61, 0x70, 0x65, 0x28, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x6e,
         0x20, 0x69, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
         0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x6f,
         0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
         0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x6f, 0x72, 0x79, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x20,
         0x69, 0x6e, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
         0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x3c, 0x2f,
         0x66, 0x6f, 0x6e, 0x74, 0x3e, 0x3c, 0x2f, 0x4e, 0x6f, 0x72, 0x77,
         0x65, 0x67, 0x69, 0x61, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
         0x69, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e,
         0x67, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x28,
         0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6d,
         0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x66, 0x69, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74,
         0x68, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x72, 0x65,
         0x67, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20,
         0x74, 0x68, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x74,
         0x6f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x70,
         0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x6f, 0x6f,
         0x6c, 0x74, 0x69, 0x70, 0x22, 0x3e, 0x73, 0x75, 0x62, 0x73, 0x74,
         0x61, 0x6e, 0x63, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
         0x69, 0x63, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66,
         0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f,
         0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x65, 0x73, 0x74, 0x69,
         0x6d, 0x61, 0x74, 0x65, 0x73, 0x41, 0x69, 0x72, 0x20, 0x46, 0x6f,
         0x72, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x6f,
         0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69,
         0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x6b,
         0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x70, 0x61, 0x69, 0x6e, 0x74,
         0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72,
         0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c,
         0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x67, 0x72,
         0x6f, 0x77, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,
         0x65, 0x64, 0x20, 0x62, 0x79, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65,
         0x61, 0x6e, 0x20, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
         0x73, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x66,
         0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x69, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x61,
         0x63, 0x74, 0x65, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f,
         0x6f, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64,
         0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69,
         0x6e, 0x67, 0x61, 0x70, 0x6f, 0x72, 0x65, 0x64, 0x65, 0x67, 0x72,
         0x65, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72,
         0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
         0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x63,
         0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x77, 0x65, 0x72,
         0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x6f, 0x74, 0x65, 0x20,
         0x74, 0x68, 0x61, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
         0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
         0x65, 0x76, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x61, 0x63,
         0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x6d,
         0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
         0x63, 0x61, 0x6c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e,
         0x73, 0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x70,
         0x72, 0x69, 0x73, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x61, 0x64, 0x76,
         0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x55, 0x54, 0x46, 0x2d, 0x38,
         0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54,
         0x41, 0x5b, 0x22, 0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
         0x53, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x62, 0x67,
         0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x73, 0x65, 0x72, 0x69,
         0x65, 0x73, 0x20, 0x6f, 0x66, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x77,
         0x61, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70,
         0x65, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x76,
         0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x70,
         0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x69, 0x63,
         0x69, 0x61, 0x6c, 0x73, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73,
         0x6c, 0x79, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
         0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78,
         0x74, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67,
         0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x68, 0x20, 0x74, 0x68, 0x61,
         0x74, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x6d,
         0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x2f, 0x62,
         0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3e, 0x69, 0x6d, 0x70, 0x6c, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20,
         0x69, 0x73, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x73,
         0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
         0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x70, 0x65,
         0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x21,
         0x2d, 0x2d, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65,
         0x77, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
         0x6f, 0x70, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e,
         0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x77, 0x61, 0x73, 0x20, 0x62,
         0x75, 0x69, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x65, 0x7a, 0x75, 0x65,
         0x6c, 0x61, 0x28, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79,
         0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x70, 0x65,
         0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x61,
         0x74, 0x65, 0x67, 0x69, 0x63, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72,
         0x20, 0x6f, 0x66, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f,
         0x6e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x63,
         0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x76, 0x69, 0x72,
         0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68,
         0x20, 0x77, 0x61, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
         0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20,
         0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x68,
         0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x72, 0x69, 0x6d,
         0x69, 0x74, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x20, 0x66,
         0x72, 0x6f, 0x6d, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
         0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x6c, 0x79, 0x64,
         0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x64,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
         0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
         0x3c, 0x2f, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x77, 0x69,
         0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6f, 0x72, 0x67, 0x61,
         0x6e, 0x69, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x74,
         0x69, 0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x64, 0x72, 0x69, 0x63,
         0x68, 0x77, 0x61, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x74,
         0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x61, 0x63,
         0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20,
         0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69,
         0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
         0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x63,
         0x63, 0x75, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x6e, 0x61, 0x76, 0x69,
         0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x22, 0x3e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x73, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f, 0x62,
         0x65, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x72,
         0x76, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x3c, 0x2f, 0x73, 0x74,
         0x79, 0x6c, 0x65, 0x3e, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x61,
         0x74, 0x68, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x70, 0x61,
         0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x65, 0x78, 0x69, 0x73,
         0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,
         0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65,
         0x6e, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6c,
         0x65, 0x76, 0x65, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63,
         0x69, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
         0x65, 0x64, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74,
         0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x73, 0x64, 0x75,
         0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x65, 0x78, 0x70, 0x6c,
         0x6f, 0x73, 0x69, 0x76, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
         0x72, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65,
         0x72, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x7b,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x70, 0x65, 0x6f,
         0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x67, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
         0x65, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
         0x69, 0x6d, 0x67, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x69, 0x6e,
         0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x73, 0x68, 0x6f, 0x75,
         0x6c, 0x64, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
         0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
         0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6e,
         0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65,
         0x20, 0x47, 0x72, 0x65, 0x61, 0x74, 0x72, 0x65, 0x67, 0x61, 0x72,
         0x64, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x20, 0x61, 0x73,
         0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x6e, 0x69, 0x64,
         0x65, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x68, 0x65, 0x20,
         0x57, 0x6f, 0x72, 0x6c, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
         0x20, 0x6f, 0x66, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x69, 0x6e,
         0x67, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x63,
         0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x63, 0x61, 0x72,
         0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x6d, 0x61, 0x69, 0x6e, 0x74,
         0x61, 0x69, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x20,
         0x6f, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x61, 0x6c,
         0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x70, 0x72,
         0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x65,
         0x72, 0x73, 0x68, 0x69, 0x70, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69,
         0x64, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0d,
         0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x6c,
         0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
         0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x65, 0x20, 0x6f,
         0x66, 0x74, 0x65, 0x6e, 0x20, 0x20, 0x7d, 0x29, 0x28, 0x29, 0x3b,
         0x0d, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x20,
         0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2d, 0x62,
         0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x72, 0x65, 0x73, 0x70,
         0x6f, 0x6e, 0x64, 0x65, 0x64, 0x73, 0x61, 0x79, 0x73, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x68, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
         0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x48,
         0x75, 0x6e, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x73, 0x74, 0x61,
         0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65,
         0x73, 0x20, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
         0x61, 0x6c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
         0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x66, 0x6f,
         0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x69, 0x6e, 0x66, 0x65,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64,
         0x20, 0x74, 0x6f, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
         0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3e, 0x70,
         0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x63, 0x6f, 0x6e,
         0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x74,
         0x6f, 0x72, 0x61, 0x6c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20,
         0x6f, 0x66, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
         0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x72,
         0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x43, 0x68, 0x72, 0x69,
         0x73, 0x74, 0x69, 0x61, 0x6e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
         0x75, 0x73, 0x20, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x69,
         0x6e, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x70,
         0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x0a, 0x26, 0x6c,
         0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63,
         0x74, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
         0x63, 0x73, 0x77, 0x61, 0x73, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e,
         0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f,
         0x6f, 0x6b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x65, 0x6c, 0x69,
         0x65, 0x66, 0x20, 0x69, 0x6e, 0x41, 0x66, 0x72, 0x69, 0x6b, 0x61,
         0x61, 0x6e, 0x73, 0x61, 0x73, 0x20, 0x66, 0x61, 0x72, 0x20, 0x61,
         0x73, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x77,
         0x6f, 0x72, 0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x20, 0x73,
         0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x3c, 0x66, 0x69, 0x65, 0x6c,
         0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6d,
         0x61, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
         0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61,
         0x63, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x6f, 0x72, 0x74,
         0x68, 0x65, 0x61, 0x73, 0x74, 0x6d, 0x61, 0x67, 0x61, 0x7a, 0x69,
         0x6e, 0x65, 0x73, 0x3e, 0x3c, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
         0x3e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x67,
         0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f,
         0x75, 0x70, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x6f, 0x72, 0x65,
         0x64, 0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
         0x73, 0x68, 0x61, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
         0x69, 0x74, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x74, 0x68,
         0x65, 0x69, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x70, 0x6f, 0x70, 0x75,
         0x6c, 0x61, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a,
         0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x69, 0x62, 0x62, 0x65, 0x61,
         0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x64,
         0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x77, 0x69, 0x73,
         0x63, 0x6f, 0x6e, 0x73, 0x69, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x2e, 0x3b, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x3a, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x65, 0x64,
         0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x61,
         0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x3c, 0x2f, 0x66, 0x6f,
         0x6f, 0x74, 0x65, 0x72, 0x3e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
         0x72, 0x6c, 0x79, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6f,
         0x66, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x73,
         0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x62, 0x75, 0x73,
         0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66,
         0x69, 0x72, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
         0x3b, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x20, 0x74, 0x6f,
         0x64, 0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x69,
         0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x75, 0x73, 0x65, 0x72,
         0x41, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x69,
         0x76, 0x65, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68,
         0x70, 0x61, 0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65,
         0x6e, 0x67, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x63,
         0x65, 0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x66, 0x65, 0x77, 0x20, 0x79,
         0x65, 0x61, 0x72, 0x73, 0x77, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6c,
         0x73, 0x6f, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c,
         0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x72,
         0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x63, 0x69, 0x74, 0x69,
         0x65, 0x73, 0x20, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
         0x6b, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x65,
         0x64, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x73,
         0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x66, 0x61, 0x6d,
         0x69, 0x6c, 0x79, 0x20, 0x6f, 0x66, 0x53, 0x63, 0x68, 0x6f, 0x6f,
         0x6c, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
         0x65, 0x64, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66,
         0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x69,
         0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3c, 0x2f, 0x6f, 0x62,
         0x6a, 0x65, 0x63, 0x74, 0x3e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20,
         0x69, 0x73, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
         0x72, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x61,
         0x64, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x68, 0x65,
         0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x61, 0x6e, 0x79, 0x20, 0x6f,
         0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x3d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
         0x6d, 0x75, 0x63, 0x68, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x72, 0x65,
         0x66, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x77, 0x61, 0x73, 0x20,
         0x6e, 0x61, 0x6d, 0x65, 0x64, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
         0x61, 0x6c, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61,
         0x6c, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x65,
         0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75,
         0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x73, 0x69, 0x64,
         0x65, 0x6e, 0x74, 0x73, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64,
         0x61, 0x79, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64,
         0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4a, 0x61,
         0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x77, 0x68, 0x61, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x79, 0x61, 0x20, 0x63, 0x65, 0x72, 0x74,
         0x61, 0x69, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x61,
         0x66, 0x74, 0x65, 0x72, 0x20, 0x68, 0x69, 0x73, 0x74, 0x68, 0x65,
         0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
         0x69, 0x6e, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
         0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x65,
         0x61, 0x72, 0x63, 0x68, 0x22, 0x3e, 0x0a, 0x70, 0x69, 0x65, 0x63,
         0x65, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
         0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
         0x65, 0x74, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x65, 0x77,
         0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x76, 0x65,
         0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x20, 0x3c, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65,
         0x72, 0x3e, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
         0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e, 0x76, 0x61,
         0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x3e, 0x70, 0x61, 0x64, 0x64,
         0x69, 0x6e, 0x67, 0x3a, 0x30, 0x76, 0x69, 0x65, 0x77, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
         0x2c, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77,
         0x61, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x75, 0x62,
         0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x74, 0x61, 0x63,
         0x6b, 0x20, 0x6f, 0x6e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
         0x6e, 0x2c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66,
         0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x6f,
         0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x6c, 0x6c, 0x65,
         0x67, 0x65, 0x64, 0x6c, 0x79, 0x43, 0x6c, 0x65, 0x76, 0x65, 0x6c,
         0x61, 0x6e, 0x64, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65,
         0x72, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x61,
         0x72, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x77, 0x61, 0x73,
         0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x6f, 0x6c,
         0x6c, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20,
         0x6f, 0x66, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
         0x6d, 0x75, 0x63, 0x68, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x6d,
         0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x41,
         0x66, 0x74, 0x65, 0x72, 0x20, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20,
         0x74, 0x68, 0x65, 0x4d, 0x75, 0x73, 0x65, 0x75, 0x6d, 0x20, 0x6f,
         0x66, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x69, 0x61, 0x6e, 0x61, 0x28,
         0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69, 0x6e,
         0x6e, 0x65, 0x73, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x6c, 0x65, 0x73, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65,
         0x73, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6e,
         0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x72, 0x65,
         0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x66, 0x65,
         0x6e, 0x73, 0x69, 0x76, 0x65, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x72,
         0x69, 0x67, 0x68, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f,
         0x6d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x22,
         0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x73, 0x74, 0x61,
         0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x28, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
         0x65, 0x73, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
         0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x73, 0x6f, 0x6d, 0x65, 0x77, 0x68, 0x6f, 0x20, 0x77, 0x6f,
         0x75, 0x6c, 0x64, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f,
         0x66, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x62,
         0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x6b, 0x6e, 0x6f,
         0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x20, 0x53, 0x65, 0x72, 0x76,
         0x69, 0x63, 0x65, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,
         0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x6e,
         0x64, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x70, 0x61, 0x70, 0x65,
         0x72, 0x62, 0x61, 0x63, 0x6b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
         0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65,
         0x3e, 0x3d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x64,
         0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x26,
         0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65,
         0x64, 0x20, 0x62, 0x79, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x61, 0x72,
         0x6c, 0x79, 0x3c, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3e,
         0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x74, 0x68,
         0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x70, 0x6f, 0x77, 0x65,
         0x72, 0x20, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x20, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x54, 0x4d,
         0x4c, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x79,
         0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x43, 0x68, 0x75,
         0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x65,
         0x76, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x68, 0x69,
         0x67, 0x68, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20,
         0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x63, 0x6f,
         0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x2f, 0x63, 0x67, 0x69,
         0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65,
         0x61, 0x74, 0x65, 0x61, 0x66, 0x72, 0x69, 0x6b, 0x61, 0x61, 0x6e,
         0x73, 0x65, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x66,
         0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61, 0x69, 0x73, 0x6c, 0x61, 0x74,
         0x76, 0x69, 0x65, 0xc5, 0xa1, 0x75, 0x6c, 0x69, 0x65, 0x74, 0x75,
         0x76, 0x69, 0xc5, 0xb3, 0xc4, 0x8c, 0x65, 0xc5, 0xa1, 0x74, 0x69,
         0x6e, 0x61, 0xc4, 0x8d, 0x65, 0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61,
         0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xa2, 0xe6, 0x97,
         0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e, 0xe7, 0xae, 0x80, 0xe4,
         0xbd, 0x93, 0xe5, 0xad, 0x97, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94,
         0xe5, 0xad, 0x97, 0xed, 0x95, 0x9c, 0xea, 0xb5, 0xad, 0xec, 0x96,
         0xb4, 0xe4, 0xb8, 0xba, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0xe8,
         0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe6, 0x9c, 0xba, 0xe7, 0xac, 0x94,
         0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0xe8, 0xa8, 0x8e, 0xe8, 0xab,
         0x96, 0xe5, 0x8d, 0x80, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
         0x99, 0xa8, 0xe4, 0xba, 0x92, 0xe8, 0x81, 0x94, 0xe7, 0xbd, 0x91,
         0xe6, 0x88, 0xbf, 0xe5, 0x9c, 0xb0, 0xe4, 0xba, 0xa7, 0xe4, 0xbf,
         0xb1, 0xe4, 0xb9, 0x90, 0xe9, 0x83, 0xa8, 0xe5, 0x87, 0xba, 0xe7,
         0x89, 0x88, 0xe7, 0xa4, 0xbe, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c,
         0xe6, 0xa6, 0x9c, 0xe9, 0x83, 0xa8, 0xe8, 0x90, 0xbd, 0xe6, 0xa0,
         0xbc, 0xe8, 0xbf, 0x9b, 0xe4, 0xb8, 0x80, 0xe6, 0xad, 0xa5, 0xe6,
         0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe5, 0xae, 0x9d, 0xe9, 0xaa, 0x8c,
         0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0xa7, 0x94, 0xe5, 0x91,
         0x98, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5,
         0xba, 0x93, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85,
         0xe5, 0x8a, 0x9e, 0xe5, 0x85, 0xac, 0xe5, 0xae, 0xa4, 0xe8, 0xae,
         0xa8, 0xe8, 0xae, 0xba, 0xe5, 0x8c, 0xba, 0xe6, 0xb7, 0xb1, 0xe5,
         0x9c, 0xb3, 0xe5, 0xb8, 0x82, 0xe6, 0x92, 0xad, 0xe6, 0x94, 0xbe,
         0xe5, 0x99, 0xa8, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe5, 0xb8,
         0x82, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe8,
         0xb6, 0x8a, 0xe6, 0x9d, 0xa5, 0xe8, 0xb6, 0x8a, 0xe7, 0xae, 0xa1,
         0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
         0xaf, 0xe7, 0xbd, 0x91, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69,
         0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3, 0xad, 0x63, 0x75, 0x6c, 0x6f,
         0x61, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x61, 0x62, 0x61,
         0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x63, 0x75, 0x61, 0x6c,
         0x71, 0x75, 0x69, 0x65, 0x72, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
         0x61, 0x64, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f,
         0x73, 0x70, 0x6f, 0x6c, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x72,
         0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x77, 0x69, 0x6b,
         0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x73, 0x69, 0x67, 0x75, 0x69,
         0x65, 0x6e, 0x74, 0x65, 0x62, 0xc3, 0xba, 0x73, 0x71, 0x75, 0x65,
         0x64, 0x61, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64,
         0x73, 0x65, 0x67, 0x75, 0x72, 0x69, 0x64, 0x61, 0x64, 0x70, 0x72,
         0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x67,
         0x75, 0x6e, 0x74, 0x61, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x69, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
         0x72, 0x76, 0x65, 0x6e, 0x65, 0x7a, 0x75, 0x65, 0x6c, 0x61, 0x70,
         0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x73, 0x64, 0x69, 0x63,
         0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x63,
         0x69, 0xc3, 0xb3, 0x6e, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x6d, 0x62,
         0x72, 0x65, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x65, 0x73,
         0x70, 0x72, 0x6f, 0x79, 0x65, 0x63, 0x74, 0x6f, 0x73, 0x70, 0x72,
         0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x73, 0x69, 0x6e, 0x73, 0x74,
         0x69, 0x74, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
         0x64, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x72,
         0x61, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0xc3, 0xad, 0x61, 0x69,
         0x6d, 0xc3, 0xa1, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x63, 0x6f, 0x6e,
         0x74, 0x61, 0x63, 0x74, 0x61, 0x72, 0x64, 0x65, 0x73, 0x63, 0x61,
         0x72, 0x67, 0x61, 0x72, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x61, 0x72,
         0x69, 0x6f, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
         0x74, 0x65, 0x6c, 0xc3, 0xa9, 0x66, 0x6f, 0x6e, 0x6f, 0x63, 0x6f,
         0x6d, 0x69, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x63,
         0x69, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
         0x64, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
         0x72, 0x61, 0x6e, 0xc3, 0xa1, 0x6c, 0x69, 0x73, 0x69, 0x73, 0x66,
         0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x6f, 0x73, 0x74, 0xc3, 0xa9,
         0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69,
         0x6e, 0x63, 0x69, 0x61, 0x65, 0x74, 0x69, 0x71, 0x75, 0x65, 0x74,
         0x61, 0x73, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73,
         0x66, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x72, 0x65,
         0x73, 0x75, 0x6c, 0x74, 0x61, 0x64, 0x6f, 0x63, 0x61, 0x72, 0xc3,
         0xa1, 0x63, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x69, 0x65,
         0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x69,
         0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x64, 0x61, 0x64, 0x6d,
         0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x72, 0x65,
         0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x61,
         0x72, 0x67, 0x61, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
         0x69, 0x61, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
         0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x6a,
         0x65, 0x72, 0x63, 0x69, 0x63, 0x69, 0x6f, 0x65, 0x64, 0x69, 0x74,
         0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x61, 0x6c, 0x61, 0x6d, 0x61,
         0x6e, 0x63, 0x61, 0x67, 0x6f, 0x6e, 0x7a, 0xc3, 0xa1, 0x6c, 0x65,
         0x7a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x70,
         0x65, 0x6c, 0xc3, 0xad, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x63,
         0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x72,
         0x61, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x72, 0x72, 0x61, 0x67, 0x6f,
         0x6e, 0x61, 0x70, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x69, 0x63, 0x61,
         0x6e, 0x6f, 0x76, 0x65, 0x64, 0x61, 0x64, 0x65, 0x73, 0x70, 0x72,
         0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x61, 0x63, 0x69,
         0x65, 0x6e, 0x74, 0x65, 0x73, 0x74, 0xc3, 0xa9, 0x63, 0x6e, 0x69,
         0x63, 0x61, 0x73, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x69, 0x76, 0x6f,
         0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x73, 0xe0,
         0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
         0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5,
         0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x8b, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
         0x81, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0x64, 0x69, 0x70, 0x6c,
         0x6f, 0x64, 0x6f, 0x63, 0x73, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0,
         0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x94, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97,
         0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5,
         0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5,
         0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x80, 0xe0,
         0xa4, 0x9a, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0x9c, 0xe0,
         0xa5, 0x89, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x97, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x89, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,
         0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x96,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xad, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x97,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x8a, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
         0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0,
         0xa4, 0xb2, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x81, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89,
         0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa4, 0x9c, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
         0x97, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x9c, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5,
         0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0,
         0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaf, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xaf, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80, 0x63, 0x61, 0x74,
         0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74,
         0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
         0x67, 0x68, 0x74, 0x20, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e,
         0x67, 0x3c, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,
         0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3c, 0x61,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x61, 0x6e,
         0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x26, 0x63, 0x6f, 0x70,
         0x79, 0x3b, 0x20, 0x32, 0x30, 0x31, 0x6a, 0x61, 0x76, 0x61, 0x53,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
         0x74, 0x65, 0x72, 0x73, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72,
         0x75, 0x6d, 0x62, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76,
         0x65, 0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
         0x6c, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
         0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x61,
         0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x64, 0x69,
         0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x76,
         0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
         0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e,
         0x3c, 0x6d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x22,
         0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x73,
         0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x73,
         0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x75, 0x6e, 0x74,
         0x27, 0x2c, 0x20, 0x27, 0x55, 0x41, 0x2d, 0x72, 0x65, 0x73, 0x6f,
         0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69,
         0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
         0x74, 0x65, 0x64, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74,
         0x6f, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
         0x2e, 0x20, 0x3d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e,
         0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x26,
         0x6c, 0x74, 0x3b, 0x62, 0x72, 0x26, 0x67, 0x74, 0x3b, 0x6c, 0x69,
         0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f, 0x70,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x67, 0x63, 0x6f,
         0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x23, 0x65, 0x73, 0x70, 0x65, 0x63,
         0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
         0x6e, 0x74, 0x3d, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
         0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
         0x73, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
         0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54,
         0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61,
         0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d,
         0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x75, 0x6c, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65,
         0x78, 0x4f, 0x66, 0x28, 0x22, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
         0x73, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
         0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
         0x74, 0x73, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
         0x6c, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
         0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x75,
         0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x6f, 0x6f, 0x64, 0x6e, 0x6f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x70, 0x65, 0x72,
         0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x61, 0x63, 0x68,
         0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x6d, 0x6f, 0x73,
         0x70, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x66, 0x6f, 0x63,
         0x75, 0x73, 0x3d, 0x22, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69,
         0x64, 0x3d, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
         0x6e, 0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75,
         0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
         0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x77, 0x65,
         0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x76, 0x61, 0x72,
         0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x72, 0x65, 0x70, 0x75,
         0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x65, 0x6e, 0x6f,
         0x6d, 0x65, 0x6e, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70,
         0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x6e,
         0x67, 0x22, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
         0x74, 0x2c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
         0x73, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
         0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
         0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x75,
         0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x74,
         0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x28, 0x22, 0x68, 0x74,
         0x74, 0x70, 0x73, 0x3a, 0x22, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63,
         0x61, 0x70, 0x65, 0x28, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
         0x72, 0x64, 0x22, 0x20, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61,
         0x74, 0x69, 0x63, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
         0x22, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x3e,
         0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
         0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x70,
         0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x68,
         0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x79, 0x61, 0x73, 0x73,
         0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x75, 0x6e, 0x69, 0x76,
         0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69, 0x6c,
         0x69, 0x74, 0x69, 0x65, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
         0x69, 0x7a, 0x65, 0x64, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
         0x6e, 0x63, 0x65, 0x69, 0x66, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65,
         0x6f, 0x66, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
         0x64, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
         0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x2e,
         0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x28, 0x29, 0x3b, 0x26, 0x61,
         0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x61, 0x6e, 0x6e,
         0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x69,
         0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
         0x68, 0x65, 0x72, 0x22, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x70, 0x74,
         0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
         0x65, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74, 0x73,
         0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x69,
         0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x64, 0x69,
         0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e,
         0x43, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x73,
         0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x64, 0x65, 0x70, 0x61, 0x72,
         0x74, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x66,
         0x74, 0x65, 0x72, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
         0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
         0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
         0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
         0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x65,
         0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x20, 0x68,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b,
         0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c,
         0x61, 0x63, 0x65, 0x28, 0x2f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73,
         0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
         0x6e, 0x63, 0x65, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
         0x6e, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
         0x64, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
         0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
         0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x65,
         0x6c, 0x6c, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x75, 0x70,
         0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x65,
         0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x68, 0x31, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61,
         0x72, 0x67, 0x69, 0x6e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
         0x63, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
         0x63, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x61, 0x74, 0x65,
         0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
         0x0a, 0x0a, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x64,
         0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x61, 0x72,
         0x74, 0x69, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75,
         0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x67,
         0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
         0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
         0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69,
         0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x65,
         0x72, 0x65, 0x4e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64,
         0x73, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65,
         0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x6a,
         0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x72,
         0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x6c, 0x6c,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x61, 0x6e, 0x67,
         0x3d, 0x22, 0x65, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x74, 0x79,
         0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
         0x74, 0x65, 0x3b, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
         0x69, 0x6e, 0x67, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6c,
         0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
         0x6d, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x20,
         0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x65,
         0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f,
         0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x20, 0x63, 0x6f,
         0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x3c, 0x2f, 0x66, 0x6f,
         0x72, 0x6d, 0x3e, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65,
         0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x3c, 0x2f, 0x64,
         0x69, 0x76, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
         0x65, 0x64, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65,
         0x6e, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65,
         0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x69,
         0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x69, 0x6d,
         0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x75, 0x6c,
         0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x61, 0x6c, 0x6d, 0x6f,
         0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x70, 0x78, 0x20, 0x73, 0x6f,
         0x6c, 0x69, 0x64, 0x20, 0x23, 0x61, 0x70, 0x61, 0x72, 0x74, 0x20,
         0x66, 0x72, 0x6f, 0x6d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
         0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69,
         0x73, 0x68, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69, 0x7a, 0x65,
         0x64, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72,
         0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6f,
         0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65,
         0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x68, 0x65,
         0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x68, 0x32, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x61, 0x20, 0x74, 0x69,
         0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x69, 0x6e, 0x63, 0x6c, 0x75,
         0x64, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
         0x65, 0x72, 0x73, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74,
         0x65, 0x64, 0x3d, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
         0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x72,
         0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f,
         0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x78, 0x3b,
         0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x73, 0x75, 0x63, 0x63,
         0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f,
         0x72, 0x74, 0x65, 0x72, 0x73, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x6e,
         0x6e, 0x69, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x74,
         0x68, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20, 0x26, 0x71, 0x75, 0x6f,
         0x74, 0x3b, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
         0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
         0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x65,
         0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x61, 0x6d,
         0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6f,
         0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x66, 0x66, 0x69,
         0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
         0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
         0x6e, 0x61, 0x74, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69,
         0x6d, 0x65, 0x72, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
         0x6f, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x69, 0x6e,
         0x67, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
         0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x6c,
         0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x75,
         0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x30, 0x22, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6d, 0x70,
         0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x69, 0x6c, 0x6c, 0x75, 0x73,
         0x74, 0x72, 0x61, 0x74, 0x65, 0x66, 0x69, 0x76, 0x65, 0x20, 0x79,
         0x65, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
         0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
         0x6e, 0x67, 0x31, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
         0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x6e,
         0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62,
         0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x63,
         0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6a, 0x6f, 0x69, 0x6e,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
         0x74, 0x75, 0x72, 0x65, 0x73, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
         0x75, 0x73, 0x6c, 0x79, 0x3e, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61,
         0x6d, 0x65, 0x3e, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x67, 0x61,
         0x69, 0x6e, 0x62, 0x75, 0x74, 0x20, 0x72, 0x61, 0x74, 0x68, 0x65,
         0x72, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73,
         0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2c, 0x61,
         0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x4c, 0x69,
         0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x6c,
         0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x61, 0x3e,
         0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0a, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73,
         0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x62, 0x69,
         0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e,
         0x74, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
         0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53,
         0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x2c, 0x22, 0x20,
         0x2f, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x63, 0x6f, 0x6c,
         0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x66, 0x75,
         0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
         0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
         0x65, 0x20, 0x6f, 0x66, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65,
         0x65, 0x72, 0x73, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x64,
         0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x69,
         0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e,
         0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x65,
         0x20, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x72, 0x3c, 0x2f, 0x66, 0x6f,
         0x72, 0x6d, 0x3e, 0x0a, 0x3c, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65,
         0x78, 0x4f, 0x66, 0x28, 0x27, 0x69, 0x20, 0x3d, 0x20, 0x30, 0x3b,
         0x20, 0x69, 0x20, 0x3c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
         0x6e, 0x63, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72,
         0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x74,
         0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
         0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x73, 0x6f, 0x2d,
         0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x0a, 0x3c, 0x2f,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x65, 0x76, 0x61, 0x6c, 0x75,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73,
         0x69, 0x7a, 0x65, 0x64, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
         0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x4d, 0x65, 0x61, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2c, 0x69,
         0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c, 0x2f,
         0x61, 0x3e, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x68, 0x61, 0x73,
         0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x70, 0x65,
         0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x54, 0x65, 0x6c, 0x65, 0x76,
         0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63,
         0x69, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62,
         0x61, 0x6c, 0x6c, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x73, 0x69, 0x64,
         0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e,
         0x67, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
         0x3c, 0x69, 0x6d, 0x67, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x61,
         0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x69,
         0x73, 0x20, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e,
         0x63, 0x68, 0x65, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
         0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x75, 0x6c, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
         0x74, 0x61, 0x72, 0x79, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
         0x20, 0x6f, 0x66, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x22, 0x3e, 0x3c, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
         0x3e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73,
         0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x64,
         0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x66, 0x61,
         0x63, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63,
         0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x09, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
         0x67, 0x68, 0x74, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76,
         0x65, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
         0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x73,
         0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x66,
         0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x70, 0x65, 0x72,
         0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x4a,
         0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x72,
         0x69, 0x73, 0x69, 0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c,
         0x65, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x70, 0x6c, 0x6f, 0x6d, 0x61,
         0x74, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69,
         0x6e, 0x67, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
         0x67, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
         0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x63,
         0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f,
         0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x49, 0x74, 0x20,
         0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x66, 0x69, 0x6e, 0x61,
         0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x75, 0x78, 0x65, 0x6d, 0x62,
         0x6f, 0x75, 0x72, 0x67, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c,
         0x65, 0x64, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x20, 0x69,
         0x6e, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x29, 0x3b,
         0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x65,
         0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6f, 0x6e,
         0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x3d, 0x22, 0x0a, 0x3c, 0x21,
         0x2d, 0x2d, 0x20, 0x45, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x69, 0x63,
         0x69, 0x61, 0x6c, 0x6c, 0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
         0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x70, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74,
         0x68, 0x65, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x61,
         0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
         0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x0a,
         0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x72, 0x65,
         0x63, 0x6f, 0x67, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x69, 0x6e, 0x69,
         0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x6c, 0x69, 0x6d, 0x69,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x41, 0x6c, 0x65, 0x78, 0x61,
         0x6e, 0x64, 0x72, 0x69, 0x61, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75,
         0x72, 0x65, 0x73, 0x66, 0x6f, 0x75, 0x72, 0x20, 0x79, 0x65, 0x61,
         0x72, 0x73, 0x0a, 0x0a, 0x26, 0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d,
         0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67,
         0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x68,
         0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x72,
         0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x6f, 0x62, 0x6c,
         0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75,
         0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x69, 0x66, 0x69, 0x65, 0x64, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
         0x67, 0x65, 0x73, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e,
         0x73, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x20, 0x68, 0x72, 0x65, 0x66,
         0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x77,
         0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x63, 0x6f,
         0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x65, 0x73,
         0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x6e, 0x6f, 0x6d, 0x69,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65,
         0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
         0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74,
         0x61, 0x6b, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x75,
         0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6d,
         0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69,
         0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61,
         0x75, 0x72, 0x61, 0x6e, 0x74, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72,
         0x79, 0x20, 0x32, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
         0x6f, 0x66, 0x73, 0x77, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
         0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64,
         0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x77,
         0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x69, 0x6e,
         0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x20, 0x77,
         0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x77, 0x69, 0x74, 0x68,
         0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
         0x3a, 0x6c, 0x65, 0x66, 0x74, 0x69, 0x73, 0x20, 0x75, 0x73, 0x75,
         0x61, 0x6c, 0x6c, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
         0x74, 0x65, 0x73, 0x6e, 0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65,
         0x72, 0x73, 0x6d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x75,
         0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
         0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x70,
         0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x75,
         0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x6e,
         0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x6d, 0x65,
         0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x64, 0x69, 0x66, 0x66, 0x65,
         0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
         0x61, 0x74, 0x69, 0x63, 0x68, 0x61, 0x73, 0x20, 0x6c, 0x65, 0x64,
         0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x6e,
         0x64, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
         0x64, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
         0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x70,
         0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x50, 0x72,
         0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x53, 0x63, 0x69, 0x65,
         0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x6e, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d,
         0x61, 0x72, 0x6b, 0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
         0x61, 0x6e, 0x20, 0x77, 0x69, 0x64, 0x65, 0x73, 0x70, 0x72, 0x65,
         0x61, 0x64, 0x4c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65,
         0x64, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x69, 0x6d,
         0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x0a, 0x3c, 0x68, 0x65,
         0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x6d, 0x4c, 0x61, 0x62, 0x6f, 0x72,
         0x61, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62,
         0x65, 0x72, 0x20, 0x32, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
         0x61, 0x6c, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f,
         0x66, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x20, 0x6c, 0x65, 0x66,
         0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x61,
         0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x61,
         0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
         0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x6f, 0x63, 0x63, 0x75, 0x72,
         0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x75, 0x6c, 0x3e, 0x3c, 0x2f,
         0x64, 0x69, 0x76, 0x3e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69,
         0x78, 0x22, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
         0x69, 0x63, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79, 0x65, 0x61, 0x72,
         0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72, 0x65,
         0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73,
         0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f,
         0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x70, 0x72, 0x65,
         0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x79, 0x68, 0x69, 0x73, 0x20,
         0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x75, 0x73, 0x65, 0x72, 0x41,
         0x67, 0x65, 0x6e, 0x74, 0x2e, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
         0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
         0x65, 0x64, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x74,
         0x79, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22,
         0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x74,
         0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x6e,
         0x20, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x70, 0x6f, 0x73,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73, 0x61, 0x69, 0x64,
         0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x72, 0x65, 0x6c, 0x69, 0x67,
         0x69, 0x6f, 0x75, 0x73, 0x20, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x70, 0x61,
         0x6e, 0x3d, 0x22, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x66,
         0x65, 0x77, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61,
         0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
         0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x3c,
         0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x41, 0x72,
         0x63, 0x68, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e, 0x6f, 0x62, 0x65, 0x69, 0x6e,
         0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x70, 0x70, 0x72, 0x6f,
         0x61, 0x63, 0x68, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
         0x65, 0x67, 0x65, 0x73, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20,
         0x69, 0x6e, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x65, 0x67, 0x67,
         0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x72,
         0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
         0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
         0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x6e, 0x6f, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x0d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
         0x2e, 0x70, 0x68, 0x70, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
         0x20, 0x6f, 0x66, 0x2d, 0x6a, 0x73, 0x73, 0x64, 0x6b, 0x27, 0x29,
         0x29, 0x3b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x74,
         0x6f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
         0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x63,
         0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
         0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x70,
         0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x72, 0x69, 0x74,
         0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65,
         0x64, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20,
         0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61,
         0x72, 0x73, 0x50, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68,
         0x79, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70,
         0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x67,
         0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f,
         0x77, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x67, 0x75, 0x61,
         0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75,
         0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
         0x3a, 0x23, 0x30, 0x30, 0x30, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20,
         0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
         0x69, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69,
         0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
         0x73, 0x61, 0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x6f,
         0x6e, 0x6b, 0x65, 0x79, 0x70, 0x72, 0x65, 0x73, 0x73, 0x3b, 0x20,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x48, 0x65, 0x20,
         0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x64, 0x65,
         0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70, 0x69, 0x63,
         0x61, 0x6c, 0x6c, 0x79, 0x20, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x45, 0x6c, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
         0x76, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
         0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x61,
         0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x73,
         0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x6f, 0x77,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x77,
         0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x0a, 0x09, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
         0x69, 0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
         0x6f, 0x75, 0x73, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,
         0x65, 0x73, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x65,
         0x72, 0x68, 0x65, 0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74,
         0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x61,
         0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x6e,
         0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x65, 0x66, 0x66,
         0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20,
         0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,
         0x70, 0x74, 0x20, 0x74, 0x6f, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66,
         0x6f, 0x72, 0x65, 0x2c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
         0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
         0x61, 0x6e, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65,
         0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
         0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x63,
         0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x70, 0x75,
         0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
         0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69,
         0x67, 0x65, 0x6e, 0x6f, 0x75, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64,
         0x69, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x73, 0x70, 0x69, 0x72,
         0x61, 0x63, 0x79, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
         0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65,
         0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x72,
         0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x6f,
         0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x74, 0x65,
         0x6d, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x62, 0x73, 0x6f,
         0x6c, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x73, 0x75, 0x70, 0x70, 0x6f,
         0x73, 0x65, 0x64, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
         0x65, 0x64, 0x20, 0x61, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74,
         0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x69,
         0x6e, 0x67, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x6c,
         0x79, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x6e,
         0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x61,
         0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x66, 0x6f,
         0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x74, 0x79,
         0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x75,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
         0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65,
         0x70, 0x65, 0x61, 0x74, 0x28, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69,
         0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69,
         0x61, 0x6c, 0x69, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63,
         0x61, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x6e,
         0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x61,
         0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x65,
         0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x69, 0x6e, 0x64,
         0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x3c, 0x2f, 0x62, 0x75,
         0x74, 0x74, 0x6f, 0x6e, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
         0x6e, 0x74, 0x61, 0x67, 0x65, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x6b,
         0x6e, 0x6f, 0x77, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
         0x67, 0x20, 0x61, 0x22, 0x20, 0x64, 0x69, 0x72, 0x3d, 0x22, 0x6c,
         0x74, 0x72, 0x4c, 0x69, 0x65, 0x75, 0x74, 0x65, 0x6e, 0x61, 0x6e,
         0x74, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22,
         0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61,
         0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x61,
         0x64, 0x65, 0x20, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63, 0x6c, 0x65, 0x61,
         0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x67, 0x75, 0x65,
         0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f,
         0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
         0x6e, 0x27, 0x73, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20,
         0x6f, 0x66, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
         0x64, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e,
         0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
         0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x70, 0x61,
         0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6f, 0x73,
         0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x49,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x77,
         0x61, 0x72, 0x64, 0x73, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
         0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
         0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
         0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x69,
         0x6e, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x69,
         0x67, 0x68, 0x74, 0x2d, 0x77, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
         0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x63, 0x69,
         0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x6c, 0x69, 0x74,
         0x69, 0x63, 0x69, 0x61, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e,
         0x20, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20,
         0x6f, 0x66, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b,
         0x20, 0x61, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
         0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
         0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e,
         0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73,
         0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x68, 0x61, 0x64, 0x20,
         0x62, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6e,
         0x69, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64,
         0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
         0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x66,
         0x6f, 0x72, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x63,
         0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
         0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x62,
         0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73,
         0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e,
         0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x63, 0x6c, 0x61, 0x69,
         0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x6f, 0x72,
         0x61, 0x74, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
         0x69, 0x62, 0x6c, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
         0x20, 0x6f, 0x66, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61,
         0x73, 0x20, 0x62, 0x65, 0x67, 0x61, 0x6e, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x66,
         0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x72,
         0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2f, 0x22, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x67, 0x65, 0x6f, 0x6c,
         0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x65, 0x76, 0x65, 0x72,
         0x61, 0x6c, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6c, 0x69, 0x62, 0x65,
         0x72, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
         0x6e, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
         0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x74, 0x6f, 0x70,
         0x74, 0x68, 0x65, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x6f,
         0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x6e, 0x65,
         0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x68, 0x69, 0x73,
         0x20, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x73, 0x65, 0x70, 0x61,
         0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x3d, 0x22, 0x73,
         0x65, 0x61, 0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x63, 0x61,
         0x6c, 0x6c, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75,
         0x72, 0x74, 0x68, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61,
         0x6e, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
         0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
         0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x63, 0x6f,
         0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x63,
         0x75, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65,
         0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x77, 0x61, 0x73, 0x20, 0x6b,
         0x69, 0x6c, 0x6c, 0x65, 0x64, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6d, 0x6f,
         0x72, 0x65, 0x20, 0x44, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30,
         0x30, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
         0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x74,
         0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x66, 0x61,
         0x6d, 0x6f, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x6f, 0x20,
         0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x62, 0x6a, 0x65,
         0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x46,
         0x72, 0x65, 0x6e, 0x63, 0x68, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
         0x20, 0x61, 0x6e, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
         0x64, 0x22, 0x3e, 0x69, 0x73, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20,
         0x74, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x61,
         0x6c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d,
         0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x61,
         0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x3e,
         0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x20, 0x4f, 0x66,
         0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6c,
         0x64, 0x77, 0x69, 0x64, 0x65, 0x2e, 0x61, 0x72, 0x69, 0x61, 0x2d,
         0x6c, 0x61, 0x62, 0x65, 0x6c, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c,
         0x61, 0x6e, 0x65, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20,
         0x77, 0x61, 0x73, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
         0x3d, 0x22, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61,
         0x74, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
         0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6d,
         0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65,
         0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x74, 0x68, 0x65,
         0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x77, 0x6f, 0x72, 0x6b,
         0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
         0x65, 0x64, 0x20, 0x74, 0x6f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74,
         0x69, 0x76, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
         0x6b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x6d,
         0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x69,
         0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6f, 0x70,
         0x65, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x73,
         0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x61, 0x64, 0x6f, 0x70,
         0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x64, 0x64, 0x72, 0x65,
         0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6f, 0x6c, 0x6f,
         0x67, 0x69, 0x61, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
         0x20, 0x6f, 0x66, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20,
         0x6f, 0x66, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e,
         0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65,
         0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x62,
         0x79, 0x20, 0x66, 0x61, 0x72, 0x20, 0x74, 0x68, 0x65, 0x72, 0x61,
         0x6e, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x70, 0x75, 0x72,
         0x73, 0x75, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c,
         0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67,
         0x68, 0x74, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x67,
         0x6c, 0x61, 0x6e, 0x64, 0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x61, 0x63, 0x63, 0x75, 0x73, 0x65, 0x64, 0x20,
         0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f,
         0x6d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
         0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x68,
         0x69, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x72, 0x74, 0x72,
         0x65, 0x6d, 0x65, 0x6e, 0x64, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65,
         0x65, 0x64, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x63,
         0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x30, 0x20, 0x31, 0x65, 0x6d,
         0x20, 0x31, 0x65, 0x6d, 0x3b, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
         0x62, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,
         0x63, 0x73, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69,
         0x65, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65,
         0x72, 0x2f, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22,
         0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x74,
         0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x70, 0x69,
         0x74, 0x74, 0x73, 0x62, 0x75, 0x72, 0x67, 0x68, 0x63, 0x6f, 0x6e,
         0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0d, 0x3c, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x28, 0x66, 0x74, 0x75, 0x72, 0x6e, 0x65,
         0x64, 0x20, 0x6f, 0x75, 0x74, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67,
         0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
         0x0d, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e,
         0x61, 0x6c, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x69,
         0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x20, 0x20, 0x63, 0x72,
         0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x43, 0x75, 0x72,
         0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x20, 0x62, 0x67, 0x63,
         0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x74, 0x61, 0x62, 0x69, 0x6e,
         0x64, 0x65, 0x78, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74,
         0x72, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
         0x63, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x73,
         0x20, 0x61, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c,
         0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x73,
         0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x2e, 0x73,
         0x72, 0x63, 0x20, 0x3d, 0x20, 0x22, 0x2f, 0x2f, 0x76, 0x69, 0x6f,
         0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x69, 0x73,
         0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x74,
         0x61, 0x6e, 0x74, 0x6c, 0x79, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63,
         0x61, 0x74, 0x65, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
         0x6e, 0x67, 0x73, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
         0x68, 0x65, 0x6e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64,
         0x73, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73,
         0xd7, 0xa2, 0xd7, 0x91, 0xd7, 0xa8, 0xd7, 0x99, 0xd7, 0xaa, 0xd9,
         0x81, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xb3, 0xdb, 0x8c, 0x64, 0x65,
         0x73, 0x61, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d,
         0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x65, 0x64, 0x75, 0x63,
         0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x70, 0x74, 0x69,
         0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
         0x72, 0x61, 0x64, 0x6f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x63, 0x69,
         0xc3, 0xb3, 0x6e, 0x75, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3,
         0xb3, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x64, 0x61,
         0x64, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x73,
         0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x64, 0x6f, 0x73, 0x69,
         0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x65,
         0x73, 0x65, 0x72, 0x76, 0x61, 0x64, 0x6f, 0x73, 0x61, 0x72, 0x74,
         0xc3, 0xad, 0x63, 0x75, 0x6c, 0x6f, 0x73, 0x64, 0x69, 0x66, 0x65,
         0x72, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x69, 0x67, 0x75, 0x69,
         0x65, 0x6e, 0x74, 0x65, 0x73, 0x72, 0x65, 0x70, 0xc3, 0xba, 0x62,
         0x6c, 0x69, 0x63, 0x61, 0x73, 0x69, 0x74, 0x75, 0x61, 0x63, 0x69,
         0xc3, 0xb3, 0x6e, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72,
         0x69, 0x6f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x69, 0x64, 0x61,
         0x64, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f,
         0x66, 0x6f, 0x72, 0x6d, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,
         0x6f, 0x62, 0x6c, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x72,
         0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x65, 0x63, 0x6f, 0x6e,
         0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x61, 0x63, 0x63, 0x65,
         0x73, 0x6f, 0x72, 0x69, 0x6f, 0x73, 0x74, 0x65, 0x63, 0x68, 0x6e,
         0x6f, 0x72, 0x61, 0x74, 0x69, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
         0x61, 0x6c, 0x65, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
         0xc3, 0xad, 0x61, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
         0x65, 0x73, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c,
         0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x64,
         0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x76,
         0x61, 0x6c, 0x6c, 0x61, 0x64, 0x6f, 0x6c, 0x69, 0x64, 0x62, 0x69,
         0x62, 0x6c, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x61, 0x72, 0x65, 0x6c,
         0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
         0x6e, 0x64, 0x61, 0x72, 0x69, 0x6f, 0x70, 0x6f, 0x6c, 0xc3, 0xad,
         0x74, 0x69, 0x63, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x69,
         0x6f, 0x72, 0x65, 0x73, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
         0x74, 0x6f, 0x73, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x65,
         0x7a, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65,
         0x73, 0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61,
         0x65, 0x63, 0x6f, 0x6e, 0xc3, 0xb3, 0x6d, 0x69, 0x63, 0x61, 0x74,
         0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x6f,
         0x64, 0x72, 0xc3, 0xad, 0x67, 0x75, 0x65, 0x7a, 0x70, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x75,
         0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75,
         0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
         0x74, 0x75, 0x72, 0x61, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x63, 0x69,
         0xc3, 0xb3, 0x6e, 0x66, 0x72, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74,
         0x65, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
         0x65, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x65,
         0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
         0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbc,
         0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb2, 0xd1,
         0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb0,
         0xd0, 0xba, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x87, 0xd1, 0x82, 0xd0,
         0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb,
         0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd0,
         0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
         0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0,
         0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5,
         0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1,
         0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x87,
         0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0,
         0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xb0,
         0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0,
         0xb7, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb6,
         0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd1,
         0x83, 0xd1, 0x82, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81,
         0xd0, 0xba, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
         0x8c, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbe,
         0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0,
         0xbd, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81,
         0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xbb, 0xd1,
         0x8e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xbf, 0xd0, 0xbe,
         0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0,
         0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82,
         0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
         0xb8, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2,
         0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
         0xb9, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe,
         0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x82, 0xd0,
         0xb6, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8c, 0xd0, 0xbe,
         0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xbb, 0xd1,
         0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,
         0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x87, 0xd0, 0xb0, 0xd1,
         0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81,
         0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0,
         0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
         0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,
         0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb9,
         0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x87,
         0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
         0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81,
         0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xba, 0xd0,
         0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb7,
         0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
         0xbe, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4,
         0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd1, 0x82, 0xd0,
         0xb8, 0xd0, 0x9f, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5,
         0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0,
         0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x81,
         0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x82, 0xd0,
         0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd1, 0x80,
         0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xa1, 0xd0, 0xb0, 0xd0,
         0xbd, 0xd0, 0xba, 0xd1, 0x82, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80,
         0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0x9a, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0,
         0xb4, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb3,
         0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
         0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xb9,
         0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
         0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81,
         0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd1, 0x8c, 0xd0, 0xbb, 0xd1,
         0x8e, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0,
         0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x80, 0xd0,
         0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0x9a, 0xd1, 0x80, 0xd0, 0xbe,
         0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xa4, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
         0x83, 0xd0, 0xbc, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba,
         0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
         0xb8, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba,
         0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x87, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x86, 0xd1, 0x86,
         0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x82, 0xd1,
         0x80, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0,
         0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x85, 0xd1, 0x80, 0xd1, 0x8b, 0xd0,
         0xbd, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2,
         0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0,
         0xbe, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,
         0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
         0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0,
         0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x82,
         0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbd, 0xd0,
         0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbc, 0xd0, 0xb8,
         0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
         0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5,
         0xd1, 0x8e, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
         0xb5, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe,
         0xd0, 0xb4, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0,
         0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83,
         0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x86, 0xd0, 0xb5, 0xd1,
         0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xba,
         0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0x90, 0xd1,
         0x80, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2, 0xd9, 0x85, 0xd9, 0x86,
         0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x89, 0xd8, 0xa5, 0xd8, 0xb1, 0xd8,
         0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,
         0xa7, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd9, 0x87,
         0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x85, 0xd8,
         0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8,
         0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb6, 0xd9, 0x88, 0xd8, 0xa5, 0xd8,
         0xb6, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x82, 0xd8, 0xb3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x85,
         0xd9, 0x8a, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8,
         0xa7, 0xd8, 0xaa, 0xd9, 0x85, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x82,
         0xd9, 0x89, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9,
         0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xb9, 0xd8, 0xb1,
         0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8,
         0xaa, 0xd8, 0xb7, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xb9,
         0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa5, 0xd8,
         0xb1, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xb7, 0xd9, 0x84,
         0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
         0x84, 0xd8, 0xba, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xaa,
         0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x86, 0xd8,
         0xa7, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x8a,
         0xd8, 0xae, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9,
         0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8,
         0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd8,
         0xa7, 0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9,
         0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
         0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb9, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa,
         0xd8, 0xa8, 0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83, 0xd9,
         0x86, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb7, 0xd9, 0x81,
         0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9,
         0x88, 0xd8, 0xa5, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa9,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xaa,
         0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
         0x84, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb9, 0xd9, 0x86,
         0xd8, 0xaf, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xaf, 0xd9,
         0x8a, 0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8, 0xb5, 0xd9, 0x85,
         0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xb1, 0xd8, 0xb4, 0xd9,
         0x8a, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a,
         0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,
         0xa9, 0xd8, 0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9,
         0xd8, 0xa3, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x81, 0xd8, 0xb1, 0xd9, 0x85,
         0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xaa, 0xd8,
         0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb3, 0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x85,
         0xd8, 0xb9, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8,
         0xad, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a,
         0xd9, 0x86, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd8,
         0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5,
         0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8,
         0xa3, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd9, 0x83,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xae, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xb1, 0xd8, 0xb3,
         0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
         0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3,
         0xd8, 0xaf, 0xd8, 0xa8, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7, 0xd8,
         0xb7, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xb3,
         0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb7, 0xd9, 0x82, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xac, 0xd9, 0x84, 0xd8,
         0xa7, 0xd8, 0xb4, 0xd8, 0xaa, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x85, 0xd9, 0x8a, 0xd8,
         0xb9, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x83, 0x73, 0x42, 0x79, 0x54,
         0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x2e, 0x6a, 0x70, 0x67,
         0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x31, 0x70, 0x78, 0x20,
         0x73, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x23, 0x2e, 0x67, 0x69, 0x66,
         0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70, 0x70, 0x6c,
         0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x6f, 0x6e,
         0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x65, 0x73, 0x74, 0x61,
         0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x61, 0x64, 0x76, 0x65,
         0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x6e, 0x67,
         0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x65, 0x6e, 0x76, 0x69,
         0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x66,
         0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x26, 0x61, 0x6d, 0x70,
         0x3b, 0x6d, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x69, 0x6d, 0x6d, 0x65,
         0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x3c, 0x2f, 0x73, 0x74,
         0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x3c, 0x2f, 0x72, 0x61, 0x74, 0x68,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x74, 0x65, 0x6d, 0x70,
         0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70,
         0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6c, 0x61, 0x63,
         0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69,
         0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x63, 0x6f, 0x70, 0x79,
         0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x30, 0x22, 0x20, 0x68,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x65, 0x76, 0x65, 0x6e,
         0x20, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x72, 0x65, 0x70, 0x6c,
         0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x73, 0x74,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x70,
         0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x41, 0x73, 0x73, 0x6f,
         0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x64, 0x69,
         0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x72, 0x73,
         0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x54,
         0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28, 0x75, 0x72, 0x6c, 0x28,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
         0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x6d, 0x61, 0x72, 0x67,
         0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x65, 0x76, 0x65, 0x6e,
         0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6e, 0x6f,
         0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
         0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x50, 0x47,
         0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x70, 0x61, 0x72, 0x74,
         0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x2f, 0x68, 0x65, 0x61,
         0x64, 0x3e, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x66, 0x6c, 0x6f, 0x61,
         0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x3c, 0x6c, 0x69, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x75, 0x6e, 0x64,
         0x72, 0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x48, 0x6f,
         0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61,
         0x72, 0x3a, 0x62, 0x6f, 0x74, 0x68, 0x3b, 0x63, 0x6f, 0x6f, 0x70,
         0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69, 0x74, 0x68,
         0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,
         0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x4e, 0x65, 0x77, 0x20,
         0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x63, 0x6f,
         0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x70, 0x68, 0x6f, 0x74,
         0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x6c, 0x74, 0x3b,
         0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x74,
         0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x79, 0x4e, 0x65, 0x74, 0x68,
         0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x61, 0x6c, 0x74, 0x65,
         0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x6c,
         0x65, 0x6e, 0x67, 0x74, 0x68, 0x3d, 0x22, 0x73, 0x77, 0x69, 0x74,
         0x7a, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x65,
         0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x0a, 0x41, 0x6c,
         0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x3c, 0x2f, 0x74, 0x65,
         0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x3e, 0x74, 0x68, 0x75, 0x6e,
         0x64, 0x65, 0x72, 0x62, 0x69, 0x72, 0x64, 0x72, 0x65, 0x70, 0x72,
         0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x26, 0x61, 0x6d, 0x70,
         0x3b, 0x6e, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x73, 0x70, 0x65, 0x63,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d,
         0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x6c, 0x65, 0x67, 0x69,
         0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x0a, 0x09, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6c, 0x6c, 0x75,
         0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x67, 0x69,
         0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x72, 0x72,
         0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x61, 0x75, 0x74, 0x68,
         0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74,
         0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x36, 0x22, 0x20, 0x68,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x73, 0x61, 0x6e, 0x73,
         0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3b, 0x63, 0x61, 0x70, 0x61,
         0x62, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x73, 0x61,
         0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x6f, 0x6f, 0x6b,
         0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x69, 0x74, 0x20, 0x77,
         0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x41, 0x66, 0x67, 0x68,
         0x61, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x77, 0x61, 0x73, 0x20,
         0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x68,
         0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x73, 0x75, 0x72, 0x72,
         0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6e, 0x20,
         0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x6f, 0x62, 0x73, 0x65,
         0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x69, 0x6e,
         0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x6e, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x3c, 0x68, 0x32, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72, 0x65,
         0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x68,
         0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x61,
         0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x29, 0x2e, 0x67, 0x65,
         0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x66, 0x75, 0x6e, 0x64,
         0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x70,
         0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x70,
         0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x78, 0x61, 0x6d,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x70,
         0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x78, 0x70, 0x6c,
         0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x69, 0x6e, 0x70,
         0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x72, 0x73,
         0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x73, 0x74,
         0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x66, 0x6f,
         0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x20, 0x3d, 0x20, 0x27,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x44, 0x65, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x2e, 0x73, 0x75, 0x62,
         0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x65, 0x61, 0x63, 0x68,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c,
         0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x65,
         0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x79,
         0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x64, 0x75, 0x65, 0x20,
         0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x62,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x20, 0x6e,
         0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x64, 0x64,
         0x6c, 0x65, 0x20, 0x45, 0x61, 0x73, 0x74, 0x3c, 0x6e, 0x6f, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x63, 0x6f, 0x70, 0x79,
         0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x70, 0x65, 0x72, 0x68,
         0x61, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x73, 0x74,
         0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x44,
         0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72, 0x61,
         0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x70, 0x65, 0x72, 0x73,
         0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x63, 0x72, 0x65, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6c, 0x69, 0x6d, 0x69,
         0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x63, 0x6c,
         0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x73, 0x6f, 0x76, 0x65,
         0x72, 0x65, 0x69, 0x67, 0x6e, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6e,
         0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x64, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x75, 0x6e, 0x64, 0x65,
         0x72, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x70, 0x61, 0x72, 0x61,
         0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x64, 0x6f, 0x63, 0x74,
         0x72, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x63, 0x63, 0x75,
         0x70, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x72, 0x6d,
         0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x6e, 0x61,
         0x69, 0x73, 0x73, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x20, 0x6e, 0x75,
         0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x73, 0x75, 0x70, 0x70,
         0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x70, 0x6c,
         0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f,
         0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64,
         0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x3c, 0x69, 0x6d, 0x67,
         0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x3c, 0x68, 0x31, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70, 0x75, 0x62, 0x6c,
         0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x79, 0x20,
         0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x73, 0x70, 0x65, 0x63,
         0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3c, 0x2f, 0x66, 0x69,
         0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x70, 0x72, 0x6f, 0x67,
         0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6c, 0x6c,
         0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74,
         0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x6e, 0x66, 0x6f,
         0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x6f, 0x75,
         0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20,
         0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72,
         0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x72, 0x69,
         0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x65,
         0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x72, 0x65, 0x73, 0x65,
         0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x74, 0x6f, 0x77, 0x61,
         0x72, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x6f, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79,
         0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x28, 0x65, 0x73, 0x70,
         0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x74, 0x64, 0x20,
         0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x3b, 0x77, 0x69, 0x64,
         0x74, 0x68, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x69, 0x6e, 0x64, 0x65,
         0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x3c, 0x68, 0x33, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20, 0x6f, 0x6e, 0x63,
         0x68, 0x61, 0x6e, 0x67, 0x65, 0x3d, 0x22, 0x29, 0x2e, 0x61, 0x64,
         0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x75, 0x67,
         0x68, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x63, 0x65,
         0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x62, 0x72, 0x61, 0x6e,
         0x63, 0x68, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20,
         0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x64, 0x65, 0x63, 0x6c,
         0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75,
         0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x63, 0x75,
         0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x6f,
         0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x3c,
         0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x68, 0x65,
         0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31, 0x61, 0x63, 0x72, 0x6f,
         0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x65,
         0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x69, 0x6d, 0x70, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6e, 0x20,
         0x62, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x64, 0x65, 0x6d, 0x6f,
         0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74,
         0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x63, 0x6f, 0x6e, 0x6e,
         0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x20,
         0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x21, 0x69, 0x6d, 0x70,
         0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x20,
         0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x6f, 0x6c, 0x6c,
         0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x62, 0x69, 0x6c,
         0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x64, 0x75, 0x72, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x6d, 0x69,
         0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6f,
         0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x3c, 0x68, 0x34, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x74,
         0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6c,
         0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x6f, 0x63, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x4e,
         0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x77, 0x68, 0x65, 0x74,
         0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x70, 0x3e,
         0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x63, 0x71, 0x75,
         0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x6c, 0x6c,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73,
         0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x73, 0x69,
         0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7b, 0x66, 0x6f, 0x6e,
         0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x61, 0x70, 0x70, 0x65,
         0x61, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x76, 0x65,
         0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x77, 0x69, 0x64, 0x65,
         0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64, 0x69, 0x73, 0x63,
         0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x73,
         0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x28, 0x64, 0x6f,
         0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65,
         0x6e, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x49, 0x74, 0x20, 0x68,
         0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x74, 0x20, 0x64,
         0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74,
         0x72, 0x61, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x68, 0x61,
         0x62, 0x69, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x69, 0x6d, 0x70, 0x72,
         0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63, 0x68, 0x6f,
         0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6e, 0x73,
         0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x73, 0x74,
         0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x20,
         0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20,
         0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x70, 0x78, 0x3b, 0x20,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x20, 0x73, 0x65,
         0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20,
         0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x6f, 0x6c, 0x65,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x76,
         0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x72, 0x69,
         0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x76, 0x69, 0x64,
         0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x6f,
         0x72, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63, 0x65, 0x72, 0x74,
         0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x20, 0x73, 0x65, 0x6c,
         0x65, 0x63, 0x74, 0x65, 0x64, 0x3d, 0x22, 0x68, 0x69, 0x67, 0x68,
         0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x72, 0x65, 0x73, 0x70,
         0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x66,
         0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6f, 0x70,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x72, 0x65,
         0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x46,
         0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x73, 0x6f, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x70, 0x65, 0x6f, 0x70,
         0x6c, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76,
         0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x70, 0x61, 0x72,
         0x61, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x66, 0x66, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x20, 0x74,
         0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x6f,
         0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x53, 0x4f, 0x2d,
         0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x22, 0x77, 0x61, 0x73, 0x20,
         0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x74,
         0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x61,
         0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x6d, 0x65, 0x61, 0x73,
         0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x20, 0x62,
         0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64,
         0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x66, 0x75,
         0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x69, 0x67, 0x6e,
         0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x63, 0x65, 0x6c, 0x65,
         0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2f, 0x6a, 0x73, 0x2f,
         0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x20, 0x6b,
         0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x68, 0x65, 0x6f,
         0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x61, 0x62,
         0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x69, 0x74, 0x20, 0x63,
         0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x3c, 0x6e, 0x6f, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x68, 0x61, 0x76, 0x69,
         0x6e, 0x67, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x0d, 0x0a, 0x3c, 0x68,
         0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x20, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x65, 0x20, 0x68,
         0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x64,
         0x75, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x70, 0x68, 0x69, 0x6c,
         0x6f, 0x73, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65,
         0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x6d, 0x6f, 0x6e,
         0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70,
         0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x6f, 0x20, 0x73,
         0x61, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x67, 0x69,
         0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x20, 0x64, 0x69,
         0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65,
         0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x65, 0x6c, 0x69,
         0x65, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x68, 0x6f, 0x74,
         0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x69, 0x64, 0x65, 0x6e,
         0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
         0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x70, 0x75,
         0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x6e, 0x65, 0x63, 0x65,
         0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x70, 0x72, 0x6f, 0x62,
         0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x65, 0x63, 0x68,
         0x6e, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x6c, 0x65, 0x61, 0x76,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x65, 0x63,
         0x74, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x66, 0x72, 0x61, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x68, 0x65, 0x61, 0x64,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x74,
         0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74,
         0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x65, 0x6d, 0x70, 0x68,
         0x61, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x72,
         0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x61, 0x79, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6c, 0x6c,
         0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65, 0x73, 0x69,
         0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x74, 0x20, 0x69,
         0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x22, 0x3e, 0x3c, 0x2f,
         0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e, 0x61, 0x73, 0x20, 0x66,
         0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x6d, 0x65, 0x72, 0x67,
         0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x68, 0x72, 0x6f,
         0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
         0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e,
         0x74, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x6f, 0x70, 0x70, 0x6f,
         0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x76, 0x69, 0x65, 0x77,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75,
         0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x69, 0x76, 0x69,
         0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x72, 0x6f, 0x67,
         0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x68, 0x65, 0x20, 0x72,
         0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x73, 0x65, 0x74, 0x49,
         0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x2f,
         0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x4e,
         0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x61, 0x64, 0x64, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x0a, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x63, 0x6f,
         0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x3b, 0x3c, 0x2f, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x61, 0x74, 0x74, 0x61,
         0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61,
         0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x20, 0x74, 0x61,
         0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x63, 0x61, 0x72, 0x72,
         0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x53, 0x6f, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65,
         0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x68, 0x65, 0x20,
         0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
         0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x6d, 0x61, 0x69, 0x6e,
         0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x72, 0x69,
         0x73, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x4d, 0x75, 0x63, 0x68,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x72, 0x69, 0x74,
         0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x68, 0x65,
         0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x32, 0x73, 0x69, 0x7a, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x78, 0x74,
         0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65, 0x74, 0x77,
         0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x45, 0x78, 0x61, 0x6d,
         0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x65, 0x64, 0x75, 0x63,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70,
         0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x73,
         0x75, 0x62, 0x6d, 0x69, 0x74, 0x3d, 0x22, 0x64, 0x69, 0x72, 0x65,
         0x63, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x74,
         0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x44, 0x54, 0x44,
         0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x74, 0x65, 0x6e, 0x64,
         0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x76,
         0x69, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x64, 0x65, 0x73, 0x70,
         0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65,
         0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x65, 0x67, 0x69,
         0x73, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x69, 0x6e, 0x6e,
         0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x61, 0x6c, 0x6c, 0x65,
         0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x67, 0x72, 0x69,
         0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x77, 0x61, 0x73, 0x20,
         0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x61, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x74, 0x65,
         0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x79, 0x65, 0x61, 0x72,
         0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2c, 0x73, 0x61, 0x6e,
         0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x64, 0x65, 0x74, 0x65,
         0x72, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66,
         0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x70, 0x65,
         0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68,
         0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,
         0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x68, 0x69, 0x67, 0x68,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x20, 0x66, 0x72,
         0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69,
         0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73, 0x75, 0x70, 0x70,
         0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x61, 0x69,
         0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x74, 0x74, 0x72,
         0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x6e, 0x74,
         0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x65, 0x6c, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x48, 0x69, 0x73, 0x74,
         0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x68, 0x69, 0x73, 0x20,
         0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x61, 0x6e, 0x6e, 0x69,
         0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x69,
         0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x6e, 0x6f,
         0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x74, 0x20, 0x69,
         0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6e, 0x20,
         0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x64, 0x65, 0x66, 0x69,
         0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x47, 0x4d,
         0x54, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x20, 0x6e, 0x75,
         0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x67, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x45, 0x76, 0x65, 0x6e,
         0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x77, 0x61, 0x73, 0x20,
         0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75,
         0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6e, 0x65, 0x69, 0x67,
         0x68, 0x62, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x74,
         0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x77, 0x68, 0x65, 0x6e,
         0x20, 0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x72,
         0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x72, 0x72,
         0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75,
         0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6e, 0x20, 0x41,
         0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x71,
         0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x77, 0x69, 0x64, 0x65,
         0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x20, 0x77, 0x65, 0x72, 0x65,
         0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x63, 0x72, 0x65,
         0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x6e, 0x20, 0x6f,
         0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63,
         0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x61, 0x72, 0x65, 0x20,
         0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x65, 0x67, 0x69,
         0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x67, 0x65, 0x6e, 0x65,
         0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x61, 0x63,
         0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x79, 0x65, 0x61, 0x72,
         0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x20,
         0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x66, 0x72, 0x65, 0x71,
         0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x79,
         0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x75,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x68, 0x6f, 0x77,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x72, 0x65, 0x64,
         0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x74, 0x68, 0x65, 0x6f,
         0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x79, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x73,
         0x69, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x6f, 0x72,
         0x74, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70,
         0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x63, 0x61, 0x6e, 0x20,
         0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x76, 0x65, 0x72, 0x79,
         0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x64, 0x20,
         0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x6d,
         0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x65, 0x61, 0x74,
         0x75, 0x72, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x3c, 0x2f, 0x6e, 0x6f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x22, 0x20, 0x68, 0x65,
         0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x33, 0x49, 0x6e, 0x64, 0x65,
         0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x70, 0x6f, 0x70, 0x75,
         0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x61, 0x72, 0x67,
         0x65, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x20, 0x41, 0x6c,
         0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x75, 0x73, 0x65, 0x64,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x73, 0x74,
         0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x73, 0x73,
         0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x72,
         0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x74, 0x77, 0x6f, 0x20,
         0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x65, 0x78, 0x70, 0x72,
         0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x6f,
         0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x6c, 0x61, 0x72, 0x67,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x68, 0x69, 0x73, 0x74,
         0x6f, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x3c, 0x2f, 0x6f, 0x70,
         0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
         0x69, 0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x69, 0x6d,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x6c, 0x6c,
         0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x70, 0x72, 0x61, 0x63,
         0x74, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x66,
         0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x74, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x73, 0x75,
         0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x63,
         0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6d, 0x69, 0x73, 0x73,
         0x69, 0x73, 0x73, 0x69, 0x70, 0x70, 0x69, 0x70, 0x6f, 0x74, 0x65,
         0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x75, 0x74, 0x73,
         0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x65, 0x74, 0x74,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x77, 0x68, 0x61, 0x74,
         0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x73, 0x69, 0x74, 0x75,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x65, 0x74, 0x61,
         0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x54, 0x72, 0x61, 0x64,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x75, 0x67, 0x67,
         0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e,
         0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20,
         0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x6d, 0x6f,
         0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x69, 0x64, 0x65, 0x6f,
         0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x63,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x61, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x6d, 0x6e,
         0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6c, 0x75, 0x67,
         0x69, 0x6e, 0x73, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x64,
         0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x72, 0x65, 0x6d, 0x61,
         0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x65, 0x20, 0x77,
         0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x77, 0x61, 0x73, 0x20,
         0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74, 0x61, 0x74,
         0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x66,
         0x61, 0x76, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69,
         0x73, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x76, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x6d,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x72,
         0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3c, 0x6c, 0x69, 0x6e,
         0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x54, 0x68, 0x69, 0x73,
         0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x70, 0x6f, 0x70, 0x75,
         0x6c, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f,
         0x6c, 0x76, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x72, 0x65, 0x20,
         0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x64, 0x20,
         0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6d, 0x61, 0x64, 0x65,
         0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6d,
         0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6b, 0x65,
         0x6c, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x50, 0x61, 0x6c, 0x65,
         0x73, 0x74, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65,
         0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x69, 0x74, 0x20, 0x68,
         0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x6f, 0x20, 0x72,
         0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20,
         0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73,
         0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x74, 0x65, 0x6d, 0x70,
         0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x20, 0x67,
         0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2c, 0x63, 0x6f, 0x6e, 0x76,
         0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65,
         0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x75, 0x62, 0x64,
         0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x72,
         0x69, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x65, 0x72, 0x6d,
         0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20,
         0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x6f, 0x75, 0x74, 0x62,
         0x72, 0x65, 0x61, 0x6b, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x66, 0x6f, 0x6c, 0x6c,
         0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x78, 0x6d, 0x6c,
         0x6e, 0x73, 0x3a, 0x6f, 0x67, 0x3d, 0x22, 0x3e, 0x3c, 0x61, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76,
         0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61, 0x79, 0x20,
         0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x6e, 0x75,
         0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65,
         0x72, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65, 0x61,
         0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x0a, 0x71, 0x75, 0x65, 0x73,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20,
         0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x20, 0x62,
         0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x65, 0x63, 0x61,
         0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x6d, 0x65,
         0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x69, 0x6e, 0x73, 0x70,
         0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x73, 0x75, 0x63, 0x63,
         0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x61, 0x20, 0x74, 0x69,
         0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x6d, 0x6f, 0x72, 0x65,
         0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x61, 0x6d, 0x6f, 0x6e,
         0x67, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x6f,
         0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x74, 0x65, 0x63, 0x68,
         0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2c, 0x77, 0x61, 0x73, 0x20,
         0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x20, 0x6b,
         0x65, 0x65, 0x70, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x74, 0x74,
         0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x69, 0x76, 0x65,
         0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x64, 0x65,
         0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x43, 0x6f, 0x6e, 0x6e,
         0x65, 0x63, 0x74, 0x69, 0x63, 0x75, 0x74, 0x61, 0x73, 0x73, 0x69,
         0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x26, 0x61, 0x6d, 0x70,
         0x3b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x3b, 0x61, 0x63, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x67,
         0x6e, 0x3d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x61, 0x6c, 0x77, 0x61,
         0x79, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x74, 0x75,
         0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x76, 0x6f,
         0x6c, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x63, 0x61,
         0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x73,
         0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x66,
         0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x72, 0x65,
         0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x6c, 0x75,
         0x65, 0x3d, 0x22, 0x22, 0x20, 0x2f, 0x3e, 0x69, 0x73, 0x20, 0x61,
         0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x6e, 0x76, 0x69,
         0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x3c, 0x2f,
         0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x76,
         0x65, 0x72, 0x73, 0x65, 0x6c, 0x79, 0x2c, 0x3e, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77,
         0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x69, 0x73, 0x20, 0x70,
         0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x68, 0x61, 0x76, 0x65,
         0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x63, 0x6f, 0x6e, 0x74,
         0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x63, 0x69, 0x74, 0x69,
         0x7a, 0x65, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x6c, 0x69,
         0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x61, 0x63,
         0x68, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x65,
         0x61, 0x72, 0x6c, 0x79, 0x20, 0x61, 0x73, 0x3a, 0x6e, 0x6f, 0x6e,
         0x65, 0x3b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x3c, 0x74, 0x61, 0x62,
         0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x69,
         0x64, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x72, 0x65,
         0x63, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x6f, 0x6e, 0x6d, 0x6f,
         0x75, 0x73, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x77, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x77, 0x68, 0x65, 0x6e,
         0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x6d, 0x65, 0x6d, 0x62,
         0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f,
         0x6d, 0x6d, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x6f, 0x6e,
         0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x49, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x64, 0x65, 0x6c, 0x69,
         0x63, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x3e, 0x74, 0x68, 0x69, 0x73,
         0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x20, 0x6d, 0x61,
         0x74, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x09, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x66, 0x61, 0x73, 0x74,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f,
         0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x66, 0x74, 0x65,
         0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70,
         0x61, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x74, 0x6f, 0x20, 0x6d,
         0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6d, 0x70, 0x72,
         0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x77, 0x61, 0x72,
         0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x72, 0x22, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x72, 0x61, 0x6d,
         0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74,
         0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x61, 0x6e, 0x61, 0x6c,
         0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x69,
         0x72, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x75, 0x72, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
         0x69, 0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x65, 0x71, 0x75,
         0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x66, 0x6f, 0x6e, 0x74,
         0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x77, 0x6f, 0x72, 0x6b,
         0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x62, 0x65, 0x67, 0x69,
         0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6a, 0x61, 0x76, 0x61,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x73, 0x20,
         0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x65, 0x71, 0x75, 0x69,
         0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x61, 0x73, 0x73, 0x75,
         0x6d, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20, 0x67,
         0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x6e, 0x65, 0x65, 0x64,
         0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6f, 0x72,
         0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x61, 0x72, 0x65, 0x20,
         0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x6f, 0x6e, 0x6c, 0x79,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x61,
         0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x6f,
         0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63,
         0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x73, 0x73, 0x6f,
         0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x67, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x72, 0x65,
         0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x65, 0x73,
         0x65, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x79, 0x75, 0x6e, 0x69, 0x76,
         0x65, 0x72, 0x73, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x6f, 0x20, 0x66,
         0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x62, 0x75, 0x74, 0x20,
         0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x72, 0x70,
         0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x61,
         0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x63,
         0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x72, 0x65, 0x61, 0x73,
         0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20,
         0x62, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x77, 0x61, 0x73, 0x20,
         0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x62, 0x75, 0x74, 0x20,
         0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x4d, 0x6f,
         0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x73, 0x20, 0x70,
         0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6f, 0x70, 0x65, 0x72,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x63, 0x6f, 0x6d, 0x69,
         0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x61, 0x64, 0x64, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20,
         0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e,
         0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x61, 0x20, 0x70, 0x65,
         0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20,
         0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x68, 0x6f, 0x77, 0x65,
         0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x73, 0x68, 0x6f, 0x75,
         0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x75, 0x63, 0x68,
         0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x0a, 0x09, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x61, 0x64, 0x6f, 0x70,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x6f, 0x70,
         0x65, 0x72, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x72, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x65, 0x66, 0x66, 0x65,
         0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20,
         0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x63, 0x68, 0x69, 0x6c,
         0x64, 0x72, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x67,
         0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67,
         0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6e, 0x75,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x77, 0x61, 0x72, 0x20,
         0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x62, 0x79, 0x20, 0x6d,
         0x65, 0x61, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20,
         0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x6d, 0x69,
         0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x70,
         0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x6f, 0x72, 0x69, 0x67,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65, 0x73,
         0x74, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x67, 0x72, 0x61, 0x6d,
         0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x20, 0x6d,
         0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x49, 0x74, 0x20, 0x77,
         0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x69, 0x73, 0x20, 0x66,
         0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
         0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x55, 0x2e, 0x53, 0x2e, 0x72, 0x65, 0x70, 0x6c,
         0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f, 0x75,
         0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x6c, 0x63,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x6c, 0x6c,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70, 0x72, 0x61, 0x63,
         0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x69, 0x6e, 0x20, 0x68,
         0x6f, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x6c, 0x65,
         0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x69,
         0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x20,
         0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x6b, 0x69, 0x6e, 0x67,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x31, 0x73, 0x74, 0x20,
         0x45, 0x61, 0x72, 0x6c, 0x20, 0x6f, 0x66, 0x63, 0x75, 0x6c, 0x74,
         0x75, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x69, 0x6e,
         0x63, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x2f, 0x74, 0x69,
         0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x79,
         0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x62, 0x61, 0x63, 0x6b,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x65, 0x78, 0x70, 0x6f,
         0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x65, 0x20,
         0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x64, 0x64, 0x46,
         0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x63, 0x69, 0x74, 0x69,
         0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x61, 0x72, 0x74,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x65, 0x6f, 0x70,
         0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x70,
         0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x74, 0x6f, 0x20, 0x63,
         0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x26, 0x61, 0x6d, 0x70,
         0x3b, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x3b, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x76, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
         0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x79,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x6c, 0x75,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x69, 0x6e, 0x20, 0x68,
         0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x6f, 0x72, 0x65,
         0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x66, 0x6f, 0x6c, 0x6c,
         0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x65, 0x61,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x73,
         0x65, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x26, 0x6e, 0x62, 0x73,
         0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x6e, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20,
         0x69, 0x64, 0x65, 0x61, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x63, 0x68,
         0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x77, 0x65, 0x72, 0x65,
         0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x6e, 0x64, 0x61, 0x79, 0x73,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x65, 0x61, 0x74,
         0x75, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x68, 0x6f, 0x77,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x20, 0x70,
         0x6c, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x75, 0x72, 0x6e,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x4c, 0x6f, 0x72, 0x64,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x6c, 0x69,
         0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x73, 0x20,
         0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x45, 0x64, 0x75, 0x63,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x73, 0x6f, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x61, 0x63, 0x68,
         0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x62, 0x65, 0x68, 0x61,
         0x76, 0x69, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20,
         0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x70, 0x65,
         0x61, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f,
         0x72, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x62, 0x6c, 0x61, 0x63,
         0x6b, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61, 0x79, 0x20,
         0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x63, 0x61, 0x6e, 0x20,
         0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x65,
         0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6e, 0x6e,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x75,
         0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69,
         0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x57, 0x61, 0x73, 0x68,
         0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x74, 0x68, 0x65, 0x20,
         0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x69, 0x74, 0x79,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x64,
         0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x72, 0x65, 0x66, 0x6c,
         0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x63,
         0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x62, 0x65, 0x63, 0x61,
         0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x64, 0x69,
         0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x72, 0x65, 0x6a, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x77, 0x69, 0x74, 0x68,
         0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x68, 0x69, 0x73, 0x20,
         0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x63, 0x6f, 0x70, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x69,
         0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61, 0x20, 0x70, 0x6f,
         0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x77, 0x6f, 0x72, 0x6b,
         0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x65, 0x72, 0x3c, 0x2f,
         0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x6f, 0x66, 0x20, 0x68,
         0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x61, 0x63, 0x63, 0x6f,
         0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x65,
         0x6e, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x70, 0x72, 0x65, 0x76,
         0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x65, 0x67, 0x69,
         0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x74, 0x6f, 0x67, 0x65,
         0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x73, 0x20,
         0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x20,
         0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75,
         0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x6e,
         0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x75, 0x73, 0x75, 0x61,
         0x6c, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6c, 0x61, 0x63,
         0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x65, 0x72,
         0x65, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x20, 0x3c, 0x61,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x6d,
         0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2c, 0x61, 0x6c, 0x74, 0x68,
         0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x65, 0x74, 0x68, 0x61, 0x74,
         0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x72, 0x61, 0x64,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x72, 0x6f, 0x6c, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61,
         0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x72, 0x65, 0x6d, 0x6f,
         0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x64, 0x65, 0x73, 0x69,
         0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x77, 0x65, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x53, 0x6f, 0x6d, 0x65,
         0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x64,
         0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x73, 0x69, 0x64, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x77, 0x73,
         0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x75, 0x73, 0x65, 0x64,
         0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x77, 0x6e,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x65,
         0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6c, 0x69, 0x76, 0x65,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x74, 0x65,
         0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x73,
         0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x66, 0x72, 0x65, 0x71,
         0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x48, 0x6f, 0x77, 0x65,
         0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67,
         0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x61, 0x74, 0x20, 0x6c,
         0x65, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68,
         0x6f, 0x75, 0x67, 0x68, 0x20, 0x69, 0x74, 0x77, 0x61, 0x73, 0x20,
         0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20,
         0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
         0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x74, 0x75, 0x72, 0x6e,
         0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x3e, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20,
         0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x69, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x77, 0x6f, 0x75, 0x6c,
         0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20,
         0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x72, 0x69, 0x73, 0x65,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x63, 0x63, 0x75,
         0x72, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x75, 0x6e, 0x64, 0x65,
         0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x64,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x68, 0x65, 0x20,
         0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74, 0x68, 0x65, 0x6f,
         0x72, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20, 0x70,
         0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x77,
         0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6e,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x62, 0x75, 0x69, 0x6c,
         0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6e, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x61, 0x72, 0x65, 0x61,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x65, 0x78, 0x74, 0x65,
         0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74,
         0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x73,
         0x70, 0x61, 0x6e, 0x3d, 0x32, 0x20, 0x7c, 0x73, 0x68, 0x6f, 0x72,
         0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x6f, 0x73, 0x73,
         0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x6f, 0x70, 0x6f,
         0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x72, 0x69, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f,
         0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x43, 0x68,
         0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x63, 0x69,
         0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x65,
         0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x62,
         0x6c, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x54, 0x68, 0x69, 0x73,
         0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x72, 0x63,
         0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x20,
         0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x20, 0x65,
         0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x65, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x65, 0x6c, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x26, 0x71, 0x75, 0x6f,
         0x74, 0x3b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x2f,
         0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x72, 0x65, 0x6d, 0x61,
         0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x69, 0x74, 0x65,
         0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x69, 0x73, 0x20, 0x61,
         0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65, 0x20,
         0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x62,
         0x6c, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x66, 0x65,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x62, 0x6f, 0x64, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x66, 0x65,
         0x77, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x75, 0x63, 0x68,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x43, 0x61, 0x6c, 0x69,
         0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x2c, 0x73, 0x65, 0x72, 0x76,
         0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x63,
         0x65, 0x70, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x76, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x09, 0x09, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x74, 0x22, 0x20,
         0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x6c, 0x61, 0x6e, 0x67,
         0x75, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64,
         0x75, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x73, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x70, 0x6c,
         0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x76, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x48, 0x6f, 0x77, 0x65,
         0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x65, 0x61, 0x64,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x09, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x77, 0x61, 0x73, 0x20,
         0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x70, 0x65, 0x6f, 0x70,
         0x6c, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x74,
         0x69, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20,
         0x73, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x61, 0x6e, 0x64, 0x20,
         0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,
         0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x70, 0x72, 0x6f, 0x70,
         0x6f, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x62, 0x65, 0x73, 0x74, 0x65, 0x61, 0x63, 0x68,
         0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
         0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x6f, 0x70,
         0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x61, 0x6c,
         0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x6f, 0x20, 0x72,
         0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x77, 0x61, 0x73, 0x20,
         0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x20, 0x73, 0x6f,
         0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
         0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x61, 0x75, 0x6e,
         0x63, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x76,
         0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x77, 0x65, 0x73, 0x74, 0x77, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x62, 0x65, 0x74, 0x77,
         0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x69, 0x73, 0x20, 0x61,
         0x6c, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6e, 0x67, 0x6c,
         0x69, 0x73, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x64,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x74, 0x68, 0x61, 0x74,
         0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x65, 0x6e, 0x74, 0x69,
         0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x6d,
         0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6e,
         0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x6e, 0x73,
         0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x68, 0x65, 0x20,
         0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x6a,
         0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e,
         0x74, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x68, 0x69, 0x73,
         0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x69, 0x73,
         0x20, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x73, 0x74,
         0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x74,
         0x72, 0x61, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x6c, 0x61, 0x73, 0x74,
         0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x74, 0x68, 0x72, 0x6f,
         0x75, 0x67, 0x68, 0x20, 0x68, 0x69, 0x73, 0x69, 0x73, 0x20, 0x64,
         0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,
         0x74, 0x65, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x69, 0x73, 0x20, 0x70,
         0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74,
         0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x67, 0x3c, 0x2f,
         0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x54, 0x68, 0x65, 0x20,
         0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x65, 0x20,
         0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x73, 0x75, 0x62, 0x73,
         0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x74, 0x68, 0x65, 0x79,
         0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x6c, 0x6f, 0x76,
         0x65, 0x6e, 0xc4, 0x8d, 0x69, 0x6e, 0x61, 0x63, 0x6f, 0x6d, 0x65,
         0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x75, 0x6e, 0x69, 0x76,
         0x65, 0x72, 0x73, 0x69, 0x64, 0x61, 0x64, 0x63, 0x6f, 0x6e, 0x64,
         0x69, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x61, 0x63, 0x74, 0x69,
         0x76, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x65, 0x78, 0x70, 0x65,
         0x72, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x65, 0x63, 0x6e,
         0x6f, 0x6c, 0x6f, 0x67, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x6f, 0x64,
         0x75, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x75, 0x6e, 0x74,
         0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x61, 0x70, 0x6c, 0x69,
         0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
         0x72, 0x61, 0x73, 0x65, 0xc3, 0xb1, 0x61, 0x63, 0x61, 0x74, 0x65,
         0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x73, 0x72, 0x65, 0x67, 0x69,
         0x73, 0x74, 0x72, 0x61, 0x72, 0x73, 0x65, 0x70, 0x72, 0x6f, 0x66,
         0x65, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x74,
         0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x67, 0xc3,
         0xad, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x73, 0x65, 0x63, 0x72,
         0x65, 0x74, 0x61, 0x72, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x69, 0x6e,
         0x63, 0x69, 0x70, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x74,
         0x65, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x6f,
         0x72, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6f,
         0x72, 0x74, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x70, 0x6f, 0x73, 0x69,
         0x62, 0x69, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x63, 0x72, 0x65, 0x63,
         0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65,
         0x73, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0x75, 0x73, 0x63,
         0x72, 0x69, 0x62, 0x69, 0x72, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x63,
         0x69, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x64, 0x69, 0x73, 0x70,
         0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x65, 0x76, 0x61, 0x6c,
         0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x73, 0x74, 0x75,
         0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x72, 0x65, 0x73, 0x70,
         0x6f, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x6f,
         0x6c, 0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x67, 0x75, 0x61, 0x64,
         0x61, 0x6c, 0x61, 0x6a, 0x61, 0x72, 0x61, 0x72, 0x65, 0x67, 0x69,
         0x73, 0x74, 0x72, 0x61, 0x64, 0x6f, 0x73, 0x6f, 0x70, 0x6f, 0x72,
         0x74, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x63, 0x6f, 0x6d, 0x65,
         0x72, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x74, 0x6f,
         0x67, 0x72, 0x61, 0x66, 0xc3, 0xad, 0x61, 0x61, 0x75, 0x74, 0x6f,
         0x72, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x67, 0x65,
         0x6e, 0x69, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x74, 0x65, 0x6c, 0x65,
         0x76, 0x69, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
         0x65, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x6f, 0x70, 0x65, 0x72,
         0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x73, 0x74, 0x61,
         0x62, 0x6c, 0x65, 0x63, 0x69, 0x64, 0x6f, 0x73, 0x69, 0x6d, 0x70,
         0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63, 0x74, 0x75,
         0x61, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x76, 0x65,
         0x67, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
         0x6f, 0x72, 0x6d, 0x69, 0x64, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
         0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x66, 0x6f, 0x6e,
         0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x3a, 0x22, 0x20,
         0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61,
         0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
         0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c,
         0x6c, 0x79, 0x2f, 0x2f, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54,
         0x41, 0x5b, 0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
         0x75, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x68,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x64, 0x65, 0x76, 0x69,
         0x63, 0x65, 0x2d, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3c, 0x64, 0x69,
         0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x6c,
         0x61, 0x62, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d, 0x22, 0x72,
         0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
         0x0a, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d,
         0x6c, 0x22, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x6f, 0x70,
         0x65, 0x6e, 0x28, 0x20, 0x21, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
         0x61, 0x6e, 0x74, 0x3b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65,
         0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x2f, 0x77, 0x77, 0x77,
         0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6f, 0x72, 0x67, 0x61,
         0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74,
         0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x65,
         0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63,
         0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
         0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
         0x22, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x75,
         0x61, 0x6c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65,
         0x66, 0x74, 0x3a, 0x31, 0x38, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
         0x74, 0x75, 0x72, 0x79, 0x61, 0x6e, 0x20, 0x69, 0x6d, 0x70, 0x6f,
         0x72, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
         0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72, 0x65,
         0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x69, 0x6d, 0x67,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x72, 0x67,
         0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x69,
         0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31,
         0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
         0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
         0x65, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
         0x65, 0x64, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74,
         0x75, 0x72, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
         0x65, 0x72, 0x22, 0x3e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x6f,
         0x74, 0x61, 0x62, 0x6c, 0x79, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
         0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x75, 0x6e, 0x64,
         0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x27, 0x29, 0x46, 0x75, 0x72,
         0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x2c, 0x62, 0x65,
         0x6c, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69,
         0x6e, 0x6e, 0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x3d, 0x20,
         0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
         0x65, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
         0x6c, 0x79, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67,
         0x20, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61,
         0x72, 0x74, 0x65, 0x72, 0x73, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20,
         0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x75, 0x6e, 0x73, 0x75, 0x63,
         0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50, 0x65, 0x6e, 0x6e,
         0x73, 0x79, 0x6c, 0x76, 0x61, 0x6e, 0x69, 0x61, 0x41, 0x73, 0x20,
         0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x3c, 0x68,
         0x74, 0x6d, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x26,
         0x6c, 0x74, 0x3b, 0x2f, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b,
         0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x70, 0x68, 0x69, 0x6c, 0x61, 0x64, 0x65, 0x6c, 0x70, 0x68,
         0x69, 0x61, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
         0x6c, 0x6c, 0x79, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x3e, 0x0a, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
         0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
         0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x67, 0x65, 0x74, 0x41, 0x74,
         0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x74,
         0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x63,
         0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x70, 0x61,
         0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3d,
         0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b,
         0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x6c, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
         0x68, 0x74, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
         0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
         0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
         0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x67, 0x72, 0x69, 0x63,
         0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x75, 0x62,
         0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x6f,
         0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x31, 0x61,
         0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66,
         0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
         0x22, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
         0x69, 0x61, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x72,
         0x63, 0x3d, 0x22, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72,
         0x61, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
         0x69, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
         0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x67,
         0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x29, 0x3b, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x64, 0x65, 0x64,
         0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x6e,
         0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x73,
         0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c,
         0x79, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28,
         0x55, 0x53, 0x29, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68,
         0x69, 0x6c, 0x64, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
         0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x48, 0x6f, 0x77,
         0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6c,
         0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x74, 0x61,
         0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x66, 0x6c, 0x6f,
         0x61, 0x74, 0x3a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x43, 0x6f,
         0x6d, 0x6d, 0x6f, 0x6e, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72,
         0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d,
         0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68,
         0x65, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f,
         0x6e, 0x65, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70,
         0x65, 0x64, 0x69, 0x61, 0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,
         0x69, 0x7a, 0x65, 0x3a, 0x31, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
         0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x3c, 0x61,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x49, 0x6e, 0x20,
         0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x64, 0x65,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2b, 0x63,
         0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
         0x6c, 0x79, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x74, 0x3d, 0x22, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
         0x74, 0x69, 0x6e, 0x67, 0x26, 0x6c, 0x74, 0x3b, 0x6d, 0x61, 0x74,
         0x68, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
         0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x63, 0x63, 0x61, 0x73,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x69, 0x6d, 0x67,
         0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x6e, 0x61, 0x76,
         0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x63, 0x6f,
         0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63,
         0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
         0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x61, 0x6c, 0x6c, 0x22,
         0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x6f, 0x66, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
         0x20, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74,
         0x72, 0x75, 0x65, 0x3b, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2f,
         0x2f, 0x45, 0x4e, 0x22, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x72,
         0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x69,
         0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
         0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69,
         0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x43,
         0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
         0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
         0x73, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d,
         0x2d, 0x3e, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x0a, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61,
         0x6e, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61,
         0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
         0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x72, 0x65, 0x73, 0x74, 0x72,
         0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x67, 0x67,
         0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x77, 0x61, 0x73,
         0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x28, 0x73,
         0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72,
         0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28,
         0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
         0x74, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63,
         0x61, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
         0x20, 0x6f, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68,
         0x74, 0x6d, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
         0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x72,
         0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c,
         0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x63, 0x6c,
         0x61, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63,
         0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
         0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
         0x22, 0x47, 0x75, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d,
         0x69, 0x6e, 0x67, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
         0x72, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x0a, 0x2e, 0x6e, 0x6f, 0x6e,
         0x74, 0x6f, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72,
         0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x61, 0x3e,
         0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x66, 0x20, 0x28,
         0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f,
         0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x31, 0x70, 0x78, 0x20, 0x7b,
         0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31,
         0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f,
         0x66, 0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
         0x22, 0x31, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
         0x65, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64,
         0x20, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65,
         0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x63, 0x68, 0x69, 0x65,
         0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x74, 0x61,
         0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4a, 0x61, 0x76,
         0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6e, 0x65,
         0x76, 0x65, 0x72, 0x74, 0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x73,
         0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65,
         0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e,
         0x67, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74,
         0x64, 0x3e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
         0x22, 0x3e, 0x0a, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
         0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
         0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x72, 0x63, 0x3d, 0x27,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x61, 0x76, 0x69,
         0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x61, 0x6c,
         0x66, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75,
         0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x26,
         0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f,
         0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20,
         0x6f, 0x66, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,
         0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c,
         0x69, 0x74, 0x61, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x70,
         0x6f, 0x73, 0x69, 0x74, 0x65, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a,
         0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x64, 0x65, 0x6c, 0x69, 0x62,
         0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x61, 0x6c, 0x69, 0x67,
         0x6e, 0x3d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x76, 0x6f,
         0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x72,
         0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
         0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
         0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69,
         0x6e, 0x4a, 0x65, 0x73, 0x75, 0x73, 0x20, 0x43, 0x68, 0x72, 0x69,
         0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c,
         0x69, 0x67, 0x6e, 0x3a, 0x72, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x73, 0x69, 0x6d, 0x69, 0x6c,
         0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x6f, 0x64, 0x79,
         0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x69, 0x73, 0x20,
         0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x6c,
         0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
         0x73, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65,
         0x2f, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64,
         0x65, 0x6e, 0x3b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
         0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
         0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f,
         0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x09, 0x3c, 0x75,
         0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e,
         0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
         0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64,
         0x61, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65,
         0x73, 0x72, 0x65, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74,
         0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x73,
         0x20, 0x74, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x74, 0x68, 0x65, 0x6c,
         0x65, 0x73, 0x73, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
         0x74, 0x75, 0x72, 0x65, 0x73, 0x0a, 0x09, 0x09, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6c, 0x6f, 0x73, 0x65,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d,
         0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x73, 0x20,
         0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x28, 0x73,
         0x65, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x29, 0x2e, 0x22,
         0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
         0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
         0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,
         0x69, 0x61, 0x6c, 0x09, 0x09, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x09, 0x09, 0x3c, 0x64, 0x69, 0x76,
         0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
         0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x75,
         0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x61, 0x6c, 0x6c,
         0x20, 0x6f, 0x66, 0x20, 0x46, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72,
         0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69,
         0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
         0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78, 0x74,
         0x2f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61,
         0x72, 0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f,
         0x72, 0x6c, 0x64, 0x76, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6f, 0x70,
         0x75, 0x6c, 0x61, 0x72, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
         0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
         0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70,
         0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d,
         0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x63,
         0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
         0x41, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f,
         0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e,
         0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
         0x72, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x3e, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x3c, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
         0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x65, 0x63, 0x61, 0x75,
         0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20,
         0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x69,
         0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x77, 0x69,
         0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
         0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
         0x09, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
         0x61, 0x6c, 0x53, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x20, 0x55, 0x6e,
         0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
         0x64, 0x67, 0x65, 0x64, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63,
         0x61, 0x6e, 0x20, 0x62, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66,
         0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6e,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x65,
         0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x76,
         0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
         0x20, 0x66, 0x61, 0x63, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x3c,
         0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x61,
         0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66,
         0x6f, 0x72, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x7a, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
         0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
         0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20,
         0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x72, 0x65,
         0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
         0x6f, 0x72, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x73,
         0x69, 0x6e, 0x20, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65,
         0x72, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
         0x63, 0x65, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x70, 0x78, 0x3b, 0x20, 0x68, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3a, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
         0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
         0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x68, 0x75, 0x6d, 0x61, 0x6e,
         0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61, 0x76, 0x61,
         0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x72,
         0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6f,
         0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61,
         0x6c, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x69, 0x6e,
         0x67, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x20, 0x69, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x62, 0x61, 0x73,
         0x65, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65,
         0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x20, 0x70, 0x65, 0x72,
         0x73, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x6f, 0x65, 0x78, 0x70, 0x61,
         0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x67,
         0x75, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6e, 0x6f,
         0x77, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x49,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79,
         0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
         0x65, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72,
         0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x61, 0x76,
         0x69, 0x61, 0x6e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x0d, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
         0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x65, 0x73, 0x74,
         0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x4e,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3c, 0x64, 0x69, 0x76,
         0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x72, 0x65, 0x73,
         0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f,
         0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61,
         0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x73, 0x20, 0x74, 0x6f,
         0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
         0x64, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0a, 0x77, 0x61, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64,
         0x20, 0x6f, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61,
         0x6d, 0x65, 0x20, 0x61, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
         0x6e, 0x62, 0x73, 0x70, 0x3b, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c,
         0x75, 0x65, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63,
         0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x6e, 0x6f, 0x20, 0x6d,
         0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x72, 0x65, 0x73,
         0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x63, 0x6f,
         0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x3e,
         0x0d, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
         0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
         0x64, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
         0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
         0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
         0x64, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6d,
         0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
         0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x63,
         0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f,
         0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
         0x65, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
         0x63, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
         0x70, 0x6c, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
         0x69, 0x76, 0x65, 0x6c, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
         0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d,
         0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x69, 0x74, 0x73, 0x20,
         0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x74,
         0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x68,
         0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61,
         0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
         0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68,
         0x65, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e,
         0x6f, 0x74, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69, 0x73,
         0x6d, 0x20, 0x6f, 0x66, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
         0x77, 0x68, 0x69, 0x63, 0x68, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
         0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x73, 0x20,
         0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x28, 0x66, 0x75, 0x6e,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x49, 0x74, 0x20,
         0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x61, 0x6e,
         0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
         0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79,
         0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f,
         0x6d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
         0x72, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x6b, 0x6e,
         0x6f, 0x77, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
         0x63, 0x65, 0x20, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x73, 0x6f, 0x75, 0x74,
         0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73,
         0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x78, 0x6d,
         0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x77,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b,
         0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f,
         0x6e, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63,
         0x3d, 0x22, 0x2f, 0x69, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
         0x57, 0x61, 0x72, 0x20, 0x49, 0x49, 0x74, 0x65, 0x73, 0x74, 0x69,
         0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71,
         0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
         0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x62,
         0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65,
         0x64, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f,
         0x66, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61,
         0x62, 0x6c, 0x79, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
         0x64, 0x20, 0x62, 0x79, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x6e,
         0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x72,
         0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
         0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65,
         0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x63,
         0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x73,
         0x73, 0x22, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x50,
         0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
         0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f,
         0x6e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
         0x62, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x22, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77,
         0x6e, 0x20, 0x61, 0x73, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69,
         0x65, 0x73, 0x20, 0x6f, 0x66, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,
         0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72,
         0x69, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73, 0x75, 0x70, 0x70,
         0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e,
         0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f,
         0x75, 0x70, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63,
         0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20,
         0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x6e, 0x6f, 0x6e, 0x65,
         0x3b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
         0x65, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62, 0x65,
         0x69, 0x6e, 0x67, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65,
         0x63, 0x61, 0x6d, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20,
         0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x72, 0x65, 0x73, 0x69, 0x64,
         0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x6e,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x3e, 0x3c, 0x6c,
         0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x76,
         0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x65,
         0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
         0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c,
         0x6f, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
         0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x20, 0x77, 0x69, 0x64, 0x65,
         0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x20, 0x62, 0x65,
         0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x6c, 0x69,
         0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x70, 0x72, 0x69,
         0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x3c,
         0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d,
         0x73, 0x61, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76,
         0x65, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72,
         0x73, 0x74, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x74, 0x68,
         0x65, 0x72, 0x73, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
         0x70, 0x68, 0x65, 0x72, 0x73, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61,
         0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x65, 0x72, 0x66,
         0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x61,
         0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x77, 0x65,
         0x72, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73,
         0x70, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
         0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
         0x22, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
         0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
         0x66, 0x6f, 0x72, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73,
         0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73,
         0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x77, 0x61, 0x73, 0x20,
         0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x6c, 0x69, 0x6e,
         0x6b, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x70, 0x72,
         0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x69,
         0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65,
         0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c,
         0x61, 0x73, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20,
         0x77, 0x69, 0x74, 0x68, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20,
         0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x69, 0x73, 0x20,
         0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x63, 0x72,
         0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6e, 0x74,
         0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65,
         0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x61,
         0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79,
         0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x3e, 0x0a, 0x0a, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72,
         0x74, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x70, 0x61, 0x63, 0x69,
         0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x73, 0x75, 0x66, 0x66,
         0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x74, 0x68, 0x65,
         0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x63, 0x6f,
         0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63,
         0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
         0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76,
         0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
         0x6c, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
         0x65, 0x78, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
         0x63, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75,
         0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x65, 0x20, 0x70,
         0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20,
         0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x73,
         0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x69,
         0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73,
         0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65,
         0x73, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x61,
         0x3e, 0x0a, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
         0x61, 0x73, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64,
         0x64, 0x69, 0x6e, 0x67, 0x3d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72,
         0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x73, 0x65, 0x70,
         0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x73,
         0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x73,
         0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
         0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f,
         0x66, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x77, 0x65, 0x73, 0x74, 0x65,
         0x72, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x0d, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
         0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6e,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x20, 0x73,
         0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x70, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x61,
         0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74, 0x74,
         0x68, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74,
         0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x75, 0x72,
         0x61, 0x6c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
         0x20, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x6e, 0x74, 0x69,
         0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e,
         0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d,
         0x70, 0x61, 0x6e, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20,
         0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x76, 0x61,
         0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x74, 0x73, 0x74,
         0x75, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6f,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
         0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x52, 0x69, 0x67, 0x68,
         0x74, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
         0x68, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
         0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x64, 0x65, 0x66, 0x65, 0x61,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20,
         0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x62, 0x75, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f,
         0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x73,
         0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x67,
         0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20,
         0x6f, 0x66, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e,
         0x20, 0x74, 0x68, 0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68,
         0x65, 0x20, 0x77, 0x61, 0x73, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x74, 0x68, 0x65, 0x72, 0x65,
         0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x68, 0x65, 0x20,
         0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x65, 0x78,
         0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74,
         0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65,
         0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65,
         0x72, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68,
         0x74, 0x3a, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
         0x20, 0x6f, 0x66, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
         0x6e, 0x73, 0x22, 0x3e, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45,
         0x6d, 0x70, 0x69, 0x72, 0x65, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20,
         0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x49, 0x6e, 0x20, 0x63, 0x6f,
         0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x2c, 0x68, 0x6f, 0x77, 0x65,
         0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x20,
         0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x6e,
         0x64, 0x20, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x66, 0x65, 0x28,
         0x61, 0x6c, 0x73, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
         0x3e, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c,
         0x79, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20, 0x69,
         0x6e, 0x74, 0x6f, 0x73, 0x65, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20,
         0x68, 0x61, 0x76, 0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69,
         0x73, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20,
         0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x61, 0x6e, 0x20, 0x65, 0x78,
         0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x64, 0x65, 0x73,
         0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x62, 0x79, 0x49, 0x6e,
         0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2c, 0x62,
         0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
         0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
         0x69, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
         0x20, 0x74, 0x6f, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79,
         0x20, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
         0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x73, 0x65, 0x74, 0x54, 0x61,
         0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x72, 0x65, 0x20,
         0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x76, 0x69, 0x63,
         0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x28, 0x29,
         0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63,
         0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79,
         0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f,
         0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x72, 0x79, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
         0x69, 0x76, 0x65, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
         0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x20, 0x6f, 0x74,
         0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x73, 0x6f, 0x6d, 0x65,
         0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x64,
         0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x67, 0x65,
         0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x69,
         0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
         0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74,
         0x6f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
         0x6e, 0x74, 0x2c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
         0x69, 0x6e, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65,
         0x76, 0x69, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
         0x74, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b,
         0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x69,
         0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x67, 0x69,
         0x76, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x74,
         0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66,
         0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
         0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20,
         0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f,
         0x72, 0x74, 0x68, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x69, 0x72, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73,
         0x69, 0x67, 0x6e, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x61, 0x73, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x65, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x6f, 0x72,
         0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x75,
         0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73,
         0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d,
         0x69, 0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
         0x74, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
         0x62, 0x79, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
         0x66, 0x6f, 0x72, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
         0x70, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x73,
         0x73, 0x69, 0x62, 0x6c, 0x79, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
         0x72, 0x64, 0x69, 0x7a, 0x65, 0x64, 0x72, 0x65, 0x73, 0x70, 0x6f,
         0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x77, 0x61, 0x73, 0x20,
         0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63,
         0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73,
         0x73, 0x75, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61,
         0x72, 0x65, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x69,
         0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69, 0x73, 0x20,
         0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
         0x6e, 0x73, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
         0x20, 0x66, 0x6f, 0x72, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
         0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61,
         0x73, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x77, 0x61, 0x73, 0x20, 0x64,
         0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x63, 0x6f, 0x75, 0x6c,
         0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x53, 0x65, 0x63,
         0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x70,
         0x70, 0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6d,
         0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31,
         0x2f, 0x5e, 0x5c, 0x73, 0x2b, 0x7c, 0x5c, 0x73, 0x2b, 0x24, 0x2f,
         0x67, 0x65, 0x29, 0x7b, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x20, 0x65,
         0x7d, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
         0x20, 0x6f, 0x66, 0x74, 0x77, 0x6f, 0x20, 0x73, 0x65, 0x70, 0x61,
         0x72, 0x61, 0x74, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
         0x65, 0x20, 0x61, 0x6e, 0x64, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61,
         0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x61, 0x74,
         0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61,
         0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x09, 0x3c,
         0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x70,
         0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
         0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f,
         0x66, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28,
         0x55, 0x4b, 0x29, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20,
         0x28, 0x55, 0x53, 0x29, 0xd0, 0x9c, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
         0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xa1, 0xd1, 0x80, 0xd0, 0xbf,
         0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0,
         0xbf, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80,
         0xd0, 0xbf, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd9, 0x84, 0xd8,
         0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xe6, 0xad,
         0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7,
         0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,
         0xe7, 0xb9, 0x81, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96,
         0x87, 0xe6, 0x9c, 0x89, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0xac, 0xe5,
         0x8f, 0xb8, 0xe4, 0xba, 0xba, 0xe6, 0xb0, 0x91, 0xe6, 0x94, 0xbf,
         0xe5, 0xba, 0x9c, 0xe9, 0x98, 0xbf, 0xe9, 0x87, 0x8c, 0xe5, 0xb7,
         0xb4, 0xe5, 0xb7, 0xb4, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc, 0x9a, 0xe4,
         0xb8, 0xbb, 0xe4, 0xb9, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
         0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x94, 0xbf, 0xe7, 0xad,
         0x96, 0xe6, 0xb3, 0x95, 0xe8, 0xa7, 0x84, 0x69, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x68, 0x65, 0x72,
         0x72, 0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x65, 0x6c,
         0x65, 0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69, 0x63, 0x6f, 0x64,
         0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
         0x63, 0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f,
         0x73, 0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e,
         0x74, 0x6f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69,
         0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69, 0x6f, 0x6e,
         0x61, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0xc3,
         0xa1, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69,
         0x6f, 0x6e, 0x61, 0x64, 0x6f, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72,
         0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x74, 0x72, 0x61, 0x62,
         0x61, 0x6a, 0x61, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x69, 0x72,
         0x65, 0x63, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x79,
         0x75, 0x6e, 0x74, 0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x6d,
         0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x4c, 0x69, 0x62, 0x72, 0x65,
         0x63, 0x6f, 0x6e, 0x74, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x6e, 0x6f,
         0x73, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e,
         0x65, 0x73, 0x63, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x65,
         0x6e, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61,
         0x6e, 0x74, 0x65, 0x73, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
         0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
         0x75, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x6c, 0x65, 0x63, 0x74,
         0x72, 0xc3, 0xb3, 0x6e, 0x69, 0x63, 0x61, 0x61, 0x70, 0x6c, 0x69,
         0x63, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x64, 0x65, 0x73,
         0x63, 0x6f, 0x6e, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x69, 0x6e,
         0x73, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72,
         0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
         0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x63, 0x69, 0xc3, 0xb3,
         0x6e, 0x65, 0x6e, 0x63, 0x69, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64,
         0x69, 0x61, 0x65, 0x6e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x61,
         0x64, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
         0x6e, 0x74, 0x6f, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
         0x6e, 0x63, 0x69, 0x61, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74,
         0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x73, 0x75, 0x62, 0x63,
         0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0xd1, 0x82, 0xd0,
         0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xa0,
         0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1,
         0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b,
         0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x88, 0xd0,
         0xb5, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1,
         0x82, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3,
         0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1,
         0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9,
         0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x81, 0xd0,
         0xb5, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xa0, 0xd0, 0xbe,
         0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x9c, 0xd0,
         0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,
         0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0,
         0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0,
         0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1,
         0x81, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b,
         0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0,
         0xbd, 0xd1, 0x8b, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd,
         0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0,
         0xba, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb1,
         0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1,
         0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,
         0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80,
         0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
         0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd,
         0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,
         0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80,
         0xd1, 0x8c, 0xd0, 0x9e, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
         0xba, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe,
         0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0,
         0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80,
         0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
         0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb4,
         0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0,
         0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81,
         0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb8, 0xd0,
         0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb9,
         0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,
         0xb5, 0xd1, 0x85, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x88,
         0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
         0xb8, 0xd0, 0xb2, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb,
         0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0,
         0xb4, 0xd1, 0x8b, 0xd0, 0xb9, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb0,
         0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1,
         0x83, 0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xbc,
         0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
         0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x81,
         0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
         0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9,
         0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd1,
         0x8c, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd0, 0xb3,
         0xd0, 0xb8, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
         0xbe, 0xd0, 0xb4, 0xd0, 0xb1, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd,
         0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbd, 0xd0,
         0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xbc,
         0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x83, 0xd0,
         0xbf, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe,
         0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
         0xb0, 0xd0, 0xbc, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0xd0, 0xbd,
         0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
         0xa0, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb0,
         0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0,
         0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,
         0xd0, 0xbc, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
         0xbe, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0,
         0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1,
         0x81, 0xd0, 0xbe, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83,
         0xd0, 0xb6, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81, 0xd0, 0xb8, 0xd1,
         0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0, 0xb5,
         0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
         0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd0, 0xb8, 0xd1,
         0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2,
         0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1,
         0x83, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x89,
         0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0,
         0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb,
         0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81, 0xd1,
         0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd,
         0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0,
         0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xbf, 0xd1, 0x80,
         0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xa1, 0xd0,
         0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbc,
         0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1,
         0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe,
         0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0,
         0xbd, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4,
         0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x81, 0xd0,
         0xb8, 0xd1, 0x8f, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
         0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1,
         0x8c, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe,
         0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
         0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xb8, 0xd1, 0x81,
         0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0,
         0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x8f,
         0xd0, 0xbd, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8f, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5,
         0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1,
         0x85, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe,
         0xd0, 0xb9, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0,
         0xb8, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c,
         0xd0, 0xb7, 0xd1, 0x8f, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
         0x83, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xbf,
         0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
         0x81, 0xd1, 0x8f, 0xd1, 0x86, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0,
         0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0x9b, 0xd1,
         0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb5, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2,
         0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
         0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xac,
         0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x9f, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa4, 0x9f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xad, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82,
         0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4,
         0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x85, 0xe0,
         0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,
         0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x9d, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3,
         0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
         0x9f, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5,
         0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x9c, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
         0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
         0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0,
         0xa4, 0x97, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88,
         0xe0, 0xa4, 0xa0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0x97,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
         0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0,
         0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
         0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,
         0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0x97, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb2,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x87, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x98, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xb6, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0x9a, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4,
         0xbc, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
         0x97, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x96, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x85,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4,
         0x9c, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5,
         0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4,
         0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa5, 0x80, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
         0x97, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
         0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa5, 0x8b, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0,
         0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4,
         0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xb2,
         0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb7,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0,
         0xa5, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8,
         0xaa, 0xd8, 0xb7, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb4,
         0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa8, 0xd9,
         0x88, 0xd8, 0xa7, 0xd8, 0xb3, 0xd8, 0xb7, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x81, 0xd8, 0xad, 0xd8, 0xa9, 0xd9,
         0x85, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb6, 0xd9, 0x8a, 0xd8, 0xb9,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb2, 0xd9, 0x8a,
         0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9,
         0x85, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xa7,
         0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,
         0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa8, 0xd8, 0xb1, 0xd9, 0x86,
         0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xaf, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd9,
         0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xb9,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x88, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x87, 0xd8, 0xa7,
         0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x8a, 0xd8,
         0xa7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x82,
         0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8,
         0xb1, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9,
         0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x82, 0xd9, 0x85, 0xd8, 0xad, 0xd9,
         0x81, 0xd9, 0x88, 0xd8, 0xb8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0xd9, 0x85, 0xd8,
         0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xa9, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xb1, 0xd8, 0xa2, 0xd9, 0x86,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8,
         0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x88, 0xd8, 0xa7,
         0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,
         0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb3,
         0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd9,
         0x84, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xac, 0xd9, 0x85,
         0xd9, 0x88, 0xd8, 0xb9, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x86, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xb7, 0xd9, 0x81, 0xd9,
         0x84, 0xd8, 0xb3, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa7,
         0xd8, 0xa8, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd9,
         0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xa7,
         0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
         0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xaa, 0xd9, 0x88, 0xd9, 0x82,
         0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9,
         0x88, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8,
         0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
         0x83, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb7, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xb4, 0xd8, 0xae, 0xd8, 0xb5, 0xd9, 0x8a, 0xd8, 0xb3,
         0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xab,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a,
         0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb2, 0xd9, 0x88, 0xd8,
         0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9, 0x84,
         0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9,
         0x85, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9,
         0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xac, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb9, 0xd8, 0xa9, 0xd9, 0x85, 0xd8,
         0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd9, 0x87, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xb3, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xae, 0xd9, 0x88, 0xd9, 0x84,
         0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd9, 0x8a, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7,
         0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd8,
         0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xb1,
         0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb3, 0xd8, 0xaa, 0xd8,
         0xba, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7,
         0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb9, 0xd8, 0xb8, 0xd9, 0x8a, 0xd9, 0x85, 0x65, 0x6e, 0x74,
         0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x75,
         0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
         0x67, 0x20, 0x3d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x28, 0x29, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x77, 0x69,
         0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
         0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67,
         0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x62,
         0x6f, 0x64, 0x79, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
         0x28, 0x29, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
         0x61, 0x72, 0x79, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20,
         0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75,
         0x6d, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x70,
         0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x6f,
         0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,
         0x72, 0x63, 0x3d, 0x22, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
         0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75,
         0x73, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f,
         0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
         0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69,
         0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x61, 0x73,
         0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d,
         0x61, 0x73, 0x73, 0x61, 0x63, 0x68, 0x75, 0x73, 0x65, 0x74, 0x74,
         0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b,
         0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x6e,
         0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61,
         0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x23, 0x66,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66,
         0x74, 0x3a, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
         0x6c, 0x65, 0x2c, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c,
         0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x26, 0x6c, 0x74, 0x3b, 0x2f,
         0x6d, 0x61, 0x74, 0x68, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x73, 0x79,
         0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x69,
         0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61,
         0x72, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x74, 0x79, 0x70,
         0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x65, 0x74,
         0x68, 0x6f, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x6f, 0x70, 0x70,
         0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x75, 0x70, 0x72,
         0x65, 0x6d, 0x65, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x6f, 0x63,
         0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20,
         0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
         0x79, 0x2c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65,
         0x72, 0x69, 0x63, 0x61, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b,
         0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x70, 0x6f, 0x72,
         0x74, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
         0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
         0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x73, 0x65,
         0x28, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
         0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
         0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x20,
         0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x63, 0x6f,
         0x6e, 0x73, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
         0x22, 0x20, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
         0x3d, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x61,
         0x6c, 0x73, 0x65, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69, 0x6f,
         0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x74,
         0x65, 0x72, 0x72, 0x61, 0x6e, 0x65, 0x61, 0x6e, 0x65, 0x78, 0x74,
         0x72, 0x61, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x61,
         0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
         0x6c, 0x79, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74,
         0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75,
         0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
         0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f,
         0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
         0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x64,
         0x69, 0x76, 0x3e, 0x0a, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
         0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x72, 0x65, 0x66, 0x77, 0x61, 0x73,
         0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53,
         0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63,
         0x6f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
         0x29, 0x7b, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73,
         0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x68,
         0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x2f, 0x68,
         0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79,
         0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
         0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x6d, 0x61, 0x79,
         0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x28,
         0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
         0x2c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63,
         0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
         0x63, 0x61, 0x73, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69,
         0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x47, 0x72,
         0x65, 0x61, 0x74, 0x20, 0x42, 0x72, 0x69, 0x74, 0x61, 0x69, 0x6e,
         0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
         0x67, 0x3d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
         0x74, 0x20, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
         0x6c, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x3b, 0x20, 0x66, 0x6f, 0x6e,
         0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x6a, 0x75, 0x73,
         0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62,
         0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61,
         0x74, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x20, 0x66,
         0x72, 0x6f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
         0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x28, 0x66,
         0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b,
         0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
         0x6c, 0x65, 0x0a, 0x09, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72,
         0x65, 0x6c, 0x3d, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68,
         0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
         0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e,
         0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x22,
         0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x22, 0x20, 0x2f, 0x3e, 0x3c,
         0x2f, 0x61, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
         0x6c, 0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
         0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70,
         0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72,
         0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x72,
         0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65,
         0x72, 0x3a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x3c, 0x2f, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77,
         0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x69, 0x66, 0x72, 0x61,
         0x6d, 0x65, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x74, 0x61, 0x62,
         0x6c, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69,
         0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
         0x3b, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
         0x74, 0x6f, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
         0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
         0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x70, 0x61, 0x72, 0x6c,
         0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x6d, 0x6f,
         0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65,
         0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e,
         0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
         0x61, 0x6c, 0x6c, 0x79, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69,
         0x6e, 0x61, 0x6e, 0x74, 0x6c, 0x79, 0x26, 0x6e, 0x62, 0x73, 0x70,
         0x3b, 0x7c, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62,
         0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20,
         0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
         0x3d, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d,
         0x65, 0x3d, 0x22, 0x6f, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
         0x76, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x70,
         0x65, 0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a, 0x2f, 0x78,
         0x2d, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x77, 0x61, 0x76, 0x65, 0x2d,
         0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65,
         0x64, 0x20, 0x62, 0x79, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68,
         0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6f, 0x6e,
         0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x41,
         0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
         0x6f, 0x74, 0x20, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61,
         0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6b, 0x6e,
         0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x74,
         0x65, 0x72, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
         0x6e, 0x63, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
         0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64,
         0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x61,
         0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
         0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x79,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74,
         0x68, 0x61, 0x74, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
         0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x69,
         0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x64, 0x69,
         0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20,
         0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x69,
         0x65, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x73, 0x65, 0x78, 0x75, 0x61,
         0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
         0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6d, 0x61, 0x6e,
         0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x6f,
         0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75,
         0x73, 0x65, 0x64, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
         0x63, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b,
         0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x20, 0x23, 0x6c, 0x65,
         0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69,
         0x63, 0x61, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65,
         0x72, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x72, 0x65, 0x76, 0x6f, 0x6c,
         0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x72, 0x69,
         0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x69,
         0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,
         0x64, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
         0x70, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x6f, 0x2d, 0x45, 0x75, 0x72,
         0x6f, 0x70, 0x65, 0x61, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
         0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70,
         0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72,
         0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73,
         0x63, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x20,
         0x43, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
         0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x74, 0x74, 0x72, 0x69,
         0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x75,
         0x72, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d,
         0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x69, 0x61,
         0x6e, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64,
         0x20, 0x6f, 0x66, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
         0x6e, 0x64, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68,
         0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x72,
         0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28,
         0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20,
         0x74, 0x68, 0x61, 0x74, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66,
         0x5d, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x69,
         0x74, 0x75, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74,
         0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72,
         0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79,
         0x2e, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x66,
         0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
         0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x54, 0x68,
         0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
         0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x20, 0x74,
         0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
         0x65, 0x20, 0x6f, 0x66, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e,
         0x64, 0x61, 0x73, 0x68, 0x3b, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
         0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
         0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
         0x74, 0x6c, 0x79, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
         0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
         0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6f,
         0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
         0x22, 0x2f, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67,
         0x65, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20,
         0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x65, 0x73, 0x65,
         0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x72, 0x65, 0x67,
         0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x63,
         0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
         0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
         0x74, 0x69, 0x6d, 0x65, 0x73, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
         0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f, 0x64, 0x79,
         0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x74, 0x68,
         0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
         0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x6f, 0x66, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
         0x74, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
         0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x63, 0x65, 0x73,
         0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20,
         0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x20, 0x74, 0x6f, 0x70,
         0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6a, 0x71, 0x75,
         0x65, 0x72, 0x79, 0x74, 0x77, 0x6f, 0x20, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x73, 0x74, 0x61,
         0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65,
         0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
         0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
         0x22, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
         0x20, 0x74, 0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
         0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x72,
         0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x64,
         0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x09,
         0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
         0x6e, 0x6c, 0x79, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x77, 0x61, 0x73, 0x20,
         0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x26,
         0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x20,
         0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
         0x63, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x65, 0x61,
         0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x66, 0x61, 0x63,
         0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6f,
         0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e,
         0x74, 0x6c, 0x79, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f,
         0x76, 0x65, 0x72, 0x3d, 0x22, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x73, 0x79, 0x6e,
         0x63, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x70, 0x72,
         0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x73, 0x65, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61,
         0x76, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
         0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
         0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
         0x69, 0x61, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x6f, 0x73,
         0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66,
         0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x29, 0x20,
         0x7b, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65,
         0x20, 0x69, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65,
         0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
         0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x69, 0x73,
         0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64,
         0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d,
         0x70, 0x74, 0x67, 0x72, 0x65, 0x61, 0x74, 0x20, 0x64, 0x65, 0x61,
         0x6c, 0x20, 0x6f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
         0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x75, 0x63, 0x63, 0x65,
         0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x72,
         0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x32,
         0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
         0x2c, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
         0x61, 0x6c, 0x73, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
         0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
         0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x63, 0x6f, 0x6d, 0x70,
         0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x65,
         0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
         0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x20,
         0x6f, 0x66, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x79, 0x20, 0x72,
         0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x3a, 0x43, 0x6f, 0x6e,
         0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x49,
         0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x73,
         0x6f, 0x6d, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75,
         0x6c, 0x64, 0x20, 0x62, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27,
         0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x73, 0x62, 0x6f,
         0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x28, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,
         0x6c, 0x79, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65,
         0x66, 0x74, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f,
         0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x62, 0x61, 0x73, 0x69, 0x73,
         0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75,
         0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63,
         0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
         0x20, 0x6f, 0x66, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x64,
         0x75, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x75, 0x72, 0x69,
         0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x70,
         0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f, 0x75, 0x74,
         0x3d, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x73, 0x74, 0x61,
         0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61,
         0x6e, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x66,
         0x69, 0x6c, 0x6d, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
         0x72, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x64, 0x74,
         0x64, 0x22, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,
         0x20, 0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
         0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
         0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x63, 0x68,
         0x61, 0x6e, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6f, 0x74, 0x68,
         0x65, 0x72, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
         0x20, 0x61, 0x72, 0x65, 0x75, 0x6e, 0x70, 0x72, 0x65, 0x63, 0x65,
         0x64, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x69, 0x73, 0x20, 0x73, 0x69,
         0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x73, 0x70,
         0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x77,
         0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c, 0x64,
         0x3b, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
         0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74,
         0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x09, 0x3c,
         0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
         0x61, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c,
         0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x20,
         0x77, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72,
         0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x78,
         0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d,
         0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x71,
         0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f,
         0x66, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61,
         0x6e, 0x20, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
         0x61, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x70, 0x6f,
         0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70,
         0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x61,
         0x6e, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62,
         0x73, 0x70, 0x3b, 0x3c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
         0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x73,
         0x61, 0x6d, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x47, 0x6f, 0x76,
         0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x67,
         0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
         0x65, 0x65, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
         0x79, 0x65, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
         0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x09, 0x09, 0x3c, 0x75,
         0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x76, 0x69,
         0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72,
         0x79, 0x2c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x65, 0x72, 0x73, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65,
         0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x63,
         0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x6f, 0x63, 0x63,
         0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69,
         0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61,
         0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75,
         0x6e, 0x74, 0x20, 0x6f, 0x66, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x65, 0x71, 0x75, 0x69,
         0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x69,
         0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
         0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x61, 0x62, 0x6f,
         0x75, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65,
         0x66, 0x74, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x6f, 0x75, 0x67,
         0x68, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73, 0x53, 0x6f, 0x6d,
         0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x0a,
         0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
         0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x75, 0x63,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x6e,
         0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79,
         0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x61, 0x73, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
         0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6c, 0x61, 0x72,
         0x67, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x49,
         0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x20, 0x66, 0x6f,
         0x72, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x2d, 0x63, 0x61, 0x6c,
         0x6c, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x69,
         0x73, 0x20, 0x63, 0x61, 0x73, 0x65, 0x2c, 0x77, 0x61, 0x73, 0x20,
         0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6c,
         0x61, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
         0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68,
         0x69, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
         0x74, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d,
         0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x66, 0x66, 0x65, 0x63,
         0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x64,
         0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
         0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x61,
         0x6c, 0x77, 0x61, 0x79, 0x73, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75,
         0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x72,
         0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x68,
         0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x79, 0x20, 0x6f, 0x66,
         0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
         0x61, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x6c, 0x65, 0x63,
         0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x61, 0x6e,
         0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x6e, 0x22,
         0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20, 0x2f,
         0x3e, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
         0x75, 0x72, 0x65, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x63, 0x61, 0x75, 0x73,
         0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64,
         0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x6d, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72,
         0x61, 0x63, 0x65, 0x64, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x63, 0x61, 0x6d,
         0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20,
         0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x6c,
         0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61,
         0x6c, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65,
         0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x73,
         0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
         0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
         0x61, 0x6c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
         0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69,
         0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x68, 0x6f,
         0x72, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x73,
         0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x65, 0x74,
         0x68, 0x65, 0x72, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f,
         0x72, 0x20, 0x69, 0x74, 0x73, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e,
         0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70,
         0x6c, 0x61, 0x79, 0x3a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x73,
         0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
         0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
         0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20,
         0x6f, 0x66, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
         0x7a, 0x65, 0x64, 0x20, 0x61, 0x73, 0x2f, 0x62, 0x6f, 0x64, 0x79,
         0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x61, 0x20, 0x73,
         0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x72,
         0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65,
         0x64, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74,
         0x61, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
         0x63, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67,
         0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x67, 0x72,
         0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
         0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
         0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
         0x61, 0x6c, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20,
         0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x70,
         0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x66,
         0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c,
         0x79, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
         0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x61, 0x73, 0x20,
         0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x72, 0x65,
         0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x2c,
         0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
         0x61, 0x6c, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
         0x74, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20,
         0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x32, 0x30, 0x74, 0x68, 0x20,
         0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x2e, 0x61, 0x6e, 0x64,
         0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x6c,
         0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
         0x74, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74,
         0x61, 0x6e, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73,
         0x74, 0x61, 0x74, 0x65, 0x73, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
         0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x66, 0x69, 0x72, 0x73,
         0x74, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
         0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
         0x61, 0x6c, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
         0x65, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
         0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x63, 0x6c, 0x65, 0x61, 0x72,
         0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x61, 0x75, 0x74,
         0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
         0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
         0x64, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,
         0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73,
         0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c,
         0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
         0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
         0x72, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x64,
         0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x77, 0x61,
         0x79, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x3b,
         0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
         0x3c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74,
         0x68, 0x65, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
         0x20, 0x62, 0x79, 0x20, 0x61, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70,
         0x6f, 0x77, 0x65, 0x72, 0x66, 0x75, 0x6c, 0x72, 0x65, 0x73, 0x75,
         0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x55, 0x6e,
         0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
         0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x61,
         0x6e, 0x79, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x69,
         0x64, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72,
         0x2c, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68,
         0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x74,
         0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x77,
         0x61, 0x73, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
         0x64, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
         0x61, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,
         0x6c, 0x75, 0x64, 0x65, 0x73, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75,
         0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x44,
         0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x41, 0x4c, 0x54, 0x45, 0x52,
         0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x66,
         0x65, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x3f, 0x73,
         0x6f, 0x72, 0x74, 0x3d, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61,
         0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62,
         0x61, 0x73, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x68, 0x61, 0x73,
         0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x65,
         0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x76,
         0x65, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
         0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61,
         0x73, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x69, 0x73,
         0x20, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
         0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6f, 0x74, 0x68,
         0x65, 0x72, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66, 0x72,
         0x69, 0x63, 0x61, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x65, 0x66, 0x66, 0x65, 0x63,
         0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x20,
         0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x73, 0x65, 0x3b,
         0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
         0x61, 0x6e, 0x64, 0x3b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
         0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70,
         0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73,
         0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67,
         0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
         0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20,
         0x4d, 0x65, 0x6c, 0x61, 0x79, 0x75, 0x6e, 0x6f, 0x72, 0x73, 0x6b,
         0x20, 0x62, 0x6f, 0x6b, 0x6d, 0xc3, 0xa5, 0x6c, 0x6e, 0x6f, 0x72,
         0x73, 0x6b, 0x20, 0x6e, 0x79, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x73,
         0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc5, 0xa1, 0xc4, 0x8d, 0x69, 0x6e,
         0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x6f,
         0x6e, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
         0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69,
         0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x72, 0x75, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x22, 0x3e,
         0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
         0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x64, 0x6d, 0x69,
         0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x69, 0x6d, 0x75, 0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73,
         0x6c, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x61, 0x72,
         0x67, 0x69, 0x6e, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a,
         0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c,
         0x69, 0x74, 0x79, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66,
         0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x2f, 0x3e, 0x3c, 0x6d, 0x65,
         0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x69, 0x6d,
         0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
         0x74, 0x75, 0x72, 0x65, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
         0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x3c,
         0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64,
         0x79, 0x3e, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25,
         0x32, 0x46, 0x25, 0x32, 0x46, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20,
         0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x6d, 0x65, 0x74,
         0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20,
         0x2f, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63,
         0x6f, 0x22, 0x20, 0x7d, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2e, 0x73, 0x65, 0x74, 0x41,
         0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x41, 0x64,
         0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x72, 0x72, 0x61,
         0x79, 0x28, 0x29, 0x3b, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69,
         0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x64, 0x69, 0x73, 0x70,
         0x6c, 0x61, 0x79, 0x3a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x55,
         0x6e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x74, 0x65, 0x6c,
         0x79, 0x2c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x2f, 0x66, 0x61, 0x76, 0x69, 0x63,
         0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x3e, 0x3d, 0x27, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x27, 0x20,
         0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78,
         0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x3c, 0x6c, 0x69, 0x3e, 0x3c,
         0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61, 0x6e,
         0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
         0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
         0x74, 0x20, 0x6f, 0x66, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x74, 0x79, 0x70, 0x65,
         0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x0a,
         0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29,
         0x20, 0x7b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x74, 0x72, 0x61,
         0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x64,
         0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x41, 0x63, 0x63, 0x6f,
         0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x69,
         0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
         0x22, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
         0x74, 0x2e, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x72,
         0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x43,
         0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
         0x67, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2d, 0x2d, 0x3c,
         0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e,
         0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x69, 0x73,
         0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
         0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x3c, 0x2f, 0x61, 0x3e, 0x20,
         0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x74, 0x68,
         0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f,
         0x66, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f, 0x76,
         0x65, 0x72, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x67, 0x6f, 0x76,
         0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x72, 0x65, 0x66,
         0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
         0x61, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
         0x6c, 0x79, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f,
         0x64, 0x75, 0x63, 0x65, 0x64, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
         0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x70,
         0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
         0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
         0x72, 0x65, 0x64, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66,
         0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e,
         0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x55, 0x6e,
         0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
         0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73,
         0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
         0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x69,
         0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
         0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
         0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x3a, 0x20, 0x66,
         0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b,
         0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e,
         0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c,
         0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x61, 0x63,
         0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x6e, 0x61, 0x74, 0x75,
         0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69,
         0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x73, 0x29, 0x3b, 0x20, 0x6a, 0x73,
         0x2e, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x64, 0x22, 0x20, 0x77,
         0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22,
         0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x43, 0x61,
         0x74, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x69, 0x6e,
         0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x66, 0x6f,
         0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3d, 0x22, 0x31, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x63,
         0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x72, 0x63, 0x68, 0x61, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
         0x61, 0x6c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x6d, 0x69, 0x6e,
         0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c,
         0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63, 0x6f, 0x6d,
         0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3d, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x77, 0x2e, 0x61, 0x74, 0x74,
         0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x3c, 0x2f,
         0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
         0x3e, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
         0x3a, 0x2f, 0x2f, 0x61, 0x49, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74,
         0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x20, 0x61, 0x6c, 0x69,
         0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x20, 0x43,
         0x7a, 0x65, 0x63, 0x68, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c,
         0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b, 0x69,
         0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73,
         0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e,
         0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c,
         0x65, 0x3d, 0x22, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x28, 0x29, 0x20, 0x7b, 0x63, 0x6f, 0x6d, 0x65, 0x73,
         0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70,
         0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x73, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65,
         0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x65, 0x6d, 0x65, 0x6e,
         0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x3c,
         0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x3c,
         0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x74, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22,
         0x28, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
         0x20, 0x61, 0x73, 0x09, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
         0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x65,
         0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
         0x6d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74,
         0x6f, 0x20, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
         0x6f, 0x20, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x20, 0x64, 0x69,
         0x6f, 0x78, 0x69, 0x64, 0x65, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d,
         0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74,
         0x6d, 0x6c, 0x3e, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
         0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
         0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f,
         0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x6f, 0x64,
         0x79, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69,
         0x64, 0x74, 0x68, 0x3a, 0x54, 0x69, 0xe1, 0xba, 0xbf, 0x6e, 0x67,
         0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x63, 0x68, 0x61, 0x6e,
         0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x62,
         0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
         0x3a, 0x23, 0x30, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
         0x3d, 0x22, 0x30, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
         0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x77, 0x61, 0x73,
         0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
         0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
         0x74, 0x22, 0x20, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72,
         0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x63,
         0x63, 0x6c, 0x65, 0x73, 0x69, 0x61, 0x73, 0x74, 0x69, 0x63, 0x61,
         0x6c, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20,
         0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69,
         0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x3c, 0x2f, 0x62, 0x6f,
         0x64, 0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68,
         0x61, 0x73, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65,
         0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
         0x20, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73,
         0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x61, 0x75, 0x74,
         0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x0a, 0x3c, 0x64, 0x69,
         0x76, 0x20, 0x69, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73,
         0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x70, 0x65, 0x72, 0x63, 0x65,
         0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x22, 0x20,
         0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
         0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x65, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,
         0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73,
         0x65, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e,
         0x66, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x64,
         0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a,
         0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
         0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x72, 0x65, 0x66,
         0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x68,
         0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f,
         0x74, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
         0x61, 0x6c, 0x73, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61,
         0x72, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x73, 0x6d,
         0x61, 0x6c, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f,
         0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20,
         0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
         0x65, 0x20, 0x74, 0x6f, 0x20, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x6c, 0x6f, 0x63,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x2e, 0x20, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20,
         0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e,
         0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x74, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65,
         0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74,
         0x73, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
         0x20, 0x74, 0x68, 0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x20, 0x6d, 0x65, 0x74,
         0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x69,
         0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
         0x6c, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65,
         0x6c, 0x79, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63,
         0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x76,
         0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x65, 0x6e,
         0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73,
         0x20, 0x74, 0x6f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
         0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x6d, 0x61,
         0x6e, 0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
         0x73, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79,
         0x65, 0x61, 0x72, 0x73, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
         0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x62, 0x65, 0x63, 0x61,
         0x75, 0x73, 0x65, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x70,
         0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x3e, 0x0d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22,
         0x74, 0x6f, 0x70, 0x22, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69,
         0x74, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x79, 0x65, 0x61, 0x72,
         0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20,
         0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72,
         0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f,
         0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x61, 0x72, 0x67, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d,
         0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x72, 0x65,
         0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74,
         0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
         0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x61, 0x6c, 0x74,
         0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
         0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20,
         0x66, 0x6f, 0x72, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20,
         0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69,
         0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f,
         0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x65,
         0x20, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65,
         0x3d, 0x22, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
         0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x77, 0x61, 0x79, 0x20, 0x66,
         0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3b, 0x6d, 0x61,
         0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a,
         0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
         0x20, 0x6f, 0x66, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
         0x63, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x6e,
         0x64, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x74, 0x68, 0x65,
         0x72, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x69,
         0x74, 0x20, 0x69, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
         0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x3c, 0x73, 0x70,
         0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64,
         0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x20,
         0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x69, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3c, 0x2f, 0x68,
         0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20,
         0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63,
         0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70,
         0x65, 0x61, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x72, 0x65,
         0x6d, 0x69, 0x6e, 0x69, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6f,
         0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69,
         0x63, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72,
         0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70,
         0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70,
         0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75,
         0x67, 0x68, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6f,
         0x72, 0x74, 0x61, 0x6e, 0x74, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,
         0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70, 0x78, 0x65, 0x78, 0x70,
         0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
         0x20, 0x6f, 0x66, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20,
         0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x09, 0x3c, 0x73, 0x70, 0x61,
         0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x73,
         0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x61, 0x6e, 0x63,
         0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x77, 0x68, 0x69, 0x63,
         0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x69,
         0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x61,
         0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
         0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69, 0x6e, 0x70, 0x75,
         0x74, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73,
         0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x74, 0x28, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e, 0x64,
         0x6f, 0x6d, 0x28, 0x29, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72,
         0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x43,
         0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70,
         0x6c, 0x65, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
         0x69, 0x73, 0x68, 0x65, 0x64, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x70, 0x70,
         0x65, 0x61, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22,
         0x31, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70,
         0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x77, 0x68, 0x69, 0x63, 0x68,
         0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x77, 0x68,
         0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65,
         0x6e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x70,
         0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x09, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70,
         0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
         0x6f, 0x66, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73,
         0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
         0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x73, 0x75, 0x63,
         0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x20, 0x62, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
         0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
         0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x0d, 0x0a,
         0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a,
         0x3c, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65,
         0x64, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
         0x65, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x22,
         0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63,
         0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x0d, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72,
         0x65, 0x6c, 0x3d, 0x22, 0x73, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
         0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x69,
         0x6e, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x78, 0x4d, 0x4c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
         0x65, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73,
         0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x6f, 0x6e,
         0x64, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x76, 0x65,
         0x72, 0x79, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
         0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70, 0x70, 0x6c,
         0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x66,
         0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69,
         0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
         0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
         0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x73, 0x20,
         0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x74, 0x6f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x74, 0x6f,
         0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68,
         0x65, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
         0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65,
         0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x43,
         0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72,
         0x6d, 0x73, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74,
         0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x3c, 0x73, 0x70,
         0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63,
         0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
         0x20, 0x6f, 0x66, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0d, 0x69, 0x66, 0x20, 0x61, 0x6e,
         0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x72, 0x65,
         0x67, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
         0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74,
         0x65, 0x64, 0x20, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
         0x74, 0x3a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,
         0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x41, 0x73, 0x73,
         0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x0a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62,
         0x6f, 0x64, 0x79, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
         0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x72, 0x65,
         0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x28, 0x69,
         0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64,
         0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x61, 0x6d, 0x6f, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x74,
         0x68, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x74, 0x68,
         0x65, 0x72, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
         0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
         0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x68, 0x65,
         0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66,
         0x74, 0x68, 0x65, 0x20, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
         0x20, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
         0x66, 0x66, 0x66, 0x7d, 0x0a, 0x2e, 0x0a, 0x3c, 0x73, 0x70, 0x61,
         0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68,
         0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f,
         0x66, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
         0x73, 0x20, 0x6f, 0x66, 0x3e, 0x0d, 0x0a, 0x3c, 0x6c, 0x69, 0x6e,
         0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x63, 0x6c, 0x61, 0x69,
         0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68,
         0x61, 0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
         0x65, 0x64, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69,
         0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72,
         0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f, 0x6c,
         0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
         0x69, 0x73, 0x68, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x61, 0x6b, 0x65, 0x73,
         0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x75, 0x6e,
         0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
         0x65, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64,
         0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x69,
         0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
         0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
         0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x63,
         0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
         0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
         0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
         0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x73, 0x70, 0x65, 0x63,
         0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x2f, 0x64,
         0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75,
         0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
         0x6f, 0x75, 0x74, 0x20, 0x68, 0x69, 0x73, 0x74, 0x68, 0x65, 0x20,
         0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
         0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70,
         0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
         0x69, 0x63, 0x61, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x3e, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a,
         0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
         0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65,
         0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20,
         0x62, 0x65, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x65, 0x73,
         0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x66, 0x6f,
         0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64,
         0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x65, 0x73, 0x73, 0x65,
         0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x69,
         0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65,
         0x73, 0x74, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e,
         0x20, 0x6d, 0x61, 0x64, 0x65, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d,
         0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x74,
         0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73,
         0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66,
         0x20, 0x6f, 0x66, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
         0x3d, 0x22, 0x6e, 0x6f, 0x22, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f,
         0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x49, 0x49,
         0x2c, 0x20, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f, 0x6d, 0x61,
         0x6e, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
         0x64, 0x20, 0x74, 0x6f, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
         0x65, 0x69, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x64, 0x65, 0x66, 0x69,
         0x6e, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x74,
         0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
         0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
         0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x20,
         0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77,
         0x69, 0x74, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x65, 0x20, 0x66,
         0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x69, 0x6e,
         0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
         0x6e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73,
         0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69,
         0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74,
         0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x73, 0x70, 0x65, 0x63,
         0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73,
         0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
         0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
         0x64, 0x65, 0x64, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
         0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x69,
         0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61,
         0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x62,
         0x79, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69,
         0x74, 0x20, 0x69, 0x73, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
         0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x72,
         0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x70,
         0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74,
         0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74,
         0x61, 0x6c, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x66,
         0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69,
         0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,
         0x74, 0x68, 0x65, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
         0x20, 0x6f, 0x66, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
         0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x66, 0x66, 0x65,
         0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x6f,
         0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68,
         0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x20, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74,
         0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f,
         0x66, 0x20, 0x68, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72,
         0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x68, 0x65,
         0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
         0x6f, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
         0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70, 0x74, 0x65,
         0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71,
         0x22, 0x09, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x69,
         0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x72, 0x65, 0x70, 0x72,
         0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6d,
         0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x69, 0x61,
         0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68,
         0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x3e, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63,
         0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65, 0x61,
         0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
         0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x29, 0x3b,
         0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
         0x3c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x69,
         0x63, 0x61, 0x6c, 0x20, 0x73, 0x72, 0x70, 0x73, 0x6b, 0x6f, 0x68,
         0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x74, 0x69, 0xe1, 0xba,
         0xbf, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0xd0,
         0xa0, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8,
         0xd0, 0xb9, 0xd1, 0x80, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x81, 0xd0,
         0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
         0x69, 0x67, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x61, 0x72,
         0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
         0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
         0x8b, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb0,
         0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1,
         0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x87,
         0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0,
         0xba, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5,
         0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
         0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe,
         0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x85, 0xd0,
         0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,
         0xd1, 0x8c, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
         0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82,
         0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x8f, 0xd1, 0x81, 0xd0,
         0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f,
         0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1,
         0x82, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe,
         0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xa3, 0xd0, 0xba, 0xd1,
         0x80, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb2,
         0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
         0x8b, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
         0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0,
         0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe,
         0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd1, 0x8c, 0xd1, 0x8e, 0xd1,
         0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82,
         0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
         0xb7, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe,
         0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x83, 0xd1,
         0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb5,
         0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd0, 0xb5, 0xd0, 0x93, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb2,
         0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,
         0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x81,
         0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
         0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd,
         0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xa1, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
         0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe,
         0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd1,
         0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb5,
         0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
         0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2,
         0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0,
         0xbe, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe,
         0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe,
         0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
         0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba,
         0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
         0xbc, 0xd0, 0xa0, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0,
         0xd0, 0xbc, 0xd0, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9,
         0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x89, 0xd9, 0x85, 0xd9, 0x86,
         0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb6, 0xd9, 0x88,
         0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8,
         0xa7, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
         0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x84,
         0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8,
         0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb9,
         0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9,
         0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xb9, 0xd8, 0xb6,
         0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x86, 0xd8,
         0xaa, 0xd8, 0xa7, 0xd8, 0xa6, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xa3, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x8a,
         0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x82, 0xd8,
         0xb3, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb6,
         0xd8, 0xba, 0xd8, 0xb7, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,
         0x84, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x88,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xad, 0xd9,
         0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf,
         0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xaa, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8,
         0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x84,
         0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9,
         0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x86, 0xd9, 0x8a,
         0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae,
         0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9,
         0x84, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xaa, 0xd9, 0x85, 0xd8, 0xb9,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x83, 0xd9,
         0x88, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a,
         0xd8, 0xa7, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8,
         0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xa7,
         0xd8, 0xa8, 0xd8, 0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
         0xaf, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xa7, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf,
         0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xba, 0xd8,
         0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
         0x3a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x3c, 0x2f,
         0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74,
         0x61, 0x20, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,
         0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x22, 0x3e, 0x3c, 0x73, 0x70,
         0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d,
         0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x6c,
         0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
         0x2f, 0x61, 0x3e, 0x20, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x3c, 0x21, 0x64, 0x6f, 0x63, 0x74, 0x79,
         0x70, 0x65, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x6d, 0x65, 0x64,
         0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22,
         0x20, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61,
         0x6c, 0x75, 0x65, 0x3d, 0x22, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
         0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09,
         0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
         0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x20, 0x6d, 0x65, 0x74,
         0x68, 0x6f, 0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22, 0x20, 0x2f,
         0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,
         0x6c, 0x3e, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
         0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x6f, 0x63, 0x75,
         0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x6f, 0x74,
         0x74, 0x6f, 0x6d, 0x3a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
         0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x73, 0x75, 0x62,
         0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,
         0x22, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e,
         0x74, 0x65, 0x72, 0x22, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
         0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
         0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x69, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
         0x74, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f,
         0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
         0x6f, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d,
         0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x3c, 0x77, 0x61, 0x73, 0x20,
         0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
         0x29, 0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
         0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x29, 0x2e, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
         0x79, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
         0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3c, 0x66,
         0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
         0x22, 0x2f, 0x7d, 0x62, 0x6f, 0x64, 0x79, 0x7b, 0x6d, 0x61, 0x72,
         0x67, 0x69, 0x6e, 0x3a, 0x30, 0x3b, 0x45, 0x6e, 0x63, 0x79, 0x63,
         0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x20, 0x6f, 0x66, 0x76,
         0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
         0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x6e, 0x61, 0x6d, 0x65,
         0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
         0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x3c, 0x2f, 0x62,
         0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c,
         0x3e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
         0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x70, 0x6f,
         0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x26, 0x6e, 0x62, 0x73, 0x70,
         0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6f,
         0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
         0x69, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x70,
         0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
         0x49, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x6f,
         0x72, 0x64, 0x73, 0x2c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
         0x3a, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x63, 0x6f, 0x6e,
         0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65,
         0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x73,
         0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
         0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0d, 0x0a, 0x09, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x0a, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64,
         0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
         0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20,
         0x77, 0x69, 0x74, 0x68, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
         0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74,
         0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
         0x3a, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x3c, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x68,
         0x65, 0x72, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65,
         0x65, 0x6e, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c, 0x61,
         0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x43,
         0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x73, 0x74, 0x20, 0x50, 0x61,
         0x72, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
         0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f, 0x72, 0x64,
         0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c,
         0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6a,
         0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x61,
         0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x64,
         0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x4f, 0x72,
         0x74, 0x68, 0x6f, 0x64, 0x6f, 0x78, 0x20, 0x43, 0x68, 0x75, 0x72,
         0x63, 0x68, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74,
         0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c,
         0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x77,
         0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x68, 0x69,
         0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x7d, 0x29, 0x28, 0x29,
         0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
         0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
         0x61, 0x67, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
         0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x72,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72,
         0x6c, 0x61, 0x6e, 0x64, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,
         0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x61,
         0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x75, 0x72,
         0x6c, 0x28, 0x61, 0x72, 0x67, 0x75, 0x65, 0x64, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x6c,
         0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22, 0x20, 0x69,
         0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
         0x74, 0x68, 0x65, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d,
         0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61,
         0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x65, 0x76,
         0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66,
         0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79,
         0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c,
         0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x76, 0x65,
         0x72, 0x79, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20,
         0x74, 0x6f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70,
         0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x61,
         0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65,
         0x72, 0x22, 0x3e, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61,
         0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6d, 0x61, 0x67,
         0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d,
         0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66,
         0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20, 0x69,
         0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x64, 0x65, 0x72,
         0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61,
         0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74,
         0x68, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x72,
         0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75,
         0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
         0x61, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x73,
         0x75, 0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d,
         0x65, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61,
         0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e, 0x61, 0x6c, 0x79,
         0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69,
         0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x66, 0x6f, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64,
         0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x73, 0x74,
         0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
         0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x26, 0x71,
         0x75, 0x6f, 0x74, 0x3b, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72,
         0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x48, 0x69, 0x73,
         0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
         0x64, 0x65, 0x72, 0x65, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
         0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72,
         0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x55, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64,
         0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x09, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63,
         0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70,
         0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65,
         0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
         0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73,
         0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x65, 0x6c, 0x65,
         0x63, 0x74, 0x72, 0x6f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69,
         0x63, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
         0x69, 0x63, 0x65, 0x73, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x49, 0x74,
         0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
         0x6e, 0x74, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x76, 0x61, 0x72, 0x20, 0x72,
         0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20,
         0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73,
         0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
         0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
         0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x77, 0x61, 0x73,
         0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64, 0x61, 0x73, 0x68,
         0x3b, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70,
         0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6a, 0x73,
         0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
         0x0d, 0x0a, 0x75, 0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x66, 0x74, 0x65, 0x72,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x77,
         0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74,
         0x20, 0x74, 0x6f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70,
         0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x73, 0x20, 0x70,
         0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79,
         0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x69, 0x6e, 0x6c,
         0x69, 0x6e, 0x65, 0x3b, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x69, 0x73, 0x20,
         0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74,
         0x6f, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xae,
         0x80, 0xe4, 0xbd, 0x93, 0x29, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
         0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x61, 0x64,
         0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x63, 0x69, 0xc3,
         0xb3, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x72, 0x65,
         0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x65, 0xe0,
         0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b,
         0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa5,
         0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x81, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2,
         0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
         0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xad, 0xe0, 0xa5,
         0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3,
         0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89, 0xe0, 0xa4,
         0x97, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4, 0xbc,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xad, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x96, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab,
         0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
         0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0,
         0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
         0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0,
         0xa4, 0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xaf, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x88, 0xe0, 0xa4,
         0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b, 0xe0,
         0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
         0xa2, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xae, 0xe0,
         0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0x9b, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9b, 0xe0, 0xa5, 0x82, 0xe0,
         0xa4, 0x9f, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x8f, 0xe0,
         0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
         0x98, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4,
         0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x97, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0x85, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9c,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5,
         0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb7, 0xe0,
         0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0,
         0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
         0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4,
         0xbc, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b,
         0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0x95, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xaf, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0x98, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x82, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa5, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0x96, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9,
         0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x72, 0x73, 0x73, 0x2b, 0x78,
         0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22,
         0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
         0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61,
         0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20,
         0x74, 0x69, 0x6d, 0x65, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x22, 0x20,
         0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73,
         0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
         0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x76, 0x65, 0x72,
         0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3a, 0x74, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d,
         0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x2e, 0x63, 0x6c, 0x69,
         0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x28, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61,
         0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x7d, 0x29, 0x28, 0x29, 0x3b,
         0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
         0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x29,
         0x3b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x61,
         0x6c, 0x73, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65,
         0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73,
         0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e,
         0x6f, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63,
         0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3a, 0x61, 0x73, 0x73,
         0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
         0x68, 0x20, 0x42, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20, 0x49, 0x6e,
         0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x45, 0x6e, 0x67, 0x6c,
         0x69, 0x73, 0x68, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
         0x65, 0x3c, 0x74, 0x65, 0x78, 0x74, 0x20, 0x78, 0x6d, 0x6c, 0x3a,
         0x73, 0x70, 0x61, 0x63, 0x65, 0x3d, 0x2e, 0x67, 0x69, 0x66, 0x22,
         0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
         0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68,
         0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c,
         0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x69,
         0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
         0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
         0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x72, 0x65,
         0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66,
         0x6f, 0x72, 0x20, 0x73, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f, 0x66, 0x61,
         0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20,
         0x2f, 0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
         0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x20, 0x73, 0x74,
         0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
         0x31, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62,
         0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x53, 0x74, 0x61, 0x74, 0x65,
         0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
         0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
         0x6c, 0x65, 0x66, 0x74, 0x3b, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
         0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x2c,
         0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x29, 0x3b,
         0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
         0x0d, 0x0a, 0x3c, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
         0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x3b, 0x6f, 0x76,
         0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64,
         0x65, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x20, 0x69,
         0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
         0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e,
         0x64, 0x20, 0x69, 0x6e, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x64,
         0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e,
         0x65, 0x3b, 0x22, 0x3e, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c,
         0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x0a, 0x20,
         0x20, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
         0x29, 0x20, 0x7b, 0x74, 0x68, 0x65, 0x20, 0x31, 0x35, 0x74, 0x68,
         0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x2e, 0x70, 0x72,
         0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
         0x74, 0x28, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
         0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x79, 0x7a, 0x61,
         0x6e, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72,
         0x65, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62,
         0x7c, 0x6c, 0x65, 0x66, 0x74, 0x7c, 0x76, 0x61, 0x73, 0x74, 0x20,
         0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
         0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e,
         0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x55,
         0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x50,
         0x72, 0x65, 0x73, 0x73, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
         0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x53, 0x65,
         0x63, 0x6f, 0x6e, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
         0x57, 0x61, 0x72, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x79,
         0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x3a, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x74, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72,
         0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f,
         0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x64, 0x65, 0x72, 0x69, 0x76,
         0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
         0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x62,
         0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x3a, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
         0x2d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x6f,
         0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x73, 0x63, 0x69, 0x65,
         0x6e, 0x63, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22,
         0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x74, 0x68, 0x65,
         0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x20,
         0x6f, 0x66, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x74, 0x69,
         0x63, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x20, 0x73, 0x74,
         0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
         0x2d, 0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72,
         0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2c, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
         0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x09,
         0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,
         0x73, 0x29, 0x5b, 0x30, 0x5d, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x2e,
         0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x0d, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65,
         0x6c, 0x3d, 0x22, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x27, 0x20,
         0x61, 0x6c, 0x74, 0x3d, 0x27, 0x27, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x27, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72,
         0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x2f, 0x70, 0x61, 0x67,
         0x65, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x3e,
         0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
         0x62, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20, 0x49, 0x6e, 0x64, 0x6f,
         0x6e, 0x65, 0x73, 0x69, 0x61, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
         0x68, 0x20, 0x28, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x29, 0xce,
         0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce, 0xb7, 0xce, 0xbd, 0xce, 0xb9,
         0xce, 0xba, 0xce, 0xac, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb2, 0xd0,
         0xb0, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f,
         0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0xd0, 0x94, 0xd0,
         0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82,
         0xd1, 0x8c, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
         0xb2, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0,
         0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
         0x8f, 0xd0, 0x98, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80,
         0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0x9e, 0xd1, 0x82, 0xd0,
         0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c,
         0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x82,
         0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0xd0,
         0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe,
         0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
         0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86, 0xd1, 0x8b, 0xd0, 0xba,
         0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
         0xb2, 0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe,
         0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0xd0, 0xbf, 0xd1,
         0x80, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc,
         0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1,
         0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8f, 0xd0, 0xb2,
         0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1,
         0x8f, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe,
         0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
         0xbc, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f,
         0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0,
         0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5,
         0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb6,
         0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,
         0xa6, 0xd9, 0x8a, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd9, 0x82, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1,
         0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x83, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83, 0xd8,
         0xaa, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb3, 0xd8, 0xb9, 0xd9, 0x88, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8,
         0xa9, 0xd8, 0xa7, 0xd8, 0xad, 0xd8, 0xb5, 0xd8, 0xa7, 0xd8, 0xa6,
         0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9,
         0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xaa, 0xd9,
         0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
         0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xaa, 0xd8,
         0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x85,
         0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8,
         0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9,
         0x83, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb1,
         0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0x72, 0x6f, 0x62,
         0x6f, 0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x74, 0x3d, 0x22, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
         0x22, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x74, 0x68,
         0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x53, 0x74,
         0x61, 0x74, 0x65, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,
         0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x2e,
         0x6a, 0x70, 0x67, 0x7c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x7c, 0x74,
         0x68, 0x75, 0x6d, 0x62, 0x7c, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c,
         0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c,
         0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
         0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x66, 0x72, 0x61, 0x6d, 0x65,
         0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,
         0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61,
         0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x3c, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
         0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61,
         0x72, 0x67, 0x69, 0x6e, 0x3a, 0x30, 0x3b, 0x70, 0x61, 0x64, 0x64,
         0x69, 0x6e, 0x67, 0x3a, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
         0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x20, 0x50,
         0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x65, 0x6e, 0x74, 0x69,
         0x65, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
         0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x20, 0x20,
         0x3c, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
         0x6e, 0x65, 0x74, 0x20, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
         0x72, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x3d, 0x20,
         0x74, 0x72, 0x75, 0x65, 0x3b, 0x0d, 0x0a, 0x69, 0x6e, 0x66, 0x6f,
         0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
         0x75, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22,
         0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x61,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
         0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d,
         0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64,
         0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,
         0x72, 0x63, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74,
         0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x0a, 0x3c, 0x2f, 0x62, 0x6f,
         0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
         0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e,
         0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
         0x3d, 0x22, 0x41, 0x72, 0x69, 0x61, 0x6c, 0x2c, 0x20, 0x48, 0x65,
         0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2c, 0x3c, 0x2f, 0x61,
         0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x3e, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x70, 0x6f,
         0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x72,
         0x74, 0x69, 0x65, 0x73, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
         0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x3c, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
         0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
         0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
         0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x27,
         0x3c, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75,
         0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x62, 0x65, 0x67, 0x69,
         0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x74, 0x65, 0x6c,
         0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72,
         0x69, 0x65, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e,
         0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x20, 0x74,
         0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61,
         0x6e, 0x6b, 0x22, 0x3e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68,
         0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32,
         0x46, 0x77, 0x77, 0x77, 0x2e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
         0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66,
         0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x69, 0x73,
         0x74, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x66, 0x6c, 0x75,
         0x65, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65,
         0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,
         0x0d, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x6d,
         0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x75,
         0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x6e, 0x67, 0x6c,
         0x61, 0x6e, 0x64, 0x6f, 0x66, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x68,
         0x20, 0x43, 0x61, 0x72, 0x6f, 0x6c, 0x69, 0x6e, 0x61, 0x73, 0x71,
         0x75, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65,
         0x74, 0x72, 0x65, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65,
         0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x64,
         0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f,
         0x6d, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
         0x6c, 0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,
         0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x20, 0x41, 0x6c,
         0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x64, 0x65, 0x63, 0x6c, 0x61,
         0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
         0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x42, 0x65, 0x6e, 0x6a,
         0x61, 0x6d, 0x69, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x6c,
         0x69, 0x6e, 0x72, 0x6f, 0x6c, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x79,
         0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x68, 0x65,
         0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
         0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65,
         0x72, 0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65,
         0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70,
         0x75, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
         0x20, 0x47, 0x75, 0x74, 0x65, 0x6e, 0x62, 0x65, 0x72, 0x67, 0x72,
         0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65,
         0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
         0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x6c, 0x69,
         0x3e, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x6f,
         0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x2e,
         0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f,
         0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66,
         0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
         0x61, 0x67, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63,
         0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x69, 0x64,
         0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79,
         0x20, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
         0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
         0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64,
         0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x65, 0x63,
         0x68, 0x61, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x76, 0x65, 0x72,
         0x74, 0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x74, 0x68,
         0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x79, 0x65,
         0x61, 0x72, 0x73, 0x20, 0x61, 0x67, 0x6f, 0x3c, 0x2f, 0x62, 0x6f,
         0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c,
         0x3e, 0x0d, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce, 0xb7, 0xce,
         0xbd, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xac, 0x0a, 0x74, 0x61, 0x6b,
         0x65, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65,
         0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x63,
         0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x61, 0x74,
         0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
         0x20, 0x74, 0x68, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
         0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x74,
         0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x65,
         0x6e, 0x74, 0x75, 0x72, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
         0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x72, 0x74,
         0x6c, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68,
         0x65, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x78,
         0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x73,
         0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e,
         0x64, 0x73, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x64,
         0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x6f,
         0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72,
         0x6c, 0x64, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
         0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x73,
         0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
         0x20, 0x74, 0x68, 0x65, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x74,
         0x68, 0x65, 0x20, 0x4f, 0x6c, 0x64, 0x20, 0x54, 0x65, 0x73, 0x74,
         0x61, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,
         0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73,
         0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e,
         0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x70, 0x61, 0x72,
         0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
         0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c, 0x69, 0x74,
         0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6d, 0x61, 0x6b, 0x65,
         0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
         0x6c, 0x65, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
         0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x67,
         0x75, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
         0x6f, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65,
         0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x74, 0x68,
         0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,
         0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
         0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
         0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69,
         0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
         0x74, 0x77, 0x6f, 0x2d, 0x74, 0x68, 0x69, 0x72, 0x64, 0x73, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65,
         0x2c, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x61, 0x6e, 0x6e, 0x6f,
         0x75, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
         0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
         0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6e, 0x64,
         0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e,
         0x74, 0x6c, 0x79, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64,
         0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f,
         0x6e, 0x73, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73,
         0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x6c,
         0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x73,
         0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x62,
         0x79, 0x20, 0x74, 0x68, 0x65, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
         0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e,
         0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
         0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x70, 0x6f, 0x73, 0x69, 0x74,
         0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
         0x65, 0x3b, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,
         0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x70, 0x6f,
         0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61,
         0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
         0x3b, 0x6a, 0x61, 0x78, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x6a,
         0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x31, 0x2e, 0x62, 0x61, 0x63,
         0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
         0x6f, 0x72, 0x3a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61,
         0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
         0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x20, 0x63, 0x6f,
         0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x3c, 0x6d, 0x65, 0x74,
         0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69,
         0x76, 0x3d, 0x22, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20,
         0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e, 0x65,
         0x28, 0x22, 0x25, 0x33, 0x43, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x22, 0x20, 0x74, 0x61, 0x72,
         0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
         0x22, 0x3e, 0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74,
         0x68, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x2c, 0x2e, 0x6a,
         0x70, 0x67, 0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x72, 0x69,
         0x67, 0x68, 0x74, 0x7c, 0x32, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
         0x3d, 0x22, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x6e, 0x69, 0x6e,
         0x65, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
         0x74, 0x75, 0x72, 0x79, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,
         0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a,
         0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
         0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x3b, 0x74, 0x65, 0x78,
         0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e,
         0x74, 0x65, 0x72, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69,
         0x67, 0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x20,
         0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74,
         0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
         0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
         0x65, 0x6e, 0x22, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x6f,
         0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x22, 0x20,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x34, 0x2f, 0x6c, 0x6f, 0x6f, 0x73,
         0x65, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x64, 0x75, 0x72,
         0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65,
         0x72, 0x69, 0x6f, 0x64, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f,
         0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
         0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x6c,
         0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x66, 0x6f, 0x72, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74,
         0x69, 0x6d, 0x65, 0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65,
         0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69,
         0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x3c, 0x73, 0x70, 0x61, 0x6e,
         0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e,
         0x74, 0x2d, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74,
         0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x09, 0x3c,
         0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x63, 0x6c, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
         0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
         0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77,
         0x69, 0x64, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79,
         0x20, 0x6f, 0x66, 0x20, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59,
         0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x3c,
         0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70,
         0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x22, 0x3e, 0x3c, 0x61,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66,
         0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x63,
         0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x3d, 0x68, 0x74, 0x74, 0x70,
         0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x77, 0x77,
         0x77, 0x2e, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
         0x72, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x74, 0x79,
         0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73,
         0x73, 0x22, 0x20, 0x2f, 0x3e, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20,
         0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f,
         0x20, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72, 0x64, 0x20, 0x55, 0x6e,
         0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x74, 0x79, 0x6c,
         0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69,
         0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
         0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x76,
         0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x20, 0x6e, 0x61, 0x6d,
         0x65, 0x3d, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
         0x22, 0x20, 0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x74,
         0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74,
         0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b,
         0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x66, 0x65, 0x64, 0x65, 0x72,
         0x61, 0x6c, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
         0x6e, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x20, 0x64,
         0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
         0x3d, 0x22, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
         0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x3e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x73, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x69,
         0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x61,
         0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77,
         0x69, 0x74, 0x68, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
         0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69,
         0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74,
         0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74,
         0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c,
         0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x75,
         0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e,
         0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,
         0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,
         0x65, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
         0x2f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x75, 0x67,
         0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
         0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
         0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x65, 0x6c, 0x65,
         0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e,
         0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x20, 0x74, 0x48,
         0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45,
         0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x61, 0x6c, 0x6d, 0x6f, 0x73,
         0x74, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
         0x6c, 0x79, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,
         0x22, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x53, 0x65,
         0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20,
         0x53, 0x74, 0x61, 0x74, 0x65, 0x63, 0x75, 0x6c, 0x6d, 0x69, 0x6e,
         0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x43, 0x49, 0x41, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
         0x46, 0x61, 0x63, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x65,
         0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72,
         0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72,
         0x73, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
         0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x3c, 0x6c, 0x69, 0x3e,
         0x3c, 0x65, 0x6d, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
         0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x41, 0x74, 0x6c, 0x61,
         0x6e, 0x74, 0x69, 0x63, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x73,
         0x74, 0x72, 0x69, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x73, 0x70, 0x65,
         0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x73, 0x68, 0x6f, 0x72, 0x74,
         0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74,
         0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
         0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x68,
         0x65, 0x20, 0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45,
         0x6d, 0x70, 0x69, 0x72, 0x65, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20,
         0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x41, 0x6e, 0x20, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
         0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6e,
         0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
         0x72, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
         0x43, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
         0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x69,
         0x67, 0x65, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x70, 0x65, 0x6f, 0x70,
         0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x69,
         0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69,
         0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72,
         0x69, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65,
         0x65, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x6d, 0x65,
         0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69,
         0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20,
         0x74, 0x68, 0x72, 0x65, 0x65, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65,
         0x6e, 0x74, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
         0x73, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
         0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x64, 0x69, 0x73,
         0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
         0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x67, 0x61,
         0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x68, 0x69, 0x73, 0x20,
         0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
         0x69, 0x65, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
         0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x44,
         0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x52, 0x65,
         0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x67, 0x65, 0x6e, 0x65, 0x72,
         0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
         0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
         0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x72,
         0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x61, 0x76, 0x61, 0x69,
         0x6c, 0x61, 0x62, 0x6c, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
         0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65,
         0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x70, 0x75,
         0x62, 0x6c, 0x69, 0x63, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6d, 0x6f,
         0x73, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c, 0x79,
         0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f,
         0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20,
         0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
         0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72,
         0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x47,
         0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e,
         0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f,
         0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
         0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68,
         0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72,
         0x77, 0x61, 0x72, 0x64, 0x73, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
         0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76,
         0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x61,
         0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x6f, 0x72, 0x73, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
         0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x49, 0x6e, 0x20, 0x70,
         0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x20,
         0x74, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
         0x20, 0x66, 0x6f, 0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x6f,
         0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x75, 0x62,
         0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x68, 0x6f, 0x75, 0x73,
         0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x65, 0x61,
         0x72, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f,
         0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68,
         0x70, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
         0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x6e,
         0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x3e, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
         0x70, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
         0x61, 0x20, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x69, 0x6e,
         0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74,
         0x6f, 0x70, 0x3a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
         0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x67,
         0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72,
         0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x20, 0x74,
         0x68, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x22,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x48, 0x6f,
         0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63,
         0x65, 0x20, 0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76,
         0x20, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x20, 0x6d, 0x61, 0x72, 0x67,
         0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x70, 0x72, 0x6f,
         0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x67, 0x61,
         0x69, 0x6e, 0x73, 0x74, 0x30, 0x3b, 0x20, 0x76, 0x65, 0x72, 0x74,
         0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
         0x55, 0x6e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x74, 0x65,
         0x6c, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65,
         0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69,
         0x63, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61,
         0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74,
         0x65, 0x72, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
         0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x74, 0x68,
         0x65, 0x20, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x69,
         0x63, 0x74, 0x75, 0x72, 0x65, 0xd0, 0x91, 0xd1, 0x8a, 0xd0, 0xbb,
         0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0,
         0xb8, 0xd0, 0xb1, 0xd1, 0x8a, 0xd0, 0xbb, 0xd0, 0xb3, 0xd0, 0xb0,
         0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xa4, 0xd0,
         0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86,
         0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0,
         0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe,
         0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0,
         0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe,
         0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd1, 0x8f, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3,
         0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0,
         0x9e, 0xd1, 0x82, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2,
         0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1,
         0x81, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbd,
         0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1,
         0x80, 0xd0, 0xb8, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8b, 0xd0, 0xbf,
         0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
         0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81,
         0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
         0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8,
         0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1,
         0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x86,
         0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
         0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0,
         0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1,
         0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8e, 0xd0, 0xbd, 0xd0, 0xb0,
         0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1,
         0x81, 0xd1, 0x8f, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x80,
         0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0,
         0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5,
         0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0,
         0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
         0xd1, 0x8f, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
         0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0x90,
         0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb0, 0xd0,
         0xbd, 0xd0, 0xb4, 0xd1, 0x80, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa5, 0x81, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaa,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
         0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
         0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x85, 0xe0, 0xa4,
         0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa1,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
         0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa6,
         0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97,
         0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x91, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x87,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0,
         0xa4, 0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5,
         0x8b, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
         0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0xb6, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95,
         0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x89, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87,
         0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
         0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
         0xa6, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaa, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa1, 0xe0,
         0xa4, 0xac, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9a,
         0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa7, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xae,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
         0xa6, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa7, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82,
         0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4,
         0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86, 0xe0,
         0xa4, 0x88, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x8f,
         0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb2, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
         0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4,
         0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb5,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xaa,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0,
         0xa4, 0xae, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5,
         0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
         0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7,
         0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8,
         0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9,
         0x88, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
         0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8,
         0xaa, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xb9, 0xd8,
         0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf,
         0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8,
         0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9,
         0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xaa, 0xd9,
         0x88, 0xd8, 0xb4, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84,
         0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x82, 0xd8,
         0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb9,
         0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
         0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xb3,
         0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
         0xac, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x83,
         0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
         0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
         0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9,
         0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
         0x64, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
         0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39,
         0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x3c,
         0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f,
         0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x74, 0x65, 0x78, 0x74,
         0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72,
         0x73, 0x65, 0x74, 0x3d, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
         0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e,
         0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c,
         0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x61, 0x75,
         0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d,
         0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d,
         0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, 0x74,
         0x65, 0x72, 0x3b, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
         0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20,
         0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
         0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x22, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69,
         0x64, 0x3d, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
         0x23, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x22,
         0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
         0x70, 0x3a, 0x2f, 0x2f, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d,
         0x22, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74,
         0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x65, 0x6e,
         0x63, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x49, 0x43, 0x6f, 0x6d, 0x70,
         0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x22, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x3a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
         0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72,
         0x69, 0x74, 0x65, 0x28, 0x27, 0x3c, 0x73, 0x63, 0x70, 0x6f, 0x73,
         0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x61, 0x62, 0x73, 0x6f,
         0x6c, 0x75, 0x74, 0x65, 0x3b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
         0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d,
         0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x2e,
         0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61,
         0x73, 0x73, 0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
         0x31, 0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22,
         0x20, 0x0a, 0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,
         0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x64, 0x69,
         0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62,
         0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2f, 0x22, 0x20, 0x74, 0x61,
         0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e,
         0x6b, 0x22, 0x3e, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x75,
         0x74, 0x66, 0x2d, 0x38, 0x22, 0x3f, 0x3e, 0x0a, 0x77, 0x2e, 0x61,
         0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
         0x65, 0x6e, 0x65, 0x72, 0x3f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
         0x77, 0x2e, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20,
         0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
         0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x74, 0x79, 0x70, 0x65,
         0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
         0x20, 0x2f, 0x3e, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x70, 0x72,
         0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a,
         0x74, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70,
         0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x20, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2d,
         0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74, 0x68, 0x65, 0x20, 0x64,
         0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20,
         0x6f, 0x66, 0x20, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65,
         0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65,
         0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73,
         0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x69, 0x73, 0x20,
         0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x20, 0x62, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20,
         0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25,
         0x22, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
         0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
         0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66,
         0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x62, 0x65, 0x74,
         0x77, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
         0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f,
         0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x3c, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x20, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a,
         0x65, 0x3a, 0x31, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
         0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x3d, 0x67, 0x62,
         0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20,
         0x43, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3c, 0x69, 0x6d,
         0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x69, 0x6d, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
         0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x20, 0x6f,
         0x66, 0x20, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x64,
         0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64,
         0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x63, 0x6f, 0x6e, 0x73,
         0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
         0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64,
         0x29, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x27, 0x29, 0x3b, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61,
         0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x3d, 0x22,
         0x6f, 0x67, 0x3a, 0xd0, 0x91, 0xd1, 0x8a, 0xd0, 0xbb, 0xd0, 0xb3,
         0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0x0a,
         0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
         0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3e, 0x50, 0x72,
         0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63,
         0x79, 0x3c, 0x2f, 0x61, 0x3e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
         0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
         0x68, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x6e,
         0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
         0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64,
         0x69, 0x76, 0x3e, 0x3c, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,
         0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x69, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75,
         0x6f, 0x74, 0x3b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72, 0x65,
         0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
         0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c,
         0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69,
         0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x20, 0x44, 0x2e, 0x43, 0x2e,
         0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
         0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x61, 0x6d, 0x6f,
         0x6e, 0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68,
         0x69, 0x6e, 0x67, 0x73, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
         0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
         0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74,
         0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x6e,
         0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x74, 0x68, 0x65, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
         0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
         0x72, 0x20, 0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x20, 0x55, 0x6e,
         0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x69,
         0x73, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64,
         0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x54, 0x68, 0x65, 0x72, 0x65,
         0x20, 0x61, 0x72, 0x65, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76,
         0x65, 0x72, 0x2c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,
         0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f,
         0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x20, 0x55, 0x6e,
         0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x65, 0x78, 0x70,
         0x61, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e,
         0x63, 0x6c, 0x75, 0x64, 0x65, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c,
         0x79, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
         0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68,
         0x61, 0x76, 0x65, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
         0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x66, 0x66, 0x69,
         0x6c, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
         0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
         0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x3e, 0x3c,
         0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f,
         0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x52, 0x65, 0x70, 0x75, 0x62,
         0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x72, 0x65, 0x6c,
         0x61, 0x6e, 0x64, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
         0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
         0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e,
         0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
         0x6f, 0x20, 0x74, 0x68, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
         0x61, 0x6c, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20,
         0x6f, 0x66, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74,
         0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63,
         0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x72, 0x6f,
         0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6d, 0x70, 0x6c,
         0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66,
         0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65,
         0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
         0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x52, 0x65,
         0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x62, 0x65,
         0x63, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
         0x73, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69,
         0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
         0x74, 0x68, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x2c, 0x20, 0x68, 0x6f,
         0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20,
         0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70,
         0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f,
         0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
         0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
         0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
         0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x66,
         0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65,
         0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63,
         0x74, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65,
         0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,
         0x64, 0x68, 0x69, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65,
         0x72, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3c, 0x2f,
         0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74,
         0x61, 0x62, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x74, 0x74,
         0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x58, 0x2d,
         0x55, 0x41, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
         0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
         0x6f, 0x66, 0x20, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x20,
         0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x68, 0x61, 0x73,
         0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69,
         0x63, 0x69, 0x7a, 0x65, 0x64, 0x28, 0x77, 0x69, 0x74, 0x68, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
         0x6f, 0x6e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
         0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x70,
         0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x72, 0x6f,
         0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x30, 0x22, 0x20, 0x63,
         0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d,
         0x22, 0x30, 0x22, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e,
         0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c,
         0x65, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x20,
         0x68, 0x65, 0x72, 0x65, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x68, 0x61,
         0x76, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
         0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x25, 0x33, 0x45, 0x25, 0x33,
         0x43, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x25, 0x33, 0x45,
         0x22, 0x29, 0x29, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
         0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
         0x77, 0x2e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20,
         0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65,
         0x78, 0x74, 0x2d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
         0x6f, 0x6e, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x79, 0x6c,
         0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
         0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
         0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d,
         0x22, 0x58, 0x2d, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65,
         0x28, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x28,
         0x29, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61,
         0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x3c,
         0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e,
         0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c, 0x61, 0x6e,
         0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x64, 0x6f,
         0x77, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
         0x68, 0x72, 0x65, 0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
         0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3a, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
         0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74,
         0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x68, 0x6f,
         0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x3c, 0x2f, 0x64, 0x69,
         0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,
         0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,
         0x74, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x2f,
         0x61, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
         0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x61, 0x6c,
         0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
         0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d,
         0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22,
         0x20, 0x63, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
         0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
         0x65, 0x6e, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
         0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x2f,
         0x75, 0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x73,
         0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67,
         0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x6e,
         0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
         0x3a, 0x2f, 0x2f, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69,
         0x3e, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
         0x22, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
         0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x3c,
         0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
         0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x74, 0x79, 0x70,
         0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x3c, 0x74, 0x61, 0x62, 0x6c,
         0x65, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30,
         0x30, 0x25, 0x22, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
         0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
         0x6e, 0x3a, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,
         0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
         0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
         0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x36,
         0x3e, 0x3c, 0x75, 0x6c, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61,
         0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x20, 0x20, 0x3c, 0x6d,
         0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71,
         0x75, 0x69, 0x76, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d,
         0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65,
         0x6e, 0x22, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
         0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
         0x20, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70,
         0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x22,
         0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
         0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x68, 0x74, 0x6d,
         0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d,
         0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
         0x77, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
         0x63, 0x79, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
         0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x74, 0x65, 0x0d, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68,
         0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22,
         0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x73, 0x70,
         0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x30,
         0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69,
         0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x3b, 0x0a, 0x3c, 0x2f,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69,
         0x6d, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20,
         0x74, 0x68, 0x65, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
         0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c,
         0x79, 0x46, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
         0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e,
         0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x21, 0x44,
         0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c,
         0x3e, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20,
         0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68,
         0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
         0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x3a, 0x76, 0x6f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x22,
         0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65,
         0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
         0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
         0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x67, 0x65, 0x6e, 0x65,
         0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
         0x64, 0x65, 0x72, 0x65, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75,
         0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
         0x74, 0x22, 0x20, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6f, 0x75, 0x74,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x63,
         0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x6f,
         0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73,
         0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69,
         0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64,
         0x69, 0x76, 0x20, 0x63, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
         0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
         0x65, 0x2c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
         0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65,
         0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x61, 0x6e,
         0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67,
         0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x69, 0x70, 0x6c,
         0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66,
         0x74, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
         0x72, 0x65, 0x64, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61,
         0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38,
         0x22, 0x20, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
         0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x65,
         0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63,
         0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e, 0x3c,
         0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74,
         0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
         0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
         0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65, 0x73, 0x74,
         0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x20,
         0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c,
         0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
         0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
         0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x74, 0x6f,
         0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20,
         0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x71, 0x75, 0x69, 0x74,
         0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
         0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64,
         0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e,
         0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
         0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68,
         0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
         0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x63,
         0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x20, 0x62, 0x65, 0x74,
         0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77, 0x69, 0x64,
         0x65, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
         0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x77, 0x61, 0x73, 0x20, 0x6f,
         0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
         0x69, 0x72, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x20, 0x76, 0x61,
         0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65,
         0x65, 0x73, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
         0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
         0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67,
         0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x61,
         0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6e, 0x67,
         0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x67,
         0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x65, 0x64, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68,
         0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d,
         0x38, 0x22, 0x3e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
         0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e,
         0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67,
         0x65, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6d,
         0x6f, 0x72, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79,
         0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x6f, 0x63,
         0x69, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c,
         0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x61, 0x74, 0x20,
         0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
         0x77, 0x69, 0x73, 0x65, 0x70, 0x65, 0x72, 0x70, 0x65, 0x6e, 0x64,
         0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74,
         0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70,
         0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
         0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x61,
         0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73, 0x69,
         0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x76, 0x65,
         0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x75, 0x6e,
         0x74, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
         0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
         0x69, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
         0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
         0x74, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
         0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66,
         0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66,
         0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x6e, 0x20,
         0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6f, 0x63, 0x63,
         0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x75,
         0x67, 0x75, 0xc3, 0xaa, 0x73, 0x20, 0x28, 0x45, 0x75, 0x72, 0x6f,
         0x70, 0x65, 0x75, 0x29, 0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0,
         0xb0, 0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba,
         0xd0, 0xb0, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1,
         0x97, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0,
         0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0,
         0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xbc,
         0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
         0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbd,
         0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1,
         0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x83, 0xd0, 0xbf, 0xd1, 0x80,
         0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
         0xb8, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb1,
         0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
         0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80,
         0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0,
         0x98, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc,
         0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xa0, 0xd0,
         0xb5, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x83, 0xd0, 0xb1, 0xd0, 0xbb,
         0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
         0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,
         0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0,
         0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8,
         0xd1, 0x8e, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x80, 0xd0,
         0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8,
         0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1,
         0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd8, 0xa7,
         0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,
         0xac, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84,
         0xd8, 0xa7, 0xd8, 0xb4, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9,
         0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
         0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xad, 0xd8,
         0xa7, 0xd8, 0xaa, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68,
         0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, 0x38,
         0x22, 0x20, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
         0x74, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
         0x29, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x69, 0x6e,
         0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b,
         0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65,
         0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x74,
         0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74,
         0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x3c, 0x69,
         0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
         0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x22, 0x20, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
         0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x68, 0x6f, 0x72,
         0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20,
         0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x61, 0x75, 0x74,
         0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22,
         0x6f, 0x66, 0x66, 0x22, 0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
         0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
         0x61, 0x73, 0x73, 0x3d, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c,
         0x69, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73,
         0x73, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70,
         0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
         0x22, 0x20, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61,
         0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0d,
         0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79,
         0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x20, 0x6f,
         0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x6a, 0x61, 0x76,
         0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x28, 0x6e, 0x65,
         0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65, 0x74,
         0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x7d, 0x68, 0x65, 0x69, 0x67,
         0x68, 0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c,
         0x65, 0x27, 0x73, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69,
         0x63, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x77, 0x77, 0x77, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65,
         0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x6e,
         0x64, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69,
         0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
         0x65, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f,
         0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x0a, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d,
         0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
         0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x23,
         0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x7b, 0x6d, 0x69,
         0x6e, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x0a, 0x3c,
         0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d,
         0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x74,
         0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x6f, 0x66, 0x74, 0x65,
         0x6e, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20,
         0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x2f, 0x6f, 0x70, 0x74, 0x69,
         0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
         0x20, 0x76, 0x61, 0x6c, 0x75, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54,
         0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c,
         0x21, 0x2d, 0x2d, 0x5b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
         0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x41, 0x69, 0x72, 0x70,
         0x6f, 0x72, 0x74, 0x3e, 0x0a, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
         0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
         0x77, 0x77, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
         0x77, 0xe0, 0xb8, 0xa0, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa9, 0xe0,
         0xb8, 0xb2, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xa2,
         0xe1, 0x83, 0xa5, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83,
         0x97, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x98, 0xe6,
         0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,
         0x20, 0x28, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94, 0x29, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa1,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,
         0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4,
         0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xa3, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0,
         0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80,
         0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d,
         0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0x85, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5,
         0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
         0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x97, 0xe0,
         0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
         0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0,
         0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81,
         0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0,
         0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xa4,
         0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0,
         0xa4, 0xa8, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaa,
         0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5,
         0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9f,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xad, 0xe0,
         0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
         0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0,
         0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0,
         0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
         0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0,
         0xa5, 0x87, 0xe0, 0xa4, 0xa1, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x3d, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
         0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
         0x2e, 0x70, 0x72, 0x6f, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
         0x4e, 0x61, 0x6d, 0x65, 0x28, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54,
         0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c,
         0x68, 0x74, 0x6d, 0x6c, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
         0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74,
         0x66, 0x2d, 0x38, 0x22, 0x3e, 0x3a, 0x75, 0x72, 0x6c, 0x22, 0x20,
         0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x68, 0x74,
         0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20,
         0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
         0x68, 0x65, 0x65, 0x74, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,
         0x63, 0x73, 0x73, 0x22, 0x3e, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67,
         0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c,
         0x22, 0x20, 0x78, 0x6d, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
         0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72,
         0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
         0x65, 0x65, 0x74, 0x22, 0x20, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x63,
         0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f,
         0x6e, 0x22, 0x20, 0x2f, 0x3e, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61,
         0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63,
         0x65, 0x6c, 0x6c, 0x73, 0x70, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,
         0x63, 0x73, 0x73, 0x22, 0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
         0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,
         0x68, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,
         0x74, 0x3d, 0x22, 0x31, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
         0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f,
         0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
         0x61, 0x74, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
         0x61, 0x70, 0x70, 0x6c, 0x69, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43,
         0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c,
         0x20, 0x31, 0x2e, 0x30, 0x20, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
         0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65,
         0x6c, 0x6c, 0x70, 0x61, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
         0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61,
         0x6c, 0x75, 0x65, 0x3d, 0x22, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62,
         0x73, 0x70, 0x3b, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x72, 0x6f,
         0x6c, 0x65, 0x3d, 0x22, 0x73, 0x0a, 0x3c, 0x69, 0x6e, 0x70, 0x75,
         0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64,
         0x64, 0x65, 0x6e, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
         0x67, 0x65, 0x3d, 0x22, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x22, 0x20, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
         0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d,
         0x65, 0x6e, 0x74, 0x73, 0x42, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20,
         0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
         0x3d, 0x22, 0x30, 0x22, 0x20, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
         0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d, 0x65,
         0x64, 0x69, 0x61, 0x3d, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27,
         0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,
         0x72, 0x69, 0x70, 0x74, 0x27, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
         0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65,
         0x6c, 0x3d, 0x22, 0x73, 0x74, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,
         0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
         0x3d, 0x22, 0x31, 0x22, 0x20, 0x3d, 0x27, 0x2b, 0x65, 0x6e, 0x63,
         0x6f, 0x64, 0x65, 0x55, 0x52, 0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
         0x6e, 0x65, 0x6e, 0x74, 0x28, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
         0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
         0x61, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x2c,
         0x20, 0x74, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2c,
         0x20, 0x74, 0x65, 0x78, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
         0x61, 0x6d, 0x65, 0x3d, 0x22, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73,
         0x22, 0x20, 0x63, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
         0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74,
         0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x0a, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72,
         0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
         0x65, 0x65, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
         0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20,
         0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
         0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68,
         0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65,
         0x22, 0x3e, 0xc2, 0xb7, 0x3c, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20,
         0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,
         0x6a, 0x61, 0x76, 0x61, 0x73, 0x6c, 0x3d, 0x30, 0x3b, 0x7d, 0x29,
         0x28, 0x29, 0x3b, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
         0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
         0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a,
         0x20, 0x75, 0x72, 0x6c, 0x28, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c,
         0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72,
         0x65, 0x66, 0x3d, 0x22, 0x68, 0x09, 0x09, 0x3c, 0x6c, 0x69, 0x3e,
         0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
         0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20,
         0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
         0x3d, 0x22, 0x74, 0x72, 0x75, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
         0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
         0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
         0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
         0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
         0x6c, 0x61, 0x73, 0x73, 0x3d, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
         0x20, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65,
         0x6e, 0x3d, 0x22, 0x74, 0x72, 0x65, 0x3d, 0x28, 0x6e, 0x65, 0x77,
         0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54,
         0x69, 0x6d, 0x65, 0x28, 0x29, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67,
         0x75, 0xc3, 0xaa, 0x73, 0x20, 0x28, 0x64, 0x6f, 0x20, 0x42, 0x72,
         0x61, 0x73, 0x69, 0x6c, 0x29, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3,
         0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1,
         0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb7,
         0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1,
         0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80,
         0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0,
         0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3,
         0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1,
         0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb7,
         0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1,
         0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f,
         0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1,
         0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54,
         0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55,
         0x42, 0x4c, 0x49, 0x43, 0x20, 0x22, 0x6e, 0x74, 0x2d, 0x54, 0x79,
         0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
         0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x3c, 0x6d, 0x65, 0x74,
         0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69,
         0x76, 0x3d, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6e,
         0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x45,
         0x4e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x3c, 0x68,
         0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22,
         0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2d,
         0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20,
         0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x54,
         0x44, 0x54, 0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x2d,
         0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
         0x6c, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f,
         0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c,
         0x31, 0x2f, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78,
         0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x27, 0x3b, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61,
         0x6d, 0x65, 0x3d, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e,
         0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42,
         0x65, 0x66, 0x6f, 0x72, 0x65, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
         0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64,
         0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6a, 0x73, 0x22, 0x20, 0x74,
         0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a,
         0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x28, 0x64, 0x6f, 0x63,
         0x75, 0x6d, 0x65, 0x6e, 0x74, 0x29, 0x2e, 0x72, 0x65, 0x61, 0x64,
         0x79, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x73, 0x63, 0x72,
         0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
         0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x69, 0x6d,
         0x61, 0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
         0x74, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x55,
         0x41, 0x2d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
         0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d,
         0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
         0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,
         0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
         0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63,
         0x6f, 0x6e, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c,
         0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65,
         0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74,
         0x79, 0x70, 0x65, 0x3d, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
         0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
         0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72,
         0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
         0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x20, 0x64, 0x6f, 0x63,
         0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x70, 0x75,
         0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
         0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x2e, 0x74,
         0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74,
         0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x6e, 0x70,
         0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69,
         0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x68,
         0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
         0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,
         0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c,
         0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74,
         0x70, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54,
         0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e, 0x30, 0x31,
         0x20, 0x54, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
         0x4e, 0x61, 0x6d, 0x65, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70,
         0x74, 0x27, 0x29, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
         0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22,
         0x20, 0x6e, 0x61, 0x6d, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
         0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
         0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x22, 0x20, 0x73, 0x74, 0x79,
         0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
         0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x64, 0x6f, 0x63,
         0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c,
         0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x3d,
         0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72,
         0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
         0x28, 0x27, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,
         0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69,
         0x70, 0x74, 0x27, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
         0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e,
         0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x45,
         0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61,
         0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x73, 0x6e, 0x69, 0x63, 0x61,
         0x6c, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
         0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x43, 0x2f,
         0x2f, 0x44, 0x54, 0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34,
         0x2e, 0x30, 0x31, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
         0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65,
         0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
         0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74,
         0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63,
         0x73, 0x73, 0x22, 0x3e, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x64,
         0x74, 0x64, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20,
         0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x2d,
         0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43, 0x6f, 0x6e, 0x74,
         0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x64, 0x69, 0x6e,
         0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73,
         0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x68,
         0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
         0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,
         0x0a, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69,
         0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b,
         0x22, 0x3e, 0x3c, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
         0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
         0x2f, 0x77, 0x77, 0x77, 0x2e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
         0x27, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
         0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x3e, 0xd0, 0xb4, 0xd0, 0xb5,
         0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
         0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x81,
         0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1,
         0x82, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb8,
         0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0,
         0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2,
         0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0,
         0xbf, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81,
         0xd1, 0x82, 0xd0, 0xb8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81, 0xe0,
         0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf,
         0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x89,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
         0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,
         0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbe,
         0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,
         0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82,
         0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89,
         0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
         0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb5, 0xe0,
         0xa4, 0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9e,
         0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
         0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0,
         0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x88,
         0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
         0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0,
         0xa4, 0xbe];
}
mod brotli_alloc {
    #![cfg(feature = "std")]
    use core;
    use core::ops;
    use std::boxed::Box;
    use std::vec::Vec;
    pub struct WrapBox<T> {
        v: Vec<T>,
    }
    impl <T> core::default::Default for WrapBox<T> {
        fn default() -> Self {
            let v: Vec<T> = Vec::new();
            return WrapBox::<T>{v: v,};
        }
    }
    impl <T> ops::Index<usize> for WrapBox<T> {
        type Output = T;
        fn index(&self, index: usize) -> &T { return &self.v[index] }
    }
    impl <T> ops::IndexMut<usize> for WrapBox<T> {
        fn index_mut(&mut self, index: usize) -> &mut T {
            return &mut self.v[index]
        }
    }
    impl <T> super::SliceWrapper<T> for WrapBox<T> {
        fn slice(&self) -> &[T] { return &self.v[..] }
    }
    impl <T> super::SliceWrapperMut<T> for WrapBox<T> {
        fn slice_mut(&mut self) -> &mut [T] { return &mut self.v[..] }
    }
    pub struct BrotliAlloc<T: core::clone::Clone> {
        pub default_value: T,
    }
    impl <T: core::clone::Clone + Default> BrotliAlloc<T> {
        pub fn new() -> BrotliAlloc<T> {
            return BrotliAlloc::<T>{default_value: T::default(),};
        }
        pub fn take_ownership(&self, data: Vec<T>) -> WrapBox<T> {
            WrapBox::<T>{v: data,}
        }
    }
    impl <T: core::clone::Clone> super::Allocator<T> for BrotliAlloc<T> {
        type AllocatedMemory = WrapBox<T>;
        fn alloc_cell(self: &mut BrotliAlloc<T>, len: usize) -> WrapBox<T> {
            let v: Vec<T> =
                ::std_alloc::vec::from_elem(self.default_value.clone(), len);
            return WrapBox::<T>{v: v,};
        }
        fn free_cell(self: &mut BrotliAlloc<T>, _data: WrapBox<T>) { }
    }
}
#[macro_use]
mod bit_reader {
    #![allow(non_snake_case)]
    use core::default::Default;
    macro_rules! xprintln(($ a : expr) => () ; ($ a : expr, $ b : expr) => ()
                          ; ($ a : expr, $ b : expr, $ c : expr) => () ;
                          ($ a : expr, $ b : expr, $ c : expr, $ d : expr) =>
                          () ;
                          ($ a : expr, $ b : expr, $ c : expr, $ d : expr, $ e
                           : expr) => () ;
                          ($ a : expr, $ b : expr, $ c : expr, $ d : expr, $ e
                           : expr, $ f : expr) => () ;);
    pub const BROTLI_SHORT_FILL_BIT_WINDOW_READ: u32 = 4;
    #[allow(non_camel_case_types)]
    pub type reg_t = u64;
    #[allow(non_upper_case_globals)]
    const kBitMask: [u32; 33] =
        [0x0000, 0x00000001, 0x00000003, 0x00000007, 0x0000000F, 0x0000001F,
         0x0000003F, 0x0000007F, 0x000000FF, 0x000001FF, 0x000003FF,
         0x000007FF, 0x00000FFF, 0x00001FFF, 0x00003FFF, 0x00007FFF,
         0x0000FFFF, 0x0001FFFF, 0x0003FFFF, 0x0007FFFF, 0x000FFFFF,
         0x001FFFFF, 0x003FFFFF, 0x007FFFFF, 0x00FFFFFF, 0x01FFFFFF,
         0x03FFFFFF, 0x07FFFFFF, 0x0FFFFFFF, 0x1FFFFFFF, 0x3FFFFFFF,
         0x7FFFFFFF, 0xFFFFFFFF];
    #[inline]
    pub fn BitMask(n: u32) -> u32 {
        if false {
            !((0xffffffffu32) << n)
        } else { unsafe { *kBitMask.get_unchecked(n as usize) } }
    }
    pub struct BrotliBitReader {
        pub val_: reg_t,
        pub bit_pos_: u32,
        pub next_in: u32,
        pub avail_in: u32,
    }
    impl Default for BrotliBitReader {
        fn default() -> Self {
            BrotliBitReader{val_: 0, bit_pos_: 0, next_in: 0, avail_in: 0,}
        }
    }
    pub struct BrotliBitReaderState {
        pub val_: reg_t,
        pub bit_pos_: u32,
        pub next_in: u32,
        pub avail_in: u32,
    }
    impl Default for BrotliBitReaderState {
        #[inline]
        fn default() -> Self {
            BrotliBitReaderState{val_: 0,
                                 bit_pos_: 0,
                                 next_in: 0,
                                 avail_in: 0,}
        }
    }
    pub fn BrotliBitReaderSaveState(from: &BrotliBitReader)
     -> BrotliBitReaderState {
        BrotliBitReaderState{val_: from.val_,
                             bit_pos_: from.bit_pos_,
                             next_in: from.next_in,
                             avail_in: from.avail_in,}
    }
    pub fn BrotliBitReaderRestoreState(to: &mut BrotliBitReader,
                                       from: &BrotliBitReaderState) {
        to.val_ = from.val_;
        to.bit_pos_ = from.bit_pos_;
        to.next_in = from.next_in;
        to.avail_in = from.avail_in;
    }
    pub fn BrotliGetAvailableBits(br: &BrotliBitReader) -> u32 {
        ((::core::mem::size_of::<reg_t>() as u32) << 3) - br.bit_pos_
    }
    pub fn BrotliGetRemainingBytes(br: &BrotliBitReader) -> u32 {
        br.avail_in + (BrotliGetAvailableBits(br) >> 3)
    }
    pub fn BrotliCheckInputAmount(br: &BrotliBitReader, num: u32) -> bool {
        br.avail_in >= num
    }
    #[inline(always)]
    fn BrotliLoad16LE(input: &[u8], next_in_u32: u32) -> u16 {
        let next_in: usize = next_in_u32 as usize;
        (unsafe { *input.get_unchecked(next_in) } as u16) |
            ((unsafe { *input.get_unchecked(next_in + 1) } as u16) << 8)
    }
    #[inline(always)]
    fn BrotliLoad32LE(input: &[u8], next_in_u32: u32) -> u32 {
        let next_in: usize = next_in_u32 as usize;
        let mut four_byte: [u8; 4] = [0; 4];
        four_byte.clone_from_slice(unsafe {
                                       (&input[next_in..next_in
                                                                            +
                                                                            4])
                                   });
        (four_byte[0] as u32) | ((four_byte[1] as u32) << 8) |
            ((four_byte[2] as u32) << 16) | ((four_byte[3] as u32) << 24)
    }
    #[inline(always)]
    fn BrotliLoad64LE(input: &[u8], next_in_u32: u32) -> u64 {
        let next_in: usize = next_in_u32 as usize;
        let mut eight_byte: [u8; 8] = [0; 8];
        eight_byte.clone_from_slice(unsafe {
                                        (&input[next_in..next_in
                                                                             +
                                                                             8])
                                    });
        (eight_byte[0] as u64) | ((eight_byte[1] as u64) << 8) |
            ((eight_byte[2] as u64) << 16) | ((eight_byte[3] as u64) << 24) |
            ((eight_byte[4] as u64) << 32) | ((eight_byte[5] as u64) << 40) |
            ((eight_byte[6] as u64) << 48) | ((eight_byte[7] as u64) << 56)
    }
    pub const BROTLI_ALIGNED_READ: u8 = 0;
    #[inline(always)]
    pub fn BrotliFillBitWindow(br: &mut BrotliBitReader, n_bits: u32,
                               input: &[u8]) {
        if ::core::mem::size_of::<reg_t>() == 8 {
            if (n_bits <= 8) {
                if (BROTLI_ALIGNED_READ == 0 && br.bit_pos_ >= 56) {
                    br.val_ >>= 56;
                    br.bit_pos_ ^= 56;
                    br.val_ |= BrotliLoad64LE(input, br.next_in) << 8;
                    br.avail_in -= 7;
                    br.next_in += 7;
                }
            } else if (BROTLI_ALIGNED_READ == 0 && n_bits <= 16) {
                if (br.bit_pos_ >= 48) {
                    br.val_ >>= 48;
                    br.bit_pos_ ^= 48;
                    br.val_ |= BrotliLoad64LE(input, br.next_in) << 16;
                    br.avail_in -= 6;
                    br.next_in += 6;
                }
            } else if br.bit_pos_ >= 32 {
                br.val_ >>= 32;
                br.bit_pos_ ^= 32;
                br.val_ |= (BrotliLoad32LE(input, br.next_in) as reg_t) << 32;
                br.avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
                br.next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
            }
        } else if (BROTLI_ALIGNED_READ == 0 && (n_bits <= 8)) {
            if (br.bit_pos_ >= 24) {
                br.val_ >>= 24;
                br.bit_pos_ ^= 24;
                br.val_ |= (BrotliLoad32LE(input, br.next_in) << 8) as u64;
                br.avail_in -= 3;
                br.next_in += 3;
            }
        } else if br.bit_pos_ >= 16 {
            br.val_ >>= 16;
            br.bit_pos_ ^= 16;
            br.val_ |= (BrotliLoad16LE(input, br.next_in) as reg_t) << 16;
            br.avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
            br.next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
        }
    }
    #[inline(always)]
    fn BrotliFillBitWindowCompileTimeNbits(br: &mut BrotliBitReader,
                                           n_bits: u32, input: &[u8]) {
        if ::core::mem::size_of::<reg_t>() == 8 {
            if BROTLI_ALIGNED_READ == 0 && n_bits <= 8 {
                if br.bit_pos_ >= 56 {
                    br.val_ >>= 56;
                    br.bit_pos_ ^= 56;
                    br.val_ |= BrotliLoad64LE(input, br.next_in) << 8;
                    br.avail_in -= 7;
                    br.next_in += 7;
                }
            } else if BROTLI_ALIGNED_READ == 0 && n_bits <= 16 {
                if br.bit_pos_ >= 48 {
                    br.val_ >>= 48;
                    br.bit_pos_ ^= 48;
                    br.val_ |= BrotliLoad64LE(input, br.next_in) << 16;
                    br.avail_in -= 6;
                    br.next_in += 6;
                }
            } else if br.bit_pos_ >= 32 {
                br.val_ >>= 32;
                br.bit_pos_ ^= 32;
                br.val_ |= (BrotliLoad32LE(input, br.next_in) as reg_t) << 32;
                br.avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
                br.next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
            }
        } else if n_bits <= 8 {
            if br.bit_pos_ >= 24 {
                br.val_ >>= 24;
                br.bit_pos_ ^= 24;
                br.val_ |= (BrotliLoad32LE(input, br.next_in) as reg_t) << 8;
                br.avail_in -= 3;
                br.next_in += 3;
            }
        } else if br.bit_pos_ >= 16 {
            br.val_ >>= 16;
            br.bit_pos_ ^= 16;
            br.val_ |= (BrotliLoad16LE(input, br.next_in) as reg_t) << 16;
            br.avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
            br.next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
        }
    }
    pub fn BrotliFillBitWindow16(br: &mut BrotliBitReader, input: &[u8]) {
        BrotliFillBitWindowCompileTimeNbits(br, 17, input);
    }
    pub fn BrotliPullByte(br: &mut BrotliBitReader, input: &[u8]) -> bool {
        if br.avail_in == 0 { return false; }
        br.val_ >>= 8;
        if ::core::mem::size_of::<reg_t>() == 8 {
            br.val_ |=
                (unsafe { *input.get_unchecked(br.next_in as usize) } as
                     reg_t) << 56;
        } else {
            br.val_ |=
                (unsafe { *input.get_unchecked(br.next_in as usize) } as
                     reg_t) << 24;
        }
        br.bit_pos_ -= 8;
        br.avail_in -= 1;
        br.next_in += 1;
        true
    }
    #[inline(always)]
    pub fn BrotliGetBitsUnmasked(br: &BrotliBitReader) -> reg_t {
        br.val_ >> br.bit_pos_
    }
    #[inline(always)]
    pub fn BrotliGet16BitsUnmasked(br: &mut BrotliBitReader, input: &[u8])
     -> u32 {
        BrotliFillBitWindowCompileTimeNbits(br, 16, input);
        (BrotliGetBitsUnmasked(br) & (0xffffffffu32 as reg_t)) as u32
    }
    pub fn BrotliGetBits(br: &mut BrotliBitReader, n_bits: u32, input: &[u8])
     -> u32 {
        BrotliFillBitWindow(br, n_bits, input);
        (BrotliGetBitsUnmasked(br) as u32) & BitMask(n_bits)
    }
    #[allow(dead_code)]
    pub fn BrotliGetConstantNBits(br: &mut BrotliBitReader, n_bits: u32,
                                  input: &[u8]) -> u32 {
        BrotliFillBitWindowCompileTimeNbits(br, n_bits, input);
        (BrotliGetBitsUnmasked(br) as u32) & BitMask(n_bits)
    }
    pub fn BrotliSafeGetBits(br: &mut BrotliBitReader, n_bits: u32,
                             val: &mut u32, input: &[u8]) -> bool {
        while BrotliGetAvailableBits(br) < n_bits {
            if !BrotliPullByte(br, input) { return false; }
        }
        *val = (BrotliGetBitsUnmasked(br) as u32) & BitMask(n_bits);
        true
    }
    #[inline(always)]
    pub fn BrotliDropBits(br: &mut BrotliBitReader, n_bits: u32) {
        br.bit_pos_ += n_bits;
    }
    pub fn BrotliBitReaderUnload(br: &mut BrotliBitReader) {
        let unused_bytes: u32 = BrotliGetAvailableBits(br) >> 3;
        let unused_bits: u32 = unused_bytes << 3;
        br.avail_in += unused_bytes;
        br.next_in -= unused_bytes;
        if unused_bits as usize == (::core::mem::size_of::<reg_t>() << 3) {
            br.val_ = 0;
        } else { br.val_ <<= unused_bits; }
        br.bit_pos_ += unused_bits;
    }
    #[inline(always)]
    pub fn BrotliTakeBits(br: &mut BrotliBitReader, n_bits: u32,
                          val: &mut u32) {
        *val = (BrotliGetBitsUnmasked(br) as u32) & BitMask(n_bits);
        ;
        BrotliDropBits(br, n_bits);
    }
    #[inline(always)]
    pub fn BrotliReadBits(br: &mut BrotliBitReader, n_bits: u32, input: &[u8])
     -> u32 {
        if ::core::mem::size_of::<reg_t>() == 8 || (n_bits <= 16) {
            let mut val: u32 = 0;
            BrotliFillBitWindow(br, n_bits, input);
            BrotliTakeBits(br, n_bits, &mut val);
            val
        } else {
            let mut low_val: u32 = 0;
            let mut high_val: u32 = 0;
            BrotliFillBitWindowCompileTimeNbits(br, 16, input);
            BrotliTakeBits(br, 16, &mut low_val);
            BrotliFillBitWindowCompileTimeNbits(br, 8, input);
            BrotliTakeBits(br, n_bits - 16, &mut high_val);
            low_val | (high_val << 16)
        }
    }
    #[allow(dead_code)]
    pub fn BrotliReadConstantNBits(br: &mut BrotliBitReader, n_bits: u32,
                                   input: &[u8]) -> u32 {
        if ::core::mem::size_of::<reg_t>() == 8 || (n_bits <= 16) {
            let mut val: u32 = 0;
            BrotliFillBitWindowCompileTimeNbits(br, n_bits, input);
            BrotliTakeBits(br, n_bits, &mut val);
            val
        } else {
            let mut low_val: u32 = 0;
            let mut high_val: u32 = 0;
            BrotliFillBitWindowCompileTimeNbits(br, 16, input);
            BrotliTakeBits(br, 16, &mut low_val);
            BrotliFillBitWindowCompileTimeNbits(br, 8, input);
            BrotliTakeBits(br, n_bits - 16, &mut high_val);
            low_val | (high_val << 16)
        }
    }
    pub fn BrotliSafeReadBits(br: &mut BrotliBitReader, n_bits: u32,
                              val: &mut u32, input: &[u8]) -> bool {
        while BrotliGetAvailableBits(br) < n_bits {
            if !BrotliPullByte(br, input) { return false; }
        }
        BrotliTakeBits(br, n_bits, val);
        true
    }
    pub fn BrotliJumpToByteBoundary(br: &mut BrotliBitReader) -> bool {
        let pad_bits_count: u32 = BrotliGetAvailableBits(br) & 0x7;
        let mut pad_bits: u32 = 0;
        if pad_bits_count != 0 {
            BrotliTakeBits(br, pad_bits_count, &mut pad_bits);
        }
        pad_bits == 0
    }
    #[allow(dead_code)]
    pub fn BrotliPeekByte(br: &mut BrotliBitReader, mut offset: u32,
                          input: &[u8]) -> i32 {
        let available_bits: u32 = BrotliGetAvailableBits(br);
        let bytes_left: u32 = (available_bits >> 3);
        if !((available_bits & 7) == 0) {
            ::core::panicking::panic("assertion failed: (available_bits & 7) == 0")
        };
        if offset < bytes_left {
            return ((BrotliGetBitsUnmasked(br) >> ((offset << 3)) as u32) &
                        0xFF) as i32;
        }
        offset -= bytes_left;
        if offset < br.avail_in {
            return unsafe {
                       *input.get_unchecked(br.next_in as usize +
                                                offset as usize)
                   } as i32;
        }
        -1
    }
    pub fn BrotliCopyBytes(dest: &mut [u8], br: &mut BrotliBitReader,
                           mut num: u32, input: &[u8]) {
        let mut offset: u32 = 0;
        while BrotliGetAvailableBits(br) >= 8 && num > 0 {
            *unsafe { dest.get_unchecked_mut(offset as usize) } =
                BrotliGetBitsUnmasked(br) as u8;
            BrotliDropBits(br, 8);
            offset += 1;
            num -= 1;
        }
        for index in 0..num {
            *unsafe {
                 dest.get_unchecked_mut(offset as usize + index as usize)
             } =
                unsafe {
                    *input.get_unchecked(br.next_in as usize + index as usize)
                };
        }
        br.avail_in -= num;
        br.next_in += num;
    }
    pub fn BrotliInitBitReader(br: &mut BrotliBitReader) {
        br.val_ = 0;
        br.bit_pos_ = (::core::mem::size_of::<reg_t>() << 3) as u32;
    }
    pub fn BrotliWarmupBitReader(br: &mut BrotliBitReader, input: &[u8])
     -> bool {
        let _aligned_read_mask: usize =
            (::core::mem::size_of::<reg_t>() >> 1) - 1;
        if BrotliGetAvailableBits(br) == 0 && !BrotliPullByte(br, input) {
            return false;
        }
        true
    }
}
mod huffman {
    #![allow(non_snake_case)]
    #![allow(non_upper_case_globals)]
    mod tests { }
    use ::core;
    use alloc;
    use alloc::Allocator;
    use alloc::SliceWrapper;
    use alloc::SliceWrapperMut;
    use core::default::Default;
    pub const BROTLI_HUFFMAN_MAX_CODE_LENGTH: usize = 15;
    pub const BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE: usize = 704;
    pub const BROTLI_HUFFMAN_MAX_TABLE_SIZE: u32 = 1080;
    pub const BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH: u32 = 5;
    #[repr(C)]
    #[no_mangle]
    pub struct HuffmanCode {
        pub value: u16,
        pub bits: u8,
    }
    impl ::core::marker::StructuralPartialEq for HuffmanCode { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialEq for HuffmanCode {
        #[inline]
        fn eq(&self, other: &HuffmanCode) -> bool {
            match *other {
                HuffmanCode { value: ref __self_1_0, bits: ref __self_1_1 } =>
                match *self {
                    HuffmanCode { value: ref __self_0_0, bits: ref __self_0_1
                    } =>
                    (*__self_0_0) == (*__self_1_0) &&
                        (*__self_0_1) == (*__self_1_1),
                },
            }
        }
        #[inline]
        fn ne(&self, other: &HuffmanCode) -> bool {
            match *other {
                HuffmanCode { value: ref __self_1_0, bits: ref __self_1_1 } =>
                match *self {
                    HuffmanCode { value: ref __self_0_0, bits: ref __self_0_1
                    } =>
                    (*__self_0_0) != (*__self_1_0) ||
                        (*__self_0_1) != (*__self_1_1),
                },
            }
        }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for HuffmanCode { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for HuffmanCode {
        #[inline]
        fn clone(&self) -> HuffmanCode {
            {
                let _: ::core::clone::AssertParamIsClone<u16>;
                let _: ::core::clone::AssertParamIsClone<u8>;
                *self
            }
        }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for HuffmanCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                HuffmanCode { value: ref __self_0_0, bits: ref __self_0_1 } =>
                {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_struct(f,
                                                             "HuffmanCode");
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "value",
                                                        &&(*__self_0_0));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "bits",
                                                        &&(*__self_0_1));
                    ::core::fmt::DebugStruct::finish(&mut debug_trait_builder)
                }
            }
        }
    }
    impl HuffmanCode {
        pub fn eq(&self, other: &Self) -> bool {
            self.value == other.value && self.bits == other.bits
        }
    }
    impl Default for HuffmanCode {
        fn default() -> Self { HuffmanCode{value: 0, bits: 0,} }
    }
    pub struct HuffmanTreeGroup<Alloc32: Allocator<u32>,
                                AllocHC: Allocator<HuffmanCode>> {
        pub htrees: Alloc32::AllocatedMemory,
        pub codes: AllocHC::AllocatedMemory,
        pub alphabet_size: u16,
        pub max_symbol: u16,
        pub num_htrees: u16,
    }
    impl <AllocU32: alloc::Allocator<u32>,
          AllocHC: alloc::Allocator<HuffmanCode>>
     HuffmanTreeGroup<AllocU32, AllocHC> {
        pub fn init(self: &mut Self, mut alloc_u32: &mut AllocU32,
                    mut alloc_hc: &mut AllocHC, alphabet_size: u16,
                    max_symbol: u16, ntrees: u16) {
            self.reset(&mut alloc_u32, &mut alloc_hc);
            self.alphabet_size = alphabet_size;
            self.max_symbol = max_symbol;
            self.num_htrees = ntrees;
            let nt = ntrees as usize;
            core::mem::replace(&mut self.htrees, alloc_u32.alloc_cell(nt));
            core::mem::replace(&mut self.codes,
                               alloc_hc.alloc_cell(nt *
                                                       BROTLI_HUFFMAN_MAX_TABLE_SIZE
                                                           as usize));
        }
        #[allow(dead_code)]
        pub fn get_tree_mut(&mut self, index: u32) -> &mut [HuffmanCode] {
            let start: usize =
                unsafe { *self.htrees.slice().get_unchecked(index as usize) }
                    as usize;
            unsafe { (&mut self.codes.slice_mut()[start..]) }
        }
        #[allow(dead_code)]
        pub fn get_tree(&self, index: u32) -> &[HuffmanCode] {
            let start: usize =
                unsafe { *self.htrees.slice().get_unchecked(index as usize) }
                    as usize;
            unsafe { (&self.codes.slice()[start..]) }
        }
        pub fn reset(self: &mut Self, alloc_u32: &mut AllocU32,
                     alloc_hc: &mut AllocHC) {
            alloc_u32.free_cell(core::mem::replace(&mut self.htrees,
                                                   AllocU32::AllocatedMemory::default()));
            alloc_hc.free_cell(core::mem::replace(&mut self.codes,
                                                  AllocHC::AllocatedMemory::default()));
        }
        pub fn build_hgroup_cache(&self) -> [&[HuffmanCode]; 256] {
            let mut ret: [&[HuffmanCode]; 256] = [&[]; 256];
            let mut index: usize = 0;
            for htree in self.htrees.slice() {
                ret[index] =
                    unsafe {
                        (&(&self.codes).slice()[*htree as
                                                                    usize..])
                    };
                index += 1;
            }
            ret
        }
    }
    impl <AllocU32: alloc::Allocator<u32>,
          AllocHC: alloc::Allocator<HuffmanCode>> Default for
     HuffmanTreeGroup<AllocU32, AllocHC> {
        fn default() -> Self {
            HuffmanTreeGroup::<AllocU32,
                               AllocHC>{htrees:
                                            AllocU32::AllocatedMemory::default(),
                                        codes:
                                            AllocHC::AllocatedMemory::default(),
                                        max_symbol: 0,
                                        alphabet_size: 0,
                                        num_htrees: 0,}
        }
    }
    const BROTLI_REVERSE_BITS_MAX: usize = 8;
    const BROTLI_REVERSE_BITS_BASE: u8 = 0;
    const kReverseBits: [u8; (1 << BROTLI_REVERSE_BITS_MAX)] =
        [0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50,
         0xD0, 0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8,
         0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04,
         0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4,
         0x34, 0xB4, 0x74, 0xF4, 0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C,
         0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82,
         0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32,
         0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
         0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA, 0x06, 0x86, 0x46,
         0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6,
         0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E,
         0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
         0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71,
         0xF1, 0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99,
         0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25,
         0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
         0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D,
         0xDD, 0x3D, 0xBD, 0x7D, 0xFD, 0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3,
         0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3, 0x0B,
         0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB,
         0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67,
         0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7, 0x0F, 0x8F,
         0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F,
         0xBF, 0x7F, 0xFF];
    const BROTLI_REVERSE_BITS_LOWEST: u32 =
        (1u32 <<
             (BROTLI_REVERSE_BITS_MAX as u32 - 1 +
                  BROTLI_REVERSE_BITS_BASE as u32));
    fn BrotliReverseBits(num: u32) -> u32 {
        unsafe { *kReverseBits.get_unchecked(num as usize) as u32}
    }
    fn ReplicateValue(table: &mut [HuffmanCode], offset: u32, step: i32,
                      mut end: i32, code: HuffmanCode) {
        loop  {
            end -= step;
            *unsafe {
                 table.get_unchecked_mut(offset as usize + end as usize)
             } = code;
            if end <= 0 { break ; }
        }
    }
    fn NextTableBitSize(count: &[u16], mut len: i32, root_bits: i32) -> i32 {
        let mut left: i32 = 1 << (len - root_bits);
        while len < BROTLI_HUFFMAN_MAX_CODE_LENGTH as i32 {
            left -= unsafe { *count.get_unchecked(len as usize) } as i32;
            if left <= 0 { break ; }
            len += 1;
            left <<= 1;
        }
        len - root_bits
    }
    pub fn BrotliBuildCodeLengthsHuffmanTable(mut table: &mut [HuffmanCode],
                                              code_lengths: &[u8],
                                              count: &[u16]) {
        let mut sorted: [i32; 18] = [0; 18];
        let mut offset:
                [i32; (BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH + 1) as
                          usize] =
            [0; (BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH + 1) as usize];
        if !(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH as usize <=
                 BROTLI_REVERSE_BITS_MAX as usize) {
            ::core::panicking::panic("assertion failed: BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH as usize <=\\n    BROTLI_REVERSE_BITS_MAX as usize")
        };
        let mut symbol: i32 = -1;
        let mut bits: i32 = 1;
        for _ in 0..BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH {
            symbol += unsafe { *count.get_unchecked(bits as usize) } as i32;
            *unsafe { offset.get_unchecked_mut(bits as usize) } = symbol;
            bits += 1;
        }
        *unsafe { offset.get_unchecked_mut(0) } = 17;
        symbol = 18;
        loop  {
            for _ in 0..6 {
                symbol -= 1;
                let index =
                    unsafe {
                        *offset.get_unchecked(
                            *code_lengths.get_unchecked(symbol
                                                                              as
                                                                              usize)
                                                  as usize)
                    };
                *unsafe {
                     offset.get_unchecked_mut(
                         *code_lengths.get_unchecked(symbol
                                                                              as
                                                                              usize)
                                                  as usize)
                 } -= 1;
                *unsafe { sorted.get_unchecked_mut(index as usize) } = symbol;
            }
            if symbol == 0 { break ; }
        }
        const table_size: i32 =
            1 << BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH;
        if unsafe { *offset.get_unchecked(0) } == 0 {
            let code: HuffmanCode =
                HuffmanCode{bits: 0,
                            value:
                                unsafe { *sorted.get_unchecked(0) } as u16,};
            for val in
                unsafe {
                    (&mut table[0..table_size as usize])
                }.iter_mut() {
                *val = code;
            }
            return;
        }
        let mut key: u32 = 0;
        let mut key_step: u32 = BROTLI_REVERSE_BITS_LOWEST;
        symbol = 0;
        bits = 1;
        let mut step: i32 = 2;
        loop  {
            let mut code: HuffmanCode =
                HuffmanCode{bits: (bits as u8), value: 0,};
            let mut bits_count: i32 =
                unsafe { *count.get_unchecked(bits as usize) } as i32;
            while bits_count != 0 {
                code.value =
                    unsafe { *sorted.get_unchecked(symbol as usize) } as u16;
                symbol += 1;
                ReplicateValue(&mut table, BrotliReverseBits(key), step,
                               table_size, code);
                key += key_step;
                bits_count -= 1;
            }
            step <<= 1;
            key_step >>= 1;
            bits += 1;
            if !(bits <= BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH as i32) {
                break ;
            }
        }
    }
    pub fn BrotliBuildHuffmanTable(mut root_table: &mut [HuffmanCode],
                                   root_bits: i32, symbol_lists: &[u16],
                                   symbol_lists_offset: usize,
                                   count: &mut [u16]) -> u32 {
        let mut code: HuffmanCode = HuffmanCode{bits: 0, value: 0,};
        let mut max_length: i32 = -1;
        if !(root_bits as isize <= BROTLI_REVERSE_BITS_MAX as isize) {
            ::core::panicking::panic("assertion failed: root_bits as isize <= BROTLI_REVERSE_BITS_MAX as isize")
        };
        if !(BROTLI_HUFFMAN_MAX_CODE_LENGTH as isize - root_bits as isize <=
                 BROTLI_REVERSE_BITS_MAX as isize) {
            ::core::panicking::panic("assertion failed: BROTLI_HUFFMAN_MAX_CODE_LENGTH as isize - root_bits as isize <=\\n    BROTLI_REVERSE_BITS_MAX as isize")
        };
        while unsafe {
                  *symbol_lists.get_unchecked(((symbol_lists_offset as isize)
                                                   + max_length as isize) as
                                                  usize)
              } == 0xFFFF {
            max_length -= 1;
        }
        max_length += BROTLI_HUFFMAN_MAX_CODE_LENGTH as i32 + 1;
        let mut table_free_offset: u32 = 0;
        let mut table_bits: i32 = root_bits;
        let mut table_size: i32 = 1 << table_bits;
        let mut total_size: i32 = table_size;
        if table_bits > max_length {
            table_bits = max_length;
            table_size = 1 << table_bits;
        }
        let mut key: u32 = 0;
        let mut key_step: u32 = BROTLI_REVERSE_BITS_LOWEST;
        let mut bits: i32 = 1;
        let mut step: i32 = 2;
        loop  {
            code.bits = bits as u8;
            let mut symbol: i32 =
                bits - (BROTLI_HUFFMAN_MAX_CODE_LENGTH as i32 + 1);
            let mut bits_count: i32 =
                unsafe { *count.get_unchecked(bits as usize) } as i32;
            while bits_count != 0 {
                symbol =
                    unsafe {
                        *symbol_lists.get_unchecked((symbol_lists_offset as
                                                         isize +
                                                         symbol as isize) as
                                                        usize)
                    } as i32;
                code.value = symbol as u16;
                ReplicateValue(&mut root_table,
                               table_free_offset + BrotliReverseBits(key),
                               step, table_size, code);
                key += key_step;
                bits_count -= 1;
            }
            step <<= 1;
            key_step >>= 1;
            bits += 1;
            if !(bits <= table_bits) { break ; }
        }
        while total_size != table_size {
            for index in 0..table_size {
                *unsafe {
                     root_table.get_unchecked_mut(table_free_offset as usize +
                                                      table_size as usize +
                                                      index as usize)
                 } =
                    unsafe {
                        *root_table.get_unchecked(table_free_offset as usize +
                                                      index as usize)
                    };
            }
            table_size <<= 1;
        }
        key_step = BROTLI_REVERSE_BITS_LOWEST >> (root_bits - 1);
        let mut sub_key: u32 = BROTLI_REVERSE_BITS_LOWEST << 1;
        let mut sub_key_step: u32 = BROTLI_REVERSE_BITS_LOWEST;
        step = 2;
        let mut len: i32 = root_bits + 1;
        while len <= max_length {
            let mut symbol: i32 =
                len - (BROTLI_HUFFMAN_MAX_CODE_LENGTH as i32 + 1);
            while unsafe { *count.get_unchecked(len as usize) } != 0 {
                if sub_key == (BROTLI_REVERSE_BITS_LOWEST << 1u32) {
                    table_free_offset += table_size as u32;
                    table_bits = NextTableBitSize(count, len, root_bits);
                    table_size = 1 << table_bits;
                    total_size += table_size;
                    sub_key = BrotliReverseBits(key);
                    key += key_step;
                    (*unsafe {
                          root_table.get_unchecked_mut(sub_key as usize)
                      }).bits = (table_bits + root_bits) as u8;
                    (*unsafe {
                          root_table.get_unchecked_mut(sub_key as usize)
                      }).value =
                        ((table_free_offset as usize) - sub_key as usize) as
                            u16;
                    sub_key = 0;
                }
                code.bits = (len - root_bits) as u8;
                symbol =
                    unsafe {
                        *symbol_lists.get_unchecked((symbol_lists_offset as
                                                         isize +
                                                         symbol as isize) as
                                                        usize)
                    } as i32;
                code.value = symbol as u16;
                ReplicateValue(&mut root_table,
                               table_free_offset + BrotliReverseBits(sub_key),
                               step, table_size, code);
                sub_key += sub_key_step;
                *unsafe { count.get_unchecked_mut(len as usize) } -= 1;
            }
            step <<= 1;
            sub_key_step >>= 1;
            len += 1
        }
        total_size as u32
    }
    pub fn BrotliBuildSimpleHuffmanTable(table: &mut [HuffmanCode],
                                         root_bits: i32, val: &[u16],
                                         num_symbols: u32) -> u32 {
        let mut table_size: u32 = 1;
        let goal_size: u32 = 1u32 << root_bits;
        if !(num_symbols <= 4) {
            ::core::panicking::panic("assertion failed: num_symbols <= 4")
        };
        if num_symbols == 0 {
            (*unsafe { table.get_unchecked_mut(0) }).bits = 0;
            (*unsafe { table.get_unchecked_mut(0) }).value =
                unsafe { *val.get_unchecked(0) };
        } else if num_symbols == 1 {
            (*unsafe { table.get_unchecked_mut(0) }).bits = 1;
            (*unsafe { table.get_unchecked_mut(1) }).bits = 1;
            if unsafe { *val.get_unchecked(1) } >
                   unsafe { *val.get_unchecked(0) } {
                (*unsafe { table.get_unchecked_mut(0) }).value =
                    unsafe { *val.get_unchecked(0) };
                (*unsafe { table.get_unchecked_mut(1) }).value =
                    unsafe { *val.get_unchecked(1) };
            } else {
                (*unsafe { table.get_unchecked_mut(0) }).value =
                    unsafe { *val.get_unchecked(1) };
                (*unsafe { table.get_unchecked_mut(1) }).value =
                    unsafe { *val.get_unchecked(0) };
            }
            table_size = 2;
        } else if num_symbols == 2 {
            (*unsafe { table.get_unchecked_mut(0) }).bits = 1;
            (*unsafe { table.get_unchecked_mut(0) }).value =
                unsafe { *val.get_unchecked(0) };
            (*unsafe { table.get_unchecked_mut(2) }).bits = 1;
            (*unsafe { table.get_unchecked_mut(2) }).value =
                unsafe { *val.get_unchecked(0) };
            if unsafe { *val.get_unchecked(2) } >
                   unsafe { *val.get_unchecked(1) } {
                (*unsafe { table.get_unchecked_mut(1) }).value =
                    unsafe { *val.get_unchecked(1) };
                (*unsafe { table.get_unchecked_mut(3) }).value =
                    unsafe { *val.get_unchecked(2) };
            } else {
                (*unsafe { table.get_unchecked_mut(1) }).value =
                    unsafe { *val.get_unchecked(2) };
                (*unsafe { table.get_unchecked_mut(3) }).value =
                    unsafe { *val.get_unchecked(1) };
            }
            (*unsafe { table.get_unchecked_mut(1) }).bits = 2;
            (*unsafe { table.get_unchecked_mut(3) }).bits = 2;
            table_size = 4;
        } else if num_symbols == 3 {
            let last: u16 =
                if val.len() > 3 {
                    unsafe { *val.get_unchecked(3) }
                } else { 65535 };
            let mut mval: [u16; 4] =
                [unsafe { *val.get_unchecked(0) },
                 unsafe { *val.get_unchecked(1) },
                 unsafe { *val.get_unchecked(2) }, last];
            for i in 0..3 {
                for k in i + 1..4 {
                    if mval[k] < mval[i] { mval.swap(k, i); }
                }
            }
            for i in 0..4 {
                (*unsafe { table.get_unchecked_mut(i) }).bits = 2;
            }
            (*unsafe { table.get_unchecked_mut(0) }).value = mval[0];
            (*unsafe { table.get_unchecked_mut(2) }).value = mval[1];
            (*unsafe { table.get_unchecked_mut(1) }).value = mval[2];
            (*unsafe { table.get_unchecked_mut(3) }).value = mval[3];
            table_size = 4;
        } else if num_symbols == 4 {
            let mut mval: [u16; 4] =
                [unsafe { *val.get_unchecked(0) },
                 unsafe { *val.get_unchecked(1) },
                 unsafe { *val.get_unchecked(2) },
                 unsafe { *val.get_unchecked(3) }];
            if mval[3] < mval[2] { mval.swap(3, 2) }
            for i in 0..7 {
                (*unsafe { table.get_unchecked_mut(i) }).value = mval[0];
                (*unsafe { table.get_unchecked_mut(i) }).bits =
                    (1 + (i & 1)) as u8;
            }
            (*unsafe { table.get_unchecked_mut(1) }).value = mval[1];
            (*unsafe { table.get_unchecked_mut(3) }).value = mval[2];
            (*unsafe { table.get_unchecked_mut(5) }).value = mval[1];
            (*unsafe { table.get_unchecked_mut(7) }).value = mval[3];
            (*unsafe { table.get_unchecked_mut(3) }).bits = 3;
            (*unsafe { table.get_unchecked_mut(7) }).bits = 3;
            table_size = 8;
        } else {
            if !false { ::core::panicking::panic("assertion failed: false") };
        }
        while table_size != goal_size {
            for index in 0..table_size {
                *unsafe {
                     table.get_unchecked_mut((table_size + index) as usize)
                 } = unsafe { *table.get_unchecked(index as usize) };
            }
            table_size <<= 1;
        }
        goal_size
    }
}
mod state {
    #![allow(non_camel_case_types)]
    #![allow(non_snake_case)]
    #![allow(non_upper_case_globals)]
    use alloc;
    use core;
    use context::kContextLookup;
    use bit_reader::{BrotliBitReader, BrotliGetAvailableBits,
                     BrotliInitBitReader};
    use huffman::{BROTLI_HUFFMAN_MAX_CODE_LENGTH,
                  BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE,
                  BROTLI_HUFFMAN_MAX_TABLE_SIZE, HuffmanCode,
                  HuffmanTreeGroup};
    use alloc::SliceWrapper;
    #[allow(dead_code)]
    pub enum WhichTreeGroup { LITERAL, INSERT_COPY, DISTANCE, }
    #[repr(C)]
    #[no_mangle]
    pub enum BrotliDecoderErrorCode {
        BROTLI_DECODER_NO_ERROR = 0,
        BROTLI_DECODER_SUCCESS = 1,
        BROTLI_DECODER_NEEDS_MORE_INPUT = 2,
        BROTLI_DECODER_NEEDS_MORE_OUTPUT = 3,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE = -1,
        BROTLI_DECODER_ERROR_FORMAT_RESERVED = -2,
        BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE = -3,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET = -4,
        BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME = -5,
        BROTLI_DECODER_ERROR_FORMAT_CL_SPACE = -6,
        BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE = -7,
        BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT = -8,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1 = -9,
        BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2 = -10,
        BROTLI_DECODER_ERROR_FORMAT_TRANSFORM = -11,
        BROTLI_DECODER_ERROR_FORMAT_DICTIONARY = -12,
        BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS = -13,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_1 = -14,
        BROTLI_DECODER_ERROR_FORMAT_PADDING_2 = -15,
        BROTLI_DECODER_ERROR_FORMAT_DISTANCE = -16,
        BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET = -19,
        BROTLI_DECODER_ERROR_INVALID_ARGUMENTS = -20,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES = -21,
        BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS = -22,
        BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP = -25,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1 = -26,
        BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2 = -27,
        BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES = -30,
        BROTLI_DECODER_ERROR_UNREACHABLE = -31,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for BrotliDecoderErrorCode {
        #[inline]
        fn clone(&self) -> BrotliDecoderErrorCode { { *self } }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for BrotliDecoderErrorCode { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for BrotliDecoderErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&BrotliDecoderErrorCode::BROTLI_DECODER_NO_ERROR,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_NO_ERROR");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_SUCCESS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT,) =>
                {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_NEEDS_MORE_INPUT");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_NEEDS_MORE_OUTPUT");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_RESERVED,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_RESERVED");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CL_SPACE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_CL_SPACE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_TRANSFORM,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_TRANSFORM");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DICTIONARY,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_DICTIONARY");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_1,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_PADDING_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_2,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_PADDING_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DISTANCE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_FORMAT_DISTANCE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_INVALID_ARGUMENTS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_DECODER_ERROR_UNREACHABLE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
            }
        }
    }
    pub enum BrotliRunningState {
        BROTLI_STATE_UNINITED,
        BROTLI_STATE_LARGE_WINDOW_BITS,
        BROTLI_STATE_INITIALIZE,
        BROTLI_STATE_METABLOCK_BEGIN,
        BROTLI_STATE_METABLOCK_HEADER,
        BROTLI_STATE_METABLOCK_HEADER_2,
        BROTLI_STATE_CONTEXT_MODES,
        BROTLI_STATE_COMMAND_BEGIN,
        BROTLI_STATE_COMMAND_INNER,
        BROTLI_STATE_COMMAND_POST_DECODE_LITERALS,
        BROTLI_STATE_COMMAND_POST_WRAP_COPY,
        BROTLI_STATE_UNCOMPRESSED,
        BROTLI_STATE_METADATA,
        BROTLI_STATE_COMMAND_INNER_WRITE,
        BROTLI_STATE_METABLOCK_DONE,
        BROTLI_STATE_COMMAND_POST_WRITE_1,
        BROTLI_STATE_COMMAND_POST_WRITE_2,
        BROTLI_STATE_HUFFMAN_CODE_0,
        BROTLI_STATE_HUFFMAN_CODE_1,
        BROTLI_STATE_HUFFMAN_CODE_2,
        BROTLI_STATE_HUFFMAN_CODE_3,
        BROTLI_STATE_CONTEXT_MAP_1,
        BROTLI_STATE_CONTEXT_MAP_2,
        BROTLI_STATE_TREE_GROUP,
        BROTLI_STATE_DONE,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for BrotliRunningState {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&BrotliRunningState::BROTLI_STATE_UNINITED,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_UNINITED");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_LARGE_WINDOW_BITS,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_LARGE_WINDOW_BITS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_INITIALIZE,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_INITIALIZE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_METABLOCK_BEGIN,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_METABLOCK_BEGIN");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_METABLOCK_HEADER");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER_2,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_METABLOCK_HEADER_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_CONTEXT_MODES,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_CONTEXT_MODES");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_BEGIN");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_INNER,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_INNER");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS,)
                => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_POST_DECODE_LITERALS");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY,) =>
                {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_POST_WRAP_COPY");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_UNCOMPRESSED,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_UNCOMPRESSED");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_METADATA,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_METADATA");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_INNER_WRITE,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_INNER_WRITE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_METABLOCK_DONE,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_METABLOCK_DONE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_1,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_POST_WRITE_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_2,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_COMMAND_POST_WRITE_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_0,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_HUFFMAN_CODE_0");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_1,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_HUFFMAN_CODE_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_2,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_HUFFMAN_CODE_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_3,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_HUFFMAN_CODE_3");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_1,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_CONTEXT_MAP_1");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_2,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_CONTEXT_MAP_2");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_TREE_GROUP,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_TREE_GROUP");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliRunningState::BROTLI_STATE_DONE,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "BROTLI_STATE_DONE");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
            }
        }
    }
    pub enum BrotliRunningMetablockHeaderState {
        BROTLI_STATE_METABLOCK_HEADER_NONE,
        BROTLI_STATE_METABLOCK_HEADER_EMPTY,
        BROTLI_STATE_METABLOCK_HEADER_NIBBLES,
        BROTLI_STATE_METABLOCK_HEADER_SIZE,
        BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED,
        BROTLI_STATE_METABLOCK_HEADER_RESERVED,
        BROTLI_STATE_METABLOCK_HEADER_BYTES,
        BROTLI_STATE_METABLOCK_HEADER_METADATA,
    }
    pub enum BrotliRunningUncompressedState {
        BROTLI_STATE_UNCOMPRESSED_NONE,
        BROTLI_STATE_UNCOMPRESSED_WRITE,
    }
    pub enum BrotliRunningTreeGroupState {
        BROTLI_STATE_TREE_GROUP_NONE,
        BROTLI_STATE_TREE_GROUP_LOOP,
    }
    pub enum BrotliRunningContextMapState {
        BROTLI_STATE_CONTEXT_MAP_NONE,
        BROTLI_STATE_CONTEXT_MAP_READ_PREFIX,
        BROTLI_STATE_CONTEXT_MAP_HUFFMAN,
        BROTLI_STATE_CONTEXT_MAP_DECODE,
        BROTLI_STATE_CONTEXT_MAP_TRANSFORM,
    }
    pub enum BrotliRunningHuffmanState {
        BROTLI_STATE_HUFFMAN_NONE,
        BROTLI_STATE_HUFFMAN_SIMPLE_SIZE,
        BROTLI_STATE_HUFFMAN_SIMPLE_READ,
        BROTLI_STATE_HUFFMAN_SIMPLE_BUILD,
        BROTLI_STATE_HUFFMAN_COMPLEX,
        BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS,
    }
    pub enum BrotliRunningDecodeUint8State {
        BROTLI_STATE_DECODE_UINT8_NONE,
        BROTLI_STATE_DECODE_UINT8_SHORT,
        BROTLI_STATE_DECODE_UINT8_LONG,
    }
    pub enum BrotliRunningReadBlockLengthState {
        BROTLI_STATE_READ_BLOCK_LENGTH_NONE,
        BROTLI_STATE_READ_BLOCK_LENGTH_SUFFIX,
    }
    pub const kLiteralContextBits: usize = 6;
    pub struct BlockTypeAndLengthState<AllocHC: alloc::Allocator<HuffmanCode>> {
        pub substate_read_block_length: BrotliRunningReadBlockLengthState,
        pub num_block_types: [u32; 3],
        pub block_length_index: u32,
        pub block_length: [u32; 3],
        pub block_type_trees: AllocHC::AllocatedMemory,
        pub block_len_trees: AllocHC::AllocatedMemory,
        pub block_type_rb: [u32; 6],
    }
    pub struct BrotliState<AllocU8: alloc::Allocator<u8>,
                           AllocU32: alloc::Allocator<u32>,
                           AllocHC: alloc::Allocator<HuffmanCode>> {
        pub state: BrotliRunningState,
        pub loop_counter: i32,
        pub br: BrotliBitReader,
        pub alloc_u8: AllocU8,
        pub alloc_u32: AllocU32,
        pub alloc_hc: AllocHC,
        pub buffer: [u8; 8],
        pub buffer_length: u32,
        pub pos: i32,
        pub max_backward_distance: i32,
        pub max_backward_distance_minus_custom_dict_size: i32,
        pub max_distance: i32,
        pub ringbuffer_size: i32,
        pub ringbuffer_mask: i32,
        pub dist_rb_idx: i32,
        pub dist_rb: [i32; 4],
        pub ringbuffer: AllocU8::AllocatedMemory,
        pub htree_command_index: u16,
        pub context_lookup: &'static [u8; 512],
        pub context_map_slice_index: usize,
        pub dist_context_map_slice_index: usize,
        pub sub_loop_counter: u32,
        pub literal_hgroup: HuffmanTreeGroup<AllocU32, AllocHC>,
        pub insert_copy_hgroup: HuffmanTreeGroup<AllocU32, AllocHC>,
        pub distance_hgroup: HuffmanTreeGroup<AllocU32, AllocHC>,
        pub trivial_literal_context: i32,
        pub distance_context: i32,
        pub meta_block_remaining_len: i32,
        pub block_type_length_state: BlockTypeAndLengthState<AllocHC>,
        pub distance_postfix_bits: u32,
        pub num_direct_distance_codes: u32,
        pub distance_postfix_mask: i32,
        pub num_dist_htrees: u32,
        pub dist_context_map: AllocU8::AllocatedMemory,
        pub literal_htree_index: u8,
        pub dist_htree_index: u8,
        pub large_window: bool,
        pub should_wrap_ringbuffer: bool,
        pub error_code: BrotliDecoderErrorCode,
        pub repeat_code_len: u32,
        pub prev_code_len: u32,
        pub copy_length: i32,
        pub distance_code: i32,
        pub rb_roundtrips: usize,
        pub partial_pos_out: usize,
        pub symbol: u32,
        pub repeat: u32,
        pub space: u32,
        pub table: [HuffmanCode; 32],
        pub symbol_lists_index: usize,
        pub symbols_lists_array: [u16; BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1 +
                                           BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE],
        pub next_symbol: [i32; 32],
        pub code_length_code_lengths: [u8; 18],
        pub code_length_histo: [u16; 16],
        pub htree_index: i32,
        pub htree_next_offset: u32,
        pub context_index: u32,
        pub max_run_length_prefix: u32,
        pub code: u32,
        pub context_map_table: AllocHC::AllocatedMemory,
        pub mtf_upper_bound: u32,
        pub mtf_or_error_string: Result<[u8; 256], [u8; 256]>,
        pub custom_dict: AllocU8::AllocatedMemory,
        pub custom_dict_size: i32,
        pub substate_metablock_header: BrotliRunningMetablockHeaderState,
        pub substate_tree_group: BrotliRunningTreeGroupState,
        pub substate_context_map: BrotliRunningContextMapState,
        pub substate_uncompressed: BrotliRunningUncompressedState,
        pub substate_huffman: BrotliRunningHuffmanState,
        pub substate_decode_uint8: BrotliRunningDecodeUint8State,
        pub is_last_metablock: u8,
        pub is_uncompressed: u8,
        pub is_metadata: u8,
        pub size_nibbles: u8,
        pub window_bits: u32,
        pub num_literal_htrees: u32,
        pub context_map: AllocU8::AllocatedMemory,
        pub context_modes: AllocU8::AllocatedMemory,
        pub trivial_literal_contexts: [u32; 8],
    }
    macro_rules! make_brotli_state {
        ($ alloc_u8 : expr, $ alloc_u32 : expr, $ alloc_hc : expr, $
         custom_dict : expr, $ custom_dict_len : expr) =>
        (BrotliState :: < AllocU8, AllocU32, AllocHC >
         {
             state : BrotliRunningState :: BROTLI_STATE_UNINITED, loop_counter
             : 0, br : BrotliBitReader :: default(), alloc_u8 : $ alloc_u8,
             alloc_u32 : $ alloc_u32, alloc_hc : $ alloc_hc, buffer :
             [0u8 ; 8], buffer_length : 0, pos : 0, max_backward_distance : 0,
             max_backward_distance_minus_custom_dict_size : 0, max_distance :
             0, ringbuffer_size : 0, ringbuffer_mask : 0, dist_rb_idx : 0,
             dist_rb : [16, 15, 11, 4], ringbuffer : AllocU8 ::
             AllocatedMemory :: default(), htree_command_index : 0,
             context_lookup : & kContextLookup [0], context_map_slice_index :
             0, dist_context_map_slice_index : 0, sub_loop_counter : 0,
             literal_hgroup : HuffmanTreeGroup :: < AllocU32, AllocHC > ::
             default(), insert_copy_hgroup : HuffmanTreeGroup :: < AllocU32,
             AllocHC > :: default(), distance_hgroup : HuffmanTreeGroup :: <
             AllocU32, AllocHC > :: default(), trivial_literal_context : 0,
             distance_context : 0, meta_block_remaining_len : 0,
             block_type_length_state : BlockTypeAndLengthState :: < AllocHC >
             {
                 block_length_index : 0, block_length : [0 ; 3],
                 num_block_types : [0 ; 3], block_type_rb : [0 ; 6],
                 substate_read_block_length :
                 BrotliRunningReadBlockLengthState ::
                 BROTLI_STATE_READ_BLOCK_LENGTH_NONE, block_type_trees :
                 AllocHC :: AllocatedMemory :: default(), block_len_trees :
                 AllocHC :: AllocatedMemory :: default(),
             }, distance_postfix_bits : 0, num_direct_distance_codes : 0,
             distance_postfix_mask : 0, num_dist_htrees : 0, dist_context_map
             : AllocU8 :: AllocatedMemory :: default(), literal_htree_index :
             0, dist_htree_index : 0, repeat_code_len : 0, prev_code_len : 0,
             copy_length : 0, distance_code : 0, rb_roundtrips : 0,
             partial_pos_out : 0, symbol : 0, repeat : 0, space : 0, table :
             [HuffmanCode :: default() ; 32], symbol_lists_index :
             BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1, symbols_lists_array :
             [0 ; BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1 +
              BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE], next_symbol : [0 ; 32],
             code_length_code_lengths : [0 ; 18], code_length_histo :
             [0 ; 16], htree_index : 0, htree_next_offset : 0, context_index :
             0, max_run_length_prefix : 0, code : 0, context_map_table :
             AllocHC :: AllocatedMemory :: default(), mtf_upper_bound : 255,
             mtf_or_error_string : Ok([0 ; 256]), custom_dict : $ custom_dict,
             custom_dict_size : $ custom_dict_len as i32,
             substate_metablock_header : BrotliRunningMetablockHeaderState ::
             BROTLI_STATE_METABLOCK_HEADER_NONE, substate_tree_group :
             BrotliRunningTreeGroupState :: BROTLI_STATE_TREE_GROUP_NONE,
             substate_context_map : BrotliRunningContextMapState ::
             BROTLI_STATE_CONTEXT_MAP_NONE, substate_uncompressed :
             BrotliRunningUncompressedState :: BROTLI_STATE_UNCOMPRESSED_NONE,
             substate_huffman : BrotliRunningHuffmanState ::
             BROTLI_STATE_HUFFMAN_NONE, substate_decode_uint8 :
             BrotliRunningDecodeUint8State :: BROTLI_STATE_DECODE_UINT8_NONE,
             is_last_metablock : 0, is_uncompressed : 0, is_metadata : 0,
             size_nibbles : 0, window_bits : 0, large_window : false,
             should_wrap_ringbuffer : false, error_code :
             BrotliDecoderErrorCode :: BROTLI_DECODER_SUCCESS,
             num_literal_htrees : 0, context_map : AllocU8 :: AllocatedMemory
             :: default(), context_modes : AllocU8 :: AllocatedMemory ::
             default(), trivial_literal_contexts : [0u32 ; 8],
         }) ;
    }
    impl <'brotli_state, AllocU8: alloc::Allocator<u8>,
          AllocU32: alloc::Allocator<u32>,
          AllocHC: alloc::Allocator<HuffmanCode>>
     BrotliState<AllocU8, AllocU32, AllocHC> {
        pub fn new(alloc_u8: AllocU8, alloc_u32: AllocU32, alloc_hc: AllocHC)
         -> Self {
            let mut retval =
                BrotliState::<AllocU8, AllocU32,
                              AllocHC>{state:
                                           BrotliRunningState::BROTLI_STATE_UNINITED,
                                       loop_counter: 0,
                                       br: BrotliBitReader::default(),
                                       alloc_u8: alloc_u8,
                                       alloc_u32: alloc_u32,
                                       alloc_hc: alloc_hc,
                                       buffer: [0u8; 8],
                                       buffer_length: 0,
                                       pos: 0,
                                       max_backward_distance: 0,
                                       max_backward_distance_minus_custom_dict_size:
                                           0,
                                       max_distance: 0,
                                       ringbuffer_size: 0,
                                       ringbuffer_mask: 0,
                                       dist_rb_idx: 0,
                                       dist_rb: [16, 15, 11, 4],
                                       ringbuffer:
                                           AllocU8::AllocatedMemory::default(),
                                       htree_command_index: 0,
                                       context_lookup: &kContextLookup[0],
                                       context_map_slice_index: 0,
                                       dist_context_map_slice_index: 0,
                                       sub_loop_counter: 0,
                                       literal_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       insert_copy_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       distance_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       trivial_literal_context: 0,
                                       distance_context: 0,
                                       meta_block_remaining_len: 0,
                                       block_type_length_state:
                                           BlockTypeAndLengthState::<AllocHC>{block_length_index:
                                                                                  0,
                                                                              block_length:
                                                                                  [0;
                                                                                      3],
                                                                              num_block_types:
                                                                                  [0;
                                                                                      3],
                                                                              block_type_rb:
                                                                                  [0;
                                                                                      6],
                                                                              substate_read_block_length:
                                                                                  BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE,
                                                                              block_type_trees:
                                                                                  AllocHC::AllocatedMemory::default(),
                                                                              block_len_trees:
                                                                                  AllocHC::AllocatedMemory::default(),},
                                       distance_postfix_bits: 0,
                                       num_direct_distance_codes: 0,
                                       distance_postfix_mask: 0,
                                       num_dist_htrees: 0,
                                       dist_context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       literal_htree_index: 0,
                                       dist_htree_index: 0,
                                       repeat_code_len: 0,
                                       prev_code_len: 0,
                                       copy_length: 0,
                                       distance_code: 0,
                                       rb_roundtrips: 0,
                                       partial_pos_out: 0,
                                       symbol: 0,
                                       repeat: 0,
                                       space: 0,
                                       table: [HuffmanCode::default(); 32],
                                       symbol_lists_index:
                                           BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1,
                                       symbols_lists_array:
                                           [0;
                                               BROTLI_HUFFMAN_MAX_CODE_LENGTH
                                                   + 1 +
                                                   BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE],
                                       next_symbol: [0; 32],
                                       code_length_code_lengths: [0; 18],
                                       code_length_histo: [0; 16],
                                       htree_index: 0,
                                       htree_next_offset: 0,
                                       context_index: 0,
                                       max_run_length_prefix: 0,
                                       code: 0,
                                       context_map_table:
                                           AllocHC::AllocatedMemory::default(),
                                       mtf_upper_bound: 255,
                                       mtf_or_error_string: Ok([0; 256]),
                                       custom_dict:
                                           AllocU8::AllocatedMemory::default(),
                                       custom_dict_size: 0 as i32,
                                       substate_metablock_header:
                                           BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE,
                                       substate_tree_group:
                                           BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_NONE,
                                       substate_context_map:
                                           BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_NONE,
                                       substate_uncompressed:
                                           BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_NONE,
                                       substate_huffman:
                                           BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE,
                                       substate_decode_uint8:
                                           BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE,
                                       is_last_metablock: 0,
                                       is_uncompressed: 0,
                                       is_metadata: 0,
                                       size_nibbles: 0,
                                       window_bits: 0,
                                       large_window: false,
                                       should_wrap_ringbuffer: false,
                                       error_code:
                                           BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS,
                                       num_literal_htrees: 0,
                                       context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       context_modes:
                                           AllocU8::AllocatedMemory::default(),
                                       trivial_literal_contexts: [0u32; 8],};
            retval.large_window = true;
            retval.context_map_table =
                retval.alloc_hc.alloc_cell(BROTLI_HUFFMAN_MAX_TABLE_SIZE as
                                               usize);
            BrotliInitBitReader(&mut retval.br);
            retval
        }
        pub fn new_with_custom_dictionary(alloc_u8: AllocU8,
                                          alloc_u32: AllocU32,
                                          alloc_hc: AllocHC,
                                          custom_dict:
                                              AllocU8::AllocatedMemory)
         -> Self {
            let custom_dict_len = custom_dict.slice().len();
            let mut retval =
                BrotliState::<AllocU8, AllocU32,
                              AllocHC>{state:
                                           BrotliRunningState::BROTLI_STATE_UNINITED,
                                       loop_counter: 0,
                                       br: BrotliBitReader::default(),
                                       alloc_u8: alloc_u8,
                                       alloc_u32: alloc_u32,
                                       alloc_hc: alloc_hc,
                                       buffer: [0u8; 8],
                                       buffer_length: 0,
                                       pos: 0,
                                       max_backward_distance: 0,
                                       max_backward_distance_minus_custom_dict_size:
                                           0,
                                       max_distance: 0,
                                       ringbuffer_size: 0,
                                       ringbuffer_mask: 0,
                                       dist_rb_idx: 0,
                                       dist_rb: [16, 15, 11, 4],
                                       ringbuffer:
                                           AllocU8::AllocatedMemory::default(),
                                       htree_command_index: 0,
                                       context_lookup: &kContextLookup[0],
                                       context_map_slice_index: 0,
                                       dist_context_map_slice_index: 0,
                                       sub_loop_counter: 0,
                                       literal_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       insert_copy_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       distance_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       trivial_literal_context: 0,
                                       distance_context: 0,
                                       meta_block_remaining_len: 0,
                                       block_type_length_state:
                                           BlockTypeAndLengthState::<AllocHC>{block_length_index:
                                                                                  0,
                                                                              block_length:
                                                                                  [0;
                                                                                      3],
                                                                              num_block_types:
                                                                                  [0;
                                                                                      3],
                                                                              block_type_rb:
                                                                                  [0;
                                                                                      6],
                                                                              substate_read_block_length:
                                                                                  BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE,
                                                                              block_type_trees:
                                                                                  AllocHC::AllocatedMemory::default(),
                                                                              block_len_trees:
                                                                                  AllocHC::AllocatedMemory::default(),},
                                       distance_postfix_bits: 0,
                                       num_direct_distance_codes: 0,
                                       distance_postfix_mask: 0,
                                       num_dist_htrees: 0,
                                       dist_context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       literal_htree_index: 0,
                                       dist_htree_index: 0,
                                       repeat_code_len: 0,
                                       prev_code_len: 0,
                                       copy_length: 0,
                                       distance_code: 0,
                                       rb_roundtrips: 0,
                                       partial_pos_out: 0,
                                       symbol: 0,
                                       repeat: 0,
                                       space: 0,
                                       table: [HuffmanCode::default(); 32],
                                       symbol_lists_index:
                                           BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1,
                                       symbols_lists_array:
                                           [0;
                                               BROTLI_HUFFMAN_MAX_CODE_LENGTH
                                                   + 1 +
                                                   BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE],
                                       next_symbol: [0; 32],
                                       code_length_code_lengths: [0; 18],
                                       code_length_histo: [0; 16],
                                       htree_index: 0,
                                       htree_next_offset: 0,
                                       context_index: 0,
                                       max_run_length_prefix: 0,
                                       code: 0,
                                       context_map_table:
                                           AllocHC::AllocatedMemory::default(),
                                       mtf_upper_bound: 255,
                                       mtf_or_error_string: Ok([0; 256]),
                                       custom_dict: custom_dict,
                                       custom_dict_size:
                                           custom_dict_len as i32,
                                       substate_metablock_header:
                                           BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE,
                                       substate_tree_group:
                                           BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_NONE,
                                       substate_context_map:
                                           BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_NONE,
                                       substate_uncompressed:
                                           BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_NONE,
                                       substate_huffman:
                                           BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE,
                                       substate_decode_uint8:
                                           BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE,
                                       is_last_metablock: 0,
                                       is_uncompressed: 0,
                                       is_metadata: 0,
                                       size_nibbles: 0,
                                       window_bits: 0,
                                       large_window: false,
                                       should_wrap_ringbuffer: false,
                                       error_code:
                                           BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS,
                                       num_literal_htrees: 0,
                                       context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       context_modes:
                                           AllocU8::AllocatedMemory::default(),
                                       trivial_literal_contexts: [0u32; 8],};
            retval.context_map_table =
                retval.alloc_hc.alloc_cell(BROTLI_HUFFMAN_MAX_TABLE_SIZE as
                                               usize);
            retval.large_window = true;
            BrotliInitBitReader(&mut retval.br);
            retval
        }
        pub fn new_strict(alloc_u8: AllocU8, alloc_u32: AllocU32,
                          alloc_hc: AllocHC) -> Self {
            let mut retval =
                BrotliState::<AllocU8, AllocU32,
                              AllocHC>{state:
                                           BrotliRunningState::BROTLI_STATE_UNINITED,
                                       loop_counter: 0,
                                       br: BrotliBitReader::default(),
                                       alloc_u8: alloc_u8,
                                       alloc_u32: alloc_u32,
                                       alloc_hc: alloc_hc,
                                       buffer: [0u8; 8],
                                       buffer_length: 0,
                                       pos: 0,
                                       max_backward_distance: 0,
                                       max_backward_distance_minus_custom_dict_size:
                                           0,
                                       max_distance: 0,
                                       ringbuffer_size: 0,
                                       ringbuffer_mask: 0,
                                       dist_rb_idx: 0,
                                       dist_rb: [16, 15, 11, 4],
                                       ringbuffer:
                                           AllocU8::AllocatedMemory::default(),
                                       htree_command_index: 0,
                                       context_lookup: &kContextLookup[0],
                                       context_map_slice_index: 0,
                                       dist_context_map_slice_index: 0,
                                       sub_loop_counter: 0,
                                       literal_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       insert_copy_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       distance_hgroup:
                                           HuffmanTreeGroup::<AllocU32,
                                                              AllocHC>::default(),
                                       trivial_literal_context: 0,
                                       distance_context: 0,
                                       meta_block_remaining_len: 0,
                                       block_type_length_state:
                                           BlockTypeAndLengthState::<AllocHC>{block_length_index:
                                                                                  0,
                                                                              block_length:
                                                                                  [0;
                                                                                      3],
                                                                              num_block_types:
                                                                                  [0;
                                                                                      3],
                                                                              block_type_rb:
                                                                                  [0;
                                                                                      6],
                                                                              substate_read_block_length:
                                                                                  BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE,
                                                                              block_type_trees:
                                                                                  AllocHC::AllocatedMemory::default(),
                                                                              block_len_trees:
                                                                                  AllocHC::AllocatedMemory::default(),},
                                       distance_postfix_bits: 0,
                                       num_direct_distance_codes: 0,
                                       distance_postfix_mask: 0,
                                       num_dist_htrees: 0,
                                       dist_context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       literal_htree_index: 0,
                                       dist_htree_index: 0,
                                       repeat_code_len: 0,
                                       prev_code_len: 0,
                                       copy_length: 0,
                                       distance_code: 0,
                                       rb_roundtrips: 0,
                                       partial_pos_out: 0,
                                       symbol: 0,
                                       repeat: 0,
                                       space: 0,
                                       table: [HuffmanCode::default(); 32],
                                       symbol_lists_index:
                                           BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1,
                                       symbols_lists_array:
                                           [0;
                                               BROTLI_HUFFMAN_MAX_CODE_LENGTH
                                                   + 1 +
                                                   BROTLI_HUFFMAN_MAX_CODE_LENGTHS_SIZE],
                                       next_symbol: [0; 32],
                                       code_length_code_lengths: [0; 18],
                                       code_length_histo: [0; 16],
                                       htree_index: 0,
                                       htree_next_offset: 0,
                                       context_index: 0,
                                       max_run_length_prefix: 0,
                                       code: 0,
                                       context_map_table:
                                           AllocHC::AllocatedMemory::default(),
                                       mtf_upper_bound: 255,
                                       mtf_or_error_string: Ok([0; 256]),
                                       custom_dict:
                                           AllocU8::AllocatedMemory::default(),
                                       custom_dict_size: 0 as i32,
                                       substate_metablock_header:
                                           BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE,
                                       substate_tree_group:
                                           BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_NONE,
                                       substate_context_map:
                                           BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_NONE,
                                       substate_uncompressed:
                                           BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_NONE,
                                       substate_huffman:
                                           BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE,
                                       substate_decode_uint8:
                                           BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE,
                                       is_last_metablock: 0,
                                       is_uncompressed: 0,
                                       is_metadata: 0,
                                       size_nibbles: 0,
                                       window_bits: 0,
                                       large_window: false,
                                       should_wrap_ringbuffer: false,
                                       error_code:
                                           BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS,
                                       num_literal_htrees: 0,
                                       context_map:
                                           AllocU8::AllocatedMemory::default(),
                                       context_modes:
                                           AllocU8::AllocatedMemory::default(),
                                       trivial_literal_contexts: [0u32; 8],};
            retval.context_map_table =
                retval.alloc_hc.alloc_cell(BROTLI_HUFFMAN_MAX_TABLE_SIZE as
                                               usize);
            retval.large_window = false;
            BrotliInitBitReader(&mut retval.br);
            retval
        }
        pub fn BrotliStateMetablockBegin(self: &mut Self) {
            self.meta_block_remaining_len = 0;
            self.block_type_length_state.block_length[0] = 1u32 << 24;
            self.block_type_length_state.block_length[1] = 1u32 << 24;
            self.block_type_length_state.block_length[2] = 1u32 << 24;
            self.block_type_length_state.num_block_types[0] = 1;
            self.block_type_length_state.num_block_types[1] = 1;
            self.block_type_length_state.num_block_types[2] = 1;
            self.block_type_length_state.block_type_rb[0] = 1;
            self.block_type_length_state.block_type_rb[1] = 0;
            self.block_type_length_state.block_type_rb[2] = 1;
            self.block_type_length_state.block_type_rb[3] = 0;
            self.block_type_length_state.block_type_rb[4] = 1;
            self.block_type_length_state.block_type_rb[5] = 0;
            self.alloc_u8.free_cell(core::mem::replace(&mut self.context_map,
                                                       AllocU8::AllocatedMemory::default()));
            self.alloc_u8.free_cell(core::mem::replace(&mut self.context_modes,
                                                       AllocU8::AllocatedMemory::default()));
            self.alloc_u8.free_cell(core::mem::replace(&mut self.dist_context_map,
                                                       AllocU8::AllocatedMemory::default()));
            self.context_map_slice_index = 0;
            self.literal_htree_index = 0;
            self.dist_context_map_slice_index = 0;
            self.dist_htree_index = 0;
            self.context_lookup = &kContextLookup[0];
            self.literal_hgroup.reset(&mut self.alloc_u32,
                                      &mut self.alloc_hc);
            self.insert_copy_hgroup.reset(&mut self.alloc_u32,
                                          &mut self.alloc_hc);
            self.distance_hgroup.reset(&mut self.alloc_u32,
                                       &mut self.alloc_hc);
        }
        pub fn BrotliStateCleanupAfterMetablock(self: &mut Self) {
            self.alloc_u8.free_cell(core::mem::replace(&mut self.context_map,
                                                       AllocU8::AllocatedMemory::default()));
            self.alloc_u8.free_cell(core::mem::replace(&mut self.context_modes,
                                                       AllocU8::AllocatedMemory::default()));
            self.alloc_u8.free_cell(core::mem::replace(&mut self.dist_context_map,
                                                       AllocU8::AllocatedMemory::default()));
            self.literal_hgroup.reset(&mut self.alloc_u32,
                                      &mut self.alloc_hc);
            self.insert_copy_hgroup.reset(&mut self.alloc_u32,
                                          &mut self.alloc_hc);
            self.distance_hgroup.reset(&mut self.alloc_u32,
                                       &mut self.alloc_hc);
        }
        fn BrotliStateCleanup(self: &mut Self) {
            self.BrotliStateCleanupAfterMetablock();
            self.alloc_u8.free_cell(core::mem::replace(&mut self.ringbuffer,
                                                       AllocU8::AllocatedMemory::default()));
            self.alloc_hc.free_cell(core::mem::replace(&mut self.block_type_length_state.block_type_trees,
                                                       AllocHC::AllocatedMemory::default()));
            self.alloc_hc.free_cell(core::mem::replace(&mut self.block_type_length_state.block_len_trees,
                                                       AllocHC::AllocatedMemory::default()));
            self.alloc_hc.free_cell(core::mem::replace(&mut self.context_map_table,
                                                       AllocHC::AllocatedMemory::default()));
            self.alloc_u8.free_cell(core::mem::replace(&mut self.custom_dict,
                                                       AllocU8::AllocatedMemory::default()));
        }
        pub fn BrotliStateIsStreamStart(self: &Self) -> bool {
            match self.state {
                BrotliRunningState::BROTLI_STATE_UNINITED =>
                BrotliGetAvailableBits(&self.br) == 0,
                _ => false,
            }
        }
        pub fn BrotliStateIsStreamEnd(self: &Self) -> bool {
            match self.state {
                BrotliRunningState::BROTLI_STATE_DONE => true,
                _ => false,
            }
        }
        pub fn BrotliHuffmanTreeGroupInit(self: &mut Self,
                                          group: WhichTreeGroup,
                                          alphabet_size: u16, max_symbol: u16,
                                          ntrees: u16) {
            match group {
                WhichTreeGroup::LITERAL =>
                self.literal_hgroup.init(&mut self.alloc_u32,
                                         &mut self.alloc_hc, alphabet_size,
                                         max_symbol, ntrees),
                WhichTreeGroup::INSERT_COPY =>
                self.insert_copy_hgroup.init(&mut self.alloc_u32,
                                             &mut self.alloc_hc,
                                             alphabet_size, max_symbol,
                                             ntrees),
                WhichTreeGroup::DISTANCE =>
                self.distance_hgroup.init(&mut self.alloc_u32,
                                          &mut self.alloc_hc, alphabet_size,
                                          max_symbol, ntrees),
            }
        }
        pub fn BrotliHuffmanTreeGroupRelease(self: &mut Self,
                                             group: WhichTreeGroup) {
            match group {
                WhichTreeGroup::LITERAL =>
                self.literal_hgroup.reset(&mut self.alloc_u32,
                                          &mut self.alloc_hc),
                WhichTreeGroup::INSERT_COPY =>
                self.insert_copy_hgroup.reset(&mut self.alloc_u32,
                                              &mut self.alloc_hc),
                WhichTreeGroup::DISTANCE =>
                self.distance_hgroup.reset(&mut self.alloc_u32,
                                           &mut self.alloc_hc),
            }
        }
    }
    impl <'brotli_state, AllocU8: alloc::Allocator<u8>,
          AllocU32: alloc::Allocator<u32>,
          AllocHC: alloc::Allocator<HuffmanCode>> Drop for
     BrotliState<AllocU8, AllocU32, AllocHC> {
        fn drop(&mut self) { self.BrotliStateCleanup(); }
    }
    pub fn BrotliDecoderErrorStr(c: BrotliDecoderErrorCode) -> &'static str {
        match c {
            BrotliDecoderErrorCode::BROTLI_DECODER_NO_ERROR => "NO_ERROR\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => "SUCCESS\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT =>
            "NEEDS_MORE_INPUT\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT =>
            "NEEDS_MORE_OUTPUT\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE
            => "ERROR_FORMAT_EXUBERANT_NIBBLE\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_RESERVED =>
            "ERROR_FORMAT_RESERVED\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE
            => "ERROR_FORMAT_EXUBERANT_META_NIBBLE\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET
            => "ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME
            => "ERROR_FORMAT_SIMPLE_HUFFMAN_SAME\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CL_SPACE =>
            "ERROR_FORMAT_FL_SPACE\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE
            => "ERROR_FORMAT_HUFFMAN_SPACE\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT
            => "ERROR_FORMAT_CONTEXT_MAP_REPEAT\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1
            => "ERROR_FORMAT_BLOCK_LENGTH_1\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2
            => "ERROR_FORMAT_BLOCK_LENGTH_2\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_TRANSFORM =>
            "ERROR_FORMAT_TRANSFORM\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DICTIONARY =>
            "ERROR_FORMAT_DICTIONARY\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS =>
            "ERROR_FORMAT_WINDOW_BITS\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_1 =>
            "ERROR_FORMAT_PADDING_1\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_2 =>
            "ERROR_FORMAT_PADDING_2\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DISTANCE =>
            "ERROR_FORMAT_DISTANCE\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET =>
            "ERROR_DICTIONARY_NOT_SET\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS =>
            "ERROR_INVALID_ARGUMENTS\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES
            => "ERROR_ALLOC_CONTEXT_MODES\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS =>
            "ERROR_ALLOC_TREE_GROUPS\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP =>
            "ERROR_ALLOC_CONTEXT_MAP\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1
            => "ERROR_ALLOC_RING_BUFFER_1\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2
            => "ERROR_ALLOC_RING_BUFFER_2\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES
            => "ERROR_ALLOC_BLOCK_TYPE_TREES\0",
            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE =>
            "ERROR_UNREACHABLE\0",
        }
    }
}
mod prefix {
    #![allow(non_upper_case_globals)]
    pub struct PrefixCodeRange {
        pub offset: u16,
        pub nbits: u8,
    }
    pub const kBlockLengthPrefixCode: [PrefixCodeRange; 26] =
        [PrefixCodeRange{offset: 1, nbits: 2,},
         PrefixCodeRange{offset: 5, nbits: 2,},
         PrefixCodeRange{offset: 9, nbits: 2,},
         PrefixCodeRange{offset: 13, nbits: 2,},
         PrefixCodeRange{offset: 17, nbits: 3,},
         PrefixCodeRange{offset: 25, nbits: 3,},
         PrefixCodeRange{offset: 33, nbits: 3,},
         PrefixCodeRange{offset: 41, nbits: 3,},
         PrefixCodeRange{offset: 49, nbits: 4,},
         PrefixCodeRange{offset: 65, nbits: 4,},
         PrefixCodeRange{offset: 81, nbits: 4,},
         PrefixCodeRange{offset: 97, nbits: 4,},
         PrefixCodeRange{offset: 113, nbits: 5,},
         PrefixCodeRange{offset: 145, nbits: 5,},
         PrefixCodeRange{offset: 177, nbits: 5,},
         PrefixCodeRange{offset: 209, nbits: 5,},
         PrefixCodeRange{offset: 241, nbits: 6,},
         PrefixCodeRange{offset: 305, nbits: 6,},
         PrefixCodeRange{offset: 369, nbits: 7,},
         PrefixCodeRange{offset: 497, nbits: 8,},
         PrefixCodeRange{offset: 753, nbits: 9,},
         PrefixCodeRange{offset: 1265, nbits: 10,},
         PrefixCodeRange{offset: 2289, nbits: 11,},
         PrefixCodeRange{offset: 4337, nbits: 12,},
         PrefixCodeRange{offset: 8433, nbits: 13,},
         PrefixCodeRange{offset: 16625, nbits: 24,}];
    pub struct CmdLutElement {
        pub insert_len_extra_bits: u8,
        pub copy_len_extra_bits: u8,
        pub distance_code: i8,
        pub context: u8,
        pub insert_len_offset: u16,
        pub copy_len_offset: u16,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for CmdLutElement {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                CmdLutElement {
                insert_len_extra_bits: ref __self_0_0,
                copy_len_extra_bits: ref __self_0_1,
                distance_code: ref __self_0_2,
                context: ref __self_0_3,
                insert_len_offset: ref __self_0_4,
                copy_len_offset: ref __self_0_5 } => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_struct(f,
                                                             "CmdLutElement");
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "insert_len_extra_bits",
                                                        &&(*__self_0_0));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "copy_len_extra_bits",
                                                        &&(*__self_0_1));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "distance_code",
                                                        &&(*__self_0_2));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "context",
                                                        &&(*__self_0_3));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "insert_len_offset",
                                                        &&(*__self_0_4));
                    let _ =
                        ::core::fmt::DebugStruct::field(&mut debug_trait_builder,
                                                        "copy_len_offset",
                                                        &&(*__self_0_5));
                    ::core::fmt::DebugStruct::finish(&mut debug_trait_builder)
                }
            }
        }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::marker::Copy for CmdLutElement { }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for CmdLutElement {
        #[inline]
        fn clone(&self) -> CmdLutElement {
            {
                let _: ::core::clone::AssertParamIsClone<u8>;
                let _: ::core::clone::AssertParamIsClone<u8>;
                let _: ::core::clone::AssertParamIsClone<i8>;
                let _: ::core::clone::AssertParamIsClone<u8>;
                let _: ::core::clone::AssertParamIsClone<u16>;
                let _: ::core::clone::AssertParamIsClone<u16>;
                *self
            }
        }
    }
    pub const kCmdLut: [CmdLutElement; 704] =
        [CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x00,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x01,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x02,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: 0,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0000,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0001,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0002,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0003,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0004,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x00,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0005,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0006,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x01,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0008,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x00,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0002,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x01,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0003,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x02,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0004,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0005,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0006,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0007,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0008,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x00,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0009,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000a,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x02,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x000e,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0012,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x03,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x001a,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0022,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x04,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0032,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0042,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x05,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0062,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x000a,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x01,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x000c,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x000e,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x02,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0012,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0016,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x03,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x001e,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0026,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x04,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0036,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x06,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0082,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x07,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x00c2,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x08,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0142,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x09,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0242,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x0a,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0442,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x0c,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x0842,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x0e,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x1842,
                       copy_len_offset: 0x0846,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0046,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x05,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0066,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x06,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0086,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x07,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x00c6,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x08,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0146,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x09,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0246,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x0a,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0446,},
         CmdLutElement{insert_len_extra_bits: 0x18,
                       copy_len_extra_bits: 0x18,
                       distance_code: -1,
                       context: 0x03,
                       insert_len_offset: 0x5842,
                       copy_len_offset: 0x0846,}];
}
mod context {
    #![allow(non_snake_case)]
    #![allow(non_upper_case_globals)]
    #![allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub enum ContextType {
        CONTEXT_LSB6,
        CONTEXT_MSB6,
        CONTEXT_UTF8,
        CONTEXT_SIGNED,
    }
    pub static kContextLookup: [[u8; 512]; 4] =
        [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
          19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
          36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
          53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7,
          8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
          25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
          42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
          59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
          14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
          31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
          48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0,
          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
          20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
          37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
          54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
          5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10,
          11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15,
          15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,
          19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23,
          23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,
          28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32,
          32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36,
          36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40,
          40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44,
          45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49,
          49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53,
          53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57,
          57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61,
          62, 62, 62, 62, 63, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 16, 12, 12, 20, 12, 16, 24, 28,
          12, 12, 32, 12, 36, 12, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32,
          32, 24, 40, 28, 12, 12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52,
          52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12,
          28, 12, 12, 12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60,
          60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12,
          0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
          0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
          1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3,
          2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
          3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
          2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
          1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
         [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16,
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
          16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24,
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
          24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
          32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
          32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
          32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
          32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48,
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 0, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
          5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7]];
}
pub mod transform {
    #![allow(non_upper_case_globals)]
    const kIdentity: u8 = 0;
    const kOmitLast1: u8 = 1;
    const kOmitLast2: u8 = 2;
    const kOmitLast3: u8 = 3;
    const kOmitLast4: u8 = 4;
    const kOmitLast5: u8 = 5;
    const kOmitLast6: u8 = 6;
    const kOmitLast7: u8 = 7;
    const kOmitLast8: u8 = 8;
    const kOmitLast9: u8 = 9;
    const kUppercaseFirst: u8 = 10;
    const kUppercaseAll: u8 = 11;
    const kOmitFirst1: u8 = 12;
    const kOmitFirst2: u8 = 13;
    const kOmitFirst3: u8 = 14;
    const kOmitFirst4: u8 = 15;
    const kOmitFirst5: u8 = 16;
    const kOmitFirst6: u8 = 17;
    const kOmitFirst7: u8 = 18;
    const kOmitFirst9: u8 = 20;
    pub struct Transform {
        pub prefix_id: u8,
        pub transform: u8,
        pub suffix_id: u8,
    }
    const kPrefixSuffix: [u8; 208] =
        [0x00, 0x20, 0x00, 0x2c, 0x20, 0x00, 0x20, 0x6f, 0x66, 0x20, 0x74,
         0x68, 0x65, 0x20, 0x00, 0x20, 0x6f, 0x66, 0x20, 0x00, 0x73, 0x20,
         0x00, 0x2e, 0x00, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x00, 0x20, 0x69,
         0x6e, 0x20, 0x00, 0x22, 0x00, 0x20, 0x74, 0x6f, 0x20, 0x00, 0x22,
         0x3e, 0x00, 0x0a, 0x00, 0x2e, 0x20, 0x00, 0x5d, 0x00, 0x20, 0x66,
         0x6f, 0x72, 0x20, 0x00, 0x20, 0x61, 0x20, 0x00, 0x20, 0x74, 0x68,
         0x61, 0x74, 0x20, 0x00, 0x27, 0x00, 0x20, 0x77, 0x69, 0x74, 0x68,
         0x20, 0x00, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x00, 0x20, 0x62,
         0x79, 0x20, 0x00, 0x28, 0x00, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
         0x00, 0x20, 0x6f, 0x6e, 0x20, 0x00, 0x20, 0x61, 0x73, 0x20, 0x00,
         0x20, 0x69, 0x73, 0x20, 0x00, 0x69, 0x6e, 0x67, 0x20, 0x00, 0x0a,
         0x09, 0x00, 0x3a, 0x00, 0x65, 0x64, 0x20, 0x00, 0x3d, 0x22, 0x00,
         0x20, 0x61, 0x74, 0x20, 0x00, 0x6c, 0x79, 0x20, 0x00, 0x2c, 0x00,
         0x3d, 0x27, 0x00, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x00, 0x2e, 0x20,
         0x54, 0x68, 0x69, 0x73, 0x20, 0x00, 0x20, 0x6e, 0x6f, 0x74, 0x20,
         0x00, 0x65, 0x72, 0x20, 0x00, 0x61, 0x6c, 0x20, 0x00, 0x66, 0x75,
         0x6c, 0x20, 0x00, 0x69, 0x76, 0x65, 0x20, 0x00, 0x6c, 0x65, 0x73,
         0x73, 0x20, 0x00, 0x65, 0x73, 0x74, 0x20, 0x00, 0x69, 0x7a, 0x65,
         0x20, 0x00, 0xc2, 0xa0, 0x00, 0x6f, 0x75, 0x73, 0x20, 0x00];
    const kPFix_EMPTY: u8 = 0;
    const kPFix_SP: u8 = 1;
    const kPFix_COMMASP: u8 = 3;
    const kPFix_SPofSPtheSP: u8 = 6;
    const kPFix_SPtheSP: u8 = 9;
    const kPFix_eSP: u8 = 12;
    const kPFix_SPofSP: u8 = 15;
    const kPFix_sSP: u8 = 20;
    const kPFix_DOT: u8 = 23;
    const kPFix_SPandSP: u8 = 25;
    const kPFix_SPinSP: u8 = 31;
    const kPFix_DQUOT: u8 = 36;
    const kPFix_SPtoSP: u8 = 38;
    const kPFix_DQUOTGT: u8 = 43;
    const kPFix_NEWLINE: u8 = 46;
    const kPFix_DOTSP: u8 = 48;
    const kPFix_CLOSEBR: u8 = 51;
    const kPFix_SPforSP: u8 = 53;
    const kPFix_SPaSP: u8 = 59;
    const kPFix_SPthatSP: u8 = 63;
    const kPFix_SQUOT: u8 = 70;
    const kPFix_SPwithSP: u8 = 72;
    const kPFix_SPfromSP: u8 = 79;
    const kPFix_SPbySP: u8 = 86;
    const kPFix_OPEN: u8 = 91;
    const kPFix_DOTSPTheSP: u8 = 93;
    const kPFix_SPonSP: u8 = 100;
    const kPFix_SPasSP: u8 = 105;
    const kPFix_SPisSP: u8 = 110;
    const kPFix_ingSP: u8 = 115;
    const kPFix_NEWLINETAB: u8 = 120;
    const kPFix_COLON: u8 = 123;
    const kPFix_edSP: u8 = 125;
    const kPFix_EQDQUOT: u8 = 129;
    const kPFix_SPatSP: u8 = 132;
    const kPFix_lySP: u8 = 137;
    const kPFix_COMMA: u8 = 141;
    const kPFix_EQSQUOT: u8 = 143;
    const kPFix_DOTcomSLASH: u8 = 146;
    const kPFix_DOTSPThisSP: u8 = 152;
    const kPFix_SPnotSP: u8 = 160;
    const kPFix_erSP: u8 = 166;
    const kPFix_alSP: u8 = 170;
    const kPFix_fulSP: u8 = 174;
    const kPFix_iveSP: u8 = 179;
    const kPFix_lessSP: u8 = 184;
    const kPFix_estSP: u8 = 190;
    const kPFix_izeSP: u8 = 195;
    const kPFix_NBSP: u8 = 200;
    const kPFix_ousSP: u8 = 203;
    pub const kNumTransforms: i32 = 121;
    pub const kTransforms: [Transform; kNumTransforms as usize] =
        [Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst1,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPtheSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_sSP,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPofSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPandSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst2,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast1,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_COMMASP,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPinSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPtoSP,},
         Transform{prefix_id: kPFix_eSP,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DQUOTGT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_NEWLINE,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast3,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_CLOSEBR,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPforSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst3,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast2,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPaSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPthatSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_DOT,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst4,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPwithSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPfromSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPbySP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst5,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst6,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_SPtheSP,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast4,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DOTSPTheSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPonSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPasSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPisSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast7,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast1,
                   suffix_id: kPFix_ingSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_NEWLINETAB,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_COLON,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_edSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst9,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitFirst7,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast6,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_OPEN,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast8,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPatSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_lySP,},
         Transform{prefix_id: kPFix_SPtheSP,
                   transform: kIdentity,
                   suffix_id: kPFix_SPofSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast5,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kOmitLast9,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DQUOT,},
         Transform{prefix_id: kPFix_DOT,
                   transform: kIdentity,
                   suffix_id: kPFix_OPEN,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DQUOTGT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_DOTcomSLASH,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_SPtheSP,
                   transform: kIdentity,
                   suffix_id: kPFix_SPofSPtheSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_SQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_DOTSPThisSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_COMMA,},
         Transform{prefix_id: kPFix_DOT,
                   transform: kIdentity,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_OPEN,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_SPnotSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_erSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_SP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_alSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_EQSQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_OPEN,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_fulSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_iveSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_lessSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_SQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_estSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DQUOTGT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_EQSQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_COMMA,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_izeSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_NBSP,
                   transform: kIdentity,
                   suffix_id: kPFix_EMPTY,},
         Transform{prefix_id: kPFix_SP,
                   transform: kIdentity,
                   suffix_id: kPFix_COMMA,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kIdentity,
                   suffix_id: kPFix_ousSP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EQSQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_COMMA,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_COMMASP,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_COMMA,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_OPEN,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DOT,},
         Transform{prefix_id: kPFix_EMPTY,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EQSQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_DOTSP,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EQDQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseAll,
                   suffix_id: kPFix_EQSQUOT,},
         Transform{prefix_id: kPFix_SP,
                   transform: kUppercaseFirst,
                   suffix_id: kPFix_EQSQUOT,}];
    fn ToUpperCase(p: &mut [u8]) -> i32 {
        if (unsafe { *p.get_unchecked(0) } < 0xc0) {
            if (unsafe { *p.get_unchecked(0) } >= b'a' &&
                    unsafe { *p.get_unchecked(0) } <= b'z') {
                *unsafe { p.get_unchecked_mut(0) } ^= 32;
            }
            return 1;
        }
        if (unsafe { *p.get_unchecked(0) } < 0xe0) {
            *unsafe { p.get_unchecked_mut(1) } ^= 32;
            return 2;
        }
        *unsafe { p.get_unchecked_mut(2) } ^= 5;
        3
    }
    pub fn TransformDictionaryWord(dst: &mut [u8], mut word: &[u8],
                                   mut len: i32, transform: i32) -> i32 {
        let mut idx: i32 = 0;
        {
            let prefix =
                &unsafe {
                     (&kPrefixSuffix[(*kTransforms.get_unchecked(transform
                                                                                     as
                                                                                     usize)).prefix_id
                                                         as usize..])
                 };
            while (unsafe { *prefix.get_unchecked(idx as usize) } != 0) {
                *unsafe { dst.get_unchecked_mut(idx as usize) } =
                    unsafe { *prefix.get_unchecked(idx as usize) };
                idx += 1;
            }
        }
        {
            let t =
                unsafe {
                    kTransforms.get_unchecked(transform as usize)
                }.transform;
            let mut skip: i32 =
                if t < kOmitFirst1 {
                    0
                } else { t as i32 - (kOmitFirst1 - 1) as i32 };
            let mut i: i32 = 0;
            if (skip > len) { skip = len; }
            word = unsafe { (&word[skip as usize..]) };
            len -= skip;
            if (t <= kOmitLast9) { len -= t as i32; }
            while (i < len) {
                *unsafe { dst.get_unchecked_mut(idx as usize) } =
                    unsafe { *word.get_unchecked(i as usize) };
                idx += 1;
                i += 1;
            }
            let uppercase =
                &mut unsafe {
                         (&mut dst[(idx - len) as usize..])
                     };
            if (t == kUppercaseFirst) {
                ToUpperCase(uppercase);
            } else if (t == kUppercaseAll) {
                let mut uppercase_offset: usize = 0;
                while (len > 0) {
                    let step =
                        ToUpperCase(&mut unsafe {
                                             (&mut uppercase[uppercase_offset..])
                                         });
                    uppercase_offset += step as usize;
                    len -= step;
                }
            }
        }
        {
            let suffix =
                &unsafe {
                     (&kPrefixSuffix[(*kTransforms.get_unchecked(transform
                                                                                     as
                                                                                     usize)).suffix_id
                                                         as usize..])
                 };
            let mut i: usize = 0;
            while (unsafe { *suffix.get_unchecked(i as usize) } != 0) {
                *unsafe { dst.get_unchecked_mut(idx as usize) } =
                    unsafe { *suffix.get_unchecked(i) };
                idx += 1;
                i += 1;
            }
            idx
        }
    }
}
mod decode {
    #![allow(non_snake_case)]
    #![allow(unused_parens)]
    #![allow(non_camel_case_types)]
    #![allow(non_snake_case)]
    #![allow(non_upper_case_globals)]
    #![allow(unused_macros)]
    use core;
    use super::alloc;
    pub use alloc::{AllocatedStackMemory, Allocator, SliceWrapper,
                    SliceWrapperMut, StackAllocator};
    use core::mem;
    use super::bit_reader;
    use super::huffman;
    use super::state;
    use super::prefix;
    use super::transform::{TransformDictionaryWord, kNumTransforms};
    use state::{BlockTypeAndLengthState, BrotliRunningContextMapState,
                BrotliRunningDecodeUint8State, BrotliRunningHuffmanState,
                BrotliRunningMetablockHeaderState,
                BrotliRunningReadBlockLengthState, BrotliRunningState,
                BrotliRunningTreeGroupState, BrotliRunningUncompressedState,
                kLiteralContextBits, BrotliDecoderErrorCode};
    use context::{kContextLookup};
    use ::dictionary::{kBrotliDictionary, kBrotliDictionaryOffsetsByLength,
                       kBrotliDictionarySizeBitsByLength,
                       kBrotliMaxDictionaryWordLength,
                       kBrotliMinDictionaryWordLength};
    pub use huffman::{HuffmanCode, HuffmanTreeGroup};
    #[repr(C)]
    #[no_mangle]
    pub enum BrotliResult {
        ResultSuccess = 1,
        NeedsMoreInput = 2,
        NeedsMoreOutput = 3,
        ResultFailure = 0,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for BrotliResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match (&*self,) {
                (&BrotliResult::ResultSuccess,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "ResultSuccess");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliResult::NeedsMoreInput,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "NeedsMoreInput");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliResult::NeedsMoreOutput,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "NeedsMoreOutput");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
                (&BrotliResult::ResultFailure,) => {
                    let mut debug_trait_builder =
                        ::core::fmt::Formatter::debug_tuple(f,
                                                            "ResultFailure");
                    ::core::fmt::DebugTuple::finish(&mut debug_trait_builder)
                }
            }
        }
    }
    const kBrotliWindowGap: u32 = 16;
    const kBrotliLargeMinWbits: u32 = 10;
    const kBrotliLargeMaxWbits: u32 = 30;
    const kBrotliMaxPostfix: usize = 3;
    const kBrotliMaxAllowedDistance: u32 = 0x7FFFFFFC;
    const kDefaultCodeLength: u32 = 8;
    const kCodeLengthRepeatCode: u32 = 16;
    pub const kNumLiteralCodes: u16 = 256;
    pub const kNumInsertAndCopyCodes: u16 = 704;
    pub const kNumBlockLengthCodes: u32 = 26;
    const kDistanceContextBits: i32 = 2;
    const HUFFMAN_TABLE_BITS: u32 = 8;
    const HUFFMAN_TABLE_MASK: u32 = 0xff;
    const CODE_LENGTH_CODES: usize = 18;
    const kCodeLengthCodeOrder: [u8; CODE_LENGTH_CODES] =
        [1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    const kCodeLengthPrefixLength: [u8; 16] =
        [2, 2, 2, 3, 2, 2, 2, 4, 2, 2, 2, 3, 2, 2, 2, 4];
    const kCodeLengthPrefixValue: [u8; 16] =
        [0, 4, 3, 2, 0, 4, 3, 1, 0, 4, 3, 2, 0, 4, 3, 5];
    macro_rules! BROTLI_LOG_UINT(($ num : expr) =>
                                 {
                                     xprintln !
                                     ("{:?} = {:?}", stringify ! ($ num), $
                                      num)
                                 } ;);
    macro_rules! BROTLI_LOG(($ str : expr, $ num : expr) =>
                            { xprintln ! ("{:?} {:?}", $ str, $ num) ; } ;
                            ($ str : expr, $ num0 : expr, $ num1 : expr) =>
                            {
                                xprintln !
                                ("{:?} {:?} {:?}", $ str, $ num0, $ num1) ;
                            } ;
                            ($ str : expr, $ num0 : expr, $ num1 : expr, $
                             num2 : expr) =>
                            {
                                xprintln !
                                ("{:?} {:?} {:?} {:?}", $ str, $ num0, $ num1,
                                 $ num2) ;
                            } ;
                            ($ str : expr, $ num0 : expr, $ num1 : expr, $
                             num2 : expr, $ num3 : expr) =>
                            {
                                xprintln !
                                ("{:?} {:?} {:?} {:?} {:?}", $ str, $ num0, $
                                 num1, $ num2, $ num3) ;
                            } ;);
    fn is_fatal(e: BrotliDecoderErrorCode) -> bool { (e as i64) < 0 }
    fn assign_error_code(output: &mut BrotliDecoderErrorCode,
                         input: BrotliDecoderErrorCode)
     -> BrotliDecoderErrorCode {
        *output = input;
        input
    }
    #[allow(non_snake_case)]
    macro_rules! SaveErrorCode {
        ($ state : expr, $ e : expr) =>
        {
            match assign_error_code(& mut $ state . error_code, $ e)
            {
                BrotliDecoderErrorCode :: BROTLI_DECODER_SUCCESS =>
                BrotliResult :: ResultSuccess, BrotliDecoderErrorCode ::
                BROTLI_DECODER_NEEDS_MORE_INPUT => BrotliResult ::
                NeedsMoreInput, BrotliDecoderErrorCode ::
                BROTLI_DECODER_NEEDS_MORE_OUTPUT => BrotliResult ::
                NeedsMoreOutput, _ => BrotliResult :: ResultFailure,
            }
        }
    }
    macro_rules! SaveResult {
        ($ state : expr, $ e : expr) =>
        {
            match($ state . error_code = match $ e
                  {
                      BrotliResult :: ResultSuccess => BrotliDecoderErrorCode
                      :: BROTLI_DECODER_SUCCESS, BrotliResult ::
                      NeedsMoreInput => BrotliDecoderErrorCode ::
                      BROTLI_DECODER_NEEDS_MORE_INPUT, BrotliResult ::
                      NeedsMoreOutput => BrotliDecoderErrorCode ::
                      BROTLI_DECODER_NEEDS_MORE_OUTPUT, BrotliResult ::
                      ResultFailure => BrotliDecoderErrorCode ::
                      BROTLI_DECODER_ERROR_UNREACHABLE,
                  })
            {
                BrotliDecoderErrorCode :: BROTLI_DECODER_SUCCESS =>
                BrotliResult :: ResultSuccess, BrotliDecoderErrorCode ::
                BROTLI_DECODER_NEEDS_MORE_INPUT => BrotliResult ::
                NeedsMoreInput, BrotliDecoderErrorCode ::
                BROTLI_DECODER_NEEDS_MORE_OUTPUT => BrotliResult ::
                NeedsMoreOutput, _ => BrotliResult :: ResultFailure,
            }
        }
    }
    macro_rules! BROTLI_LOG_ARRAY_INDEX(($ array : expr, $ index : expr) =>
                                        {
                                            xprintln !
                                            ("{:?}[{:?}] = {:?}", stringify !
                                             ($ array), $ index, $ array
                                             [$ index as usize])
                                        } ;);
    const NUM_DISTANCE_SHORT_CODES: u32 = 16;
    pub const BROTLI_MAX_DISTANCE_BITS: u32 = 24;
    pub const BROTLI_LARGE_MAX_DISTANCE_BITS: u32 = 62;
    pub fn BROTLI_DISTANCE_ALPHABET_SIZE(NPOSTFIX: u32, NDIRECT: u32,
                                         MAXNBITS: u32) -> u32 {
        NUM_DISTANCE_SHORT_CODES + (NDIRECT) +
            ((MAXNBITS) << ((NPOSTFIX) + 1))
    }
    pub use state::BrotliState;
    fn DecodeWindowBits(s_large_window: &mut bool, s_window_bits: &mut u32,
                        br: &mut bit_reader::BrotliBitReader)
     -> BrotliDecoderErrorCode {
        let mut n: u32 = 0;
        let large_window = *s_large_window;
        *s_large_window = false;
        bit_reader::BrotliTakeBits(br, 1, &mut n);
        if (n == 0) {
            *s_window_bits = 16;
            return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        }
        bit_reader::BrotliTakeBits(br, 3, &mut n);
        if (n != 0) {
            *s_window_bits = 17 + n;
            return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        }
        bit_reader::BrotliTakeBits(br, 3, &mut n);
        if (n == 1) {
            if (large_window) {
                bit_reader::BrotliTakeBits(br, 1, &mut n);
                if (n == 1) {
                    return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS;
                }
                *s_large_window = true;
                return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
            } else {
                return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS;
            }
        }
        if (n != 0) {
            *s_window_bits = 8 + n;
            return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        }
        *s_window_bits = 17;
        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
    }
    #[cold]
    fn mark_unlikely() { }
    fn DecodeVarLenUint8(substate_decode_uint8:
                             &mut state::BrotliRunningDecodeUint8State,
                         mut br: &mut bit_reader::BrotliBitReader,
                         value: &mut u32, input: &[u8])
     -> BrotliDecoderErrorCode {
        let mut bits: u32 = 0;
        loop  {
            match *substate_decode_uint8 {
                BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut br, 1, &mut bits,
                                                       input) {
                        mark_unlikely();
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if (bits == 0) {
                        *value = 0;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                    }
                    *substate_decode_uint8 =
                        BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_SHORT;
                }
                BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_SHORT
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut br, 3, &mut bits,
                                                       input) {
                        mark_unlikely();
                        *substate_decode_uint8 =
                            BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_SHORT;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if (bits == 0) {
                        *value = 1;
                        *substate_decode_uint8 =
                            BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                    }
                    *value = bits;
                    *substate_decode_uint8 =
                        BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_LONG;
                }
                BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_LONG
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut br, *value,
                                                       &mut bits, input) {
                        mark_unlikely();
                        *substate_decode_uint8 =
                            BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_LONG;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    *value = (1u32 << *value) + bits;
                    *substate_decode_uint8 =
                        BrotliRunningDecodeUint8State::BROTLI_STATE_DECODE_UINT8_NONE;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                }
            }
        }
    }
    fn DecodeMetaBlockLength<AllocU8: alloc::Allocator<u8>,
                             AllocU32: alloc::Allocator<u32>,
                             AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                         &mut BrotliState<AllocU8,
                                                                                          AllocU32,
                                                                                          AllocHC>,
                                                                     input:
                                                                         &[u8])
     -> BrotliDecoderErrorCode {
        let mut bits: u32 = 0;
        loop  {
            match s.substate_metablock_header {
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                       &mut bits, input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    s.is_last_metablock = bits as u8;
                    s.meta_block_remaining_len = 0;
                    s.is_uncompressed = 0;
                    s.is_metadata = 0;
                    if (s.is_last_metablock == 0) {
                        s.substate_metablock_header =
                            BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NIBBLES;
                        continue ;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_EMPTY;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_EMPTY
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                       &mut bits, input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if bits != 0 {
                        s.substate_metablock_header =
                            BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NIBBLES;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NIBBLES
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 2,
                                                       &mut bits, input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    s.size_nibbles = (bits + 4) as u8;
                    s.loop_counter = 0;
                    if (bits == 3) {
                        s.is_metadata = 1;
                        s.substate_metablock_header =
                            BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_RESERVED;
                        continue ;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_SIZE;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_SIZE
                => {
                    let mut i = s.loop_counter;
                    while i < s.size_nibbles as i32 {
                        if !bit_reader::BrotliSafeReadBits(&mut s.br, 4,
                                                           &mut bits, input) {
                            s.loop_counter = i;
                            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                        }
                        if (i + 1 == s.size_nibbles as i32 &&
                                s.size_nibbles > 4 && bits == 0) {
                            return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE;
                        }
                        s.meta_block_remaining_len |=
                            (bits << (i * 4)) as i32;
                        i += 1;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED
                => {
                    if (s.is_last_metablock == 0 && s.is_metadata == 0) {
                        if !bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                           &mut bits, input) {
                            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                        }
                        s.is_uncompressed = bits as u8;
                    }
                    s.meta_block_remaining_len += 1;
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_RESERVED
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                       &mut bits, input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if (bits != 0) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_RESERVED;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_BYTES;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_BYTES
                => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 2,
                                                       &mut bits, input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if (bits == 0) {
                        s.substate_metablock_header =
                            BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_NONE;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                    }
                    s.size_nibbles = bits as u8;
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_METADATA;
                }
                BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_METADATA
                => {
                    let mut i = s.loop_counter;
                    while i < s.size_nibbles as i32 {
                        if !bit_reader::BrotliSafeReadBits(&mut s.br, 8,
                                                           &mut bits, input) {
                            s.loop_counter = i;
                            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                        }
                        if (i + 1 == s.size_nibbles as i32 &&
                                s.size_nibbles > 1 && bits == 0) {
                            return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE;
                        }
                        s.meta_block_remaining_len |=
                            (bits << (i * 8)) as i32;
                        i += 1;
                    }
                    s.substate_metablock_header =
                        BrotliRunningMetablockHeaderState::BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED;
                    continue ;
                }
            }
        }
    }
    #[inline(always)]
    fn DecodeSymbol(bits: u32, table: &[HuffmanCode],
                    br: &mut bit_reader::BrotliBitReader) -> u32 {
        let mut table_index = bits & HUFFMAN_TABLE_MASK;
        let mut table_element =
            unsafe { *table.get_unchecked(table_index as usize) };
        if table_element.bits > HUFFMAN_TABLE_BITS as u8 {
            let nbits = table_element.bits - HUFFMAN_TABLE_BITS as u8;
            bit_reader::BrotliDropBits(br, HUFFMAN_TABLE_BITS);
            table_index += table_element.value as u32;
            table_element =
                unsafe {
                    *table.get_unchecked((table_index +
                                              ((bits >> HUFFMAN_TABLE_BITS) &
                                                   bit_reader::BitMask(nbits
                                                                           as
                                                                           u32)))
                                             as usize)
                };
        }
        bit_reader::BrotliDropBits(br, table_element.bits as u32);
        table_element.value as u32
    }
    #[inline(always)]
    fn ReadSymbol(table: &[HuffmanCode], br: &mut bit_reader::BrotliBitReader,
                  input: &[u8]) -> u32 {
        DecodeSymbol(bit_reader::BrotliGet16BitsUnmasked(br, input), table,
                     br)
    }
    fn SafeDecodeSymbol(table: &[HuffmanCode],
                        mut br: &mut bit_reader::BrotliBitReader,
                        result: &mut u32) -> bool {
        let mut available_bits = bit_reader::BrotliGetAvailableBits(br);
        if (available_bits == 0) {
            if (unsafe { *table.get_unchecked(0) }.bits == 0) {
                *result = unsafe { *table.get_unchecked(0) }.value as u32;
                return true;
            }
            return false;
        }
        let mut val = bit_reader::BrotliGetBitsUnmasked(br) as u32;
        let table_index = (val & HUFFMAN_TABLE_MASK) as usize;
        let table_element = unsafe { *table.get_unchecked(table_index) };
        if (table_element.bits <= HUFFMAN_TABLE_BITS as u8) {
            if (table_element.bits as u32 <= available_bits) {
                bit_reader::BrotliDropBits(&mut br,
                                           table_element.bits as u32);
                *result = table_element.value as u32;
                return true;
            } else { return false; }
        }
        if (available_bits <= HUFFMAN_TABLE_BITS) { return false; }
        val =
            (val & bit_reader::BitMask(table_element.bits as u32)) >>
                HUFFMAN_TABLE_BITS;
        available_bits -= HUFFMAN_TABLE_BITS;
        let table_sub_element =
            unsafe {
                *table.get_unchecked(table_index +
                                         table_element.value as usize +
                                         val as usize)
            };
        if (available_bits < table_sub_element.bits as u32) { return false; }
        bit_reader::BrotliDropBits(&mut br,
                                   HUFFMAN_TABLE_BITS +
                                       table_sub_element.bits as u32);
        *result = table_sub_element.value as u32;
        true
    }
    fn SafeReadSymbol(table: &[HuffmanCode],
                      br: &mut bit_reader::BrotliBitReader, result: &mut u32,
                      input: &[u8]) -> bool {
        let mut val: u32 = 0;
        if (bit_reader::BrotliSafeGetBits(br, 15, &mut val, input)) {
            *result = DecodeSymbol(val, table, br);
            return true;
        } else { mark_unlikely(); }
        SafeDecodeSymbol(table, br, result)
    }
    fn PreloadSymbol(safe: bool, table: &[HuffmanCode],
                     br: &mut bit_reader::BrotliBitReader, bits: &mut u32,
                     value: &mut u32, input: &[u8]) {
        if (safe) { return; }
        let table_element =
            unsafe {
                *table.get_unchecked(bit_reader::BrotliGetBits(br,
                                                               HUFFMAN_TABLE_BITS,
                                                               input) as
                                         usize)
            };
        *bits = table_element.bits as u32;
        *value = table_element.value as u32;
    }
    fn ReadPreloadedSymbol(table: &[HuffmanCode],
                           br: &mut bit_reader::BrotliBitReader,
                           bits: &mut u32, value: &mut u32, input: &[u8])
     -> u32 {
        let result =
            if *bits > HUFFMAN_TABLE_BITS {
                mark_unlikely();
                let val = bit_reader::BrotliGet16BitsUnmasked(br, input);
                let mut ext_index = (val & HUFFMAN_TABLE_MASK) + *value;
                let mask = bit_reader::BitMask((*bits - HUFFMAN_TABLE_BITS));
                bit_reader::BrotliDropBits(br, HUFFMAN_TABLE_BITS);
                ext_index += (val >> HUFFMAN_TABLE_BITS) & mask;
                let ext = unsafe { *table.get_unchecked(ext_index as usize) };
                bit_reader::BrotliDropBits(br, ext.bits as u32);
                ext.value as u32
            } else { bit_reader::BrotliDropBits(br, *bits); *value };
        PreloadSymbol(false, table, br, bits, value, input);
        result
    }
    fn Log2Floor(mut x: u32) -> u32 {
        let mut result: u32 = 0;
        while x != 0 { x >>= 1; result += 1; }
        result
    }
    fn ReadSimpleHuffmanSymbols<AllocU8: alloc::Allocator<u8>,
                                AllocU32: alloc::Allocator<u32>,
                                AllocHC: alloc::Allocator<HuffmanCode>>(alphabet_size:
                                                                            u32,
                                                                        max_symbol:
                                                                            u32,
                                                                        s:
                                                                            &mut BrotliState<AllocU8,
                                                                                             AllocU32,
                                                                                             AllocHC>,
                                                                        input:
                                                                            &[u8])
     -> BrotliDecoderErrorCode {
        let max_bits = Log2Floor(alphabet_size - 1);
        let mut i = s.sub_loop_counter;
        let num_symbols = s.symbol;
        for symbols_lists_item in
            unsafe {
                (&mut s.symbols_lists_array[s.sub_loop_counter
                                                                as
                                                                usize..num_symbols
                                                                           as
                                                                           usize
                                                                           +
                                                                           1])
            }.iter_mut() {
            let mut v: u32 = 0;
            if !bit_reader::BrotliSafeReadBits(&mut s.br, max_bits, &mut v,
                                               input) {
                mark_unlikely();
                s.sub_loop_counter = i;
                s.substate_huffman =
                    BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_READ;
                return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
            }
            if (v >= max_symbol) {
                return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET;
            }
            *symbols_lists_item = v as u16;
            ;
            i += 1;
        }
        i = 0;
        for symbols_list_item in
            unsafe {
                (&s.symbols_lists_array[0..num_symbols as
                                                               usize])
            }.iter() {
            for other_item in
                unsafe {
                    (&s.symbols_lists_array[i as usize +
                                                                1..num_symbols
                                                                       as
                                                                       usize +
                                                                       1])
                }.iter() {
                if (*symbols_list_item == *other_item) {
                    return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME;
                }
            }
            i += 1;
        }
        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
    }
    fn ProcessSingleCodeLength(code_len: u32, symbol: &mut u32,
                               repeat: &mut u32, space: &mut u32,
                               prev_code_len: &mut u32,
                               symbol_lists: &mut [u16],
                               symbol_list_index_offset: usize,
                               code_length_histo: &mut [u16],
                               next_symbol: &mut [i32]) {
        *repeat = 0;
        if (code_len != 0) {
            *unsafe {
                 symbol_lists.get_unchecked_mut((symbol_list_index_offset as
                                                     i32 +
                                                     *next_symbol.get_unchecked(code_len
                                                                                    as
                                                                                    usize))
                                                    as usize)
             } = (*symbol) as u16;
            *unsafe { next_symbol.get_unchecked_mut(code_len as usize) } =
                (*symbol) as i32;
            *prev_code_len = code_len;
            *space = space.wrapping_sub(32768 >> code_len);
            *unsafe { code_length_histo.get_unchecked_mut(code_len as usize) }
                += 1;
            ;
        }
        (*symbol) += 1;
    }
    fn ProcessRepeatedCodeLength(code_len: u32, mut repeat_delta: u32,
                                 alphabet_size: u32, symbol: &mut u32,
                                 repeat: &mut u32, space: &mut u32,
                                 prev_code_len: &mut u32,
                                 repeat_code_len: &mut u32,
                                 symbol_lists: &mut [u16],
                                 symbol_lists_index: usize,
                                 code_length_histo: &mut [u16],
                                 next_symbol: &mut [i32]) {
        let old_repeat: u32;
        let extra_bits: u32;
        let new_len: u32;
        if (code_len == kCodeLengthRepeatCode) {
            extra_bits = 2;
            new_len = *prev_code_len
        } else { extra_bits = 3; new_len = 0 }
        if (*repeat_code_len != new_len) {
            *repeat = 0;
            *repeat_code_len = new_len;
        }
        old_repeat = *repeat;
        if (*repeat > 0) { *repeat -= 2; *repeat <<= extra_bits; }
        *repeat += repeat_delta + 3;
        repeat_delta = *repeat - old_repeat;
        if (*symbol + repeat_delta > alphabet_size) {
            *symbol = alphabet_size;
            *space = 0xFFFFF;
            return;
        }
        ;
        if (*repeat_code_len != 0) {
            let last: u32 = *symbol + repeat_delta;
            let mut next: i32 =
                unsafe {
                    *next_symbol.get_unchecked(*repeat_code_len as usize)
                };
            loop  {
                *unsafe {
                     symbol_lists.get_unchecked_mut((symbol_lists_index as i32
                                                         + next) as usize)
                 } = (*symbol) as u16;
                next = (*symbol) as i32;
                (*symbol) += 1;
                if *symbol == last { break ; }
            }
            *unsafe {
                 next_symbol.get_unchecked_mut(*repeat_code_len as usize)
             } = next;
            *space =
                space.wrapping_sub(repeat_delta << (15 - *repeat_code_len));
            *unsafe {
                 code_length_histo.get_unchecked_mut(*repeat_code_len as
                                                         usize)
             } =
                (unsafe {
                     *code_length_histo.get_unchecked(*repeat_code_len as
                                                          usize)
                 } as u32 + repeat_delta) as u16;
        } else { *symbol += repeat_delta; }
    }
    fn ReadSymbolCodeLengths<AllocU8: alloc::Allocator<u8>,
                             AllocU32: alloc::Allocator<u32>,
                             AllocHC: alloc::Allocator<HuffmanCode>>(alphabet_size:
                                                                         u32,
                                                                     s:
                                                                         &mut BrotliState<AllocU8,
                                                                                          AllocU32,
                                                                                          AllocHC>,
                                                                     input:
                                                                         &[u8])
     -> BrotliDecoderErrorCode {
        let mut symbol = s.symbol;
        let mut repeat = s.repeat;
        let mut space = s.space;
        let mut prev_code_len: u32 = s.prev_code_len;
        let mut repeat_code_len: u32 = s.repeat_code_len;
        if (!bit_reader::BrotliWarmupBitReader(&mut s.br, input)) {
            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
        }
        while (symbol < alphabet_size && space > 0) {
            let mut p_index = 0;
            let code_len: u32;
            if (!bit_reader::BrotliCheckInputAmount(&s.br,
                                                    bit_reader::BROTLI_SHORT_FILL_BIT_WINDOW_READ))
               {
                s.symbol = symbol;
                s.repeat = repeat;
                s.prev_code_len = prev_code_len;
                s.repeat_code_len = repeat_code_len;
                s.space = space;
                return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
            }
            bit_reader::BrotliFillBitWindow16(&mut s.br, input);
            p_index +=
                bit_reader::BrotliGetBitsUnmasked(&s.br) &
                    bit_reader::BitMask(huffman::BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH
                                            as u32) as u64;
            let p = unsafe { *s.table.get_unchecked(p_index as usize) };
            bit_reader::BrotliDropBits(&mut s.br, p.bits as u32);
            code_len = p.value as u32;
            if (code_len < kCodeLengthRepeatCode) {
                ProcessSingleCodeLength(code_len, &mut symbol, &mut repeat,
                                        &mut space, &mut prev_code_len,
                                        &mut s.symbols_lists_array,
                                        s.symbol_lists_index as usize,
                                        &mut s.code_length_histo[..],
                                        &mut s.next_symbol[..]);
            } else {
                let extra_bits: u32 =
                    if code_len == kCodeLengthRepeatCode { 2 } else { 3 };
                let repeat_delta: u32 =
                    bit_reader::BrotliGetBitsUnmasked(&s.br) as u32 &
                        bit_reader::BitMask(extra_bits);
                bit_reader::BrotliDropBits(&mut s.br, extra_bits);
                ProcessRepeatedCodeLength(code_len, repeat_delta,
                                          alphabet_size, &mut symbol,
                                          &mut repeat, &mut space,
                                          &mut prev_code_len,
                                          &mut repeat_code_len,
                                          &mut s.symbols_lists_array,
                                          s.symbol_lists_index as usize,
                                          &mut s.code_length_histo[..],
                                          &mut s.next_symbol[..]);
            }
        }
        s.space = space;
        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
    }
    fn SafeReadSymbolCodeLengths<AllocU8: alloc::Allocator<u8>,
                                 AllocU32: alloc::Allocator<u32>,
                                 AllocHC: alloc::Allocator<HuffmanCode>>(alphabet_size:
                                                                             u32,
                                                                         s:
                                                                             &mut BrotliState<AllocU8,
                                                                                              AllocU32,
                                                                                              AllocHC>,
                                                                         input:
                                                                             &[u8])
     -> BrotliDecoderErrorCode {
        while (s.symbol < alphabet_size && s.space > 0) {
            let mut p_index = 0;
            let code_len: u32;
            let mut bits: u32 = 0;
            let available_bits: u32 =
                bit_reader::BrotliGetAvailableBits(&s.br);
            if (available_bits != 0) {
                bits = bit_reader::BrotliGetBitsUnmasked(&s.br) as u32;
            }
            p_index +=
                bits &
                    bit_reader::BitMask(huffman::BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH
                                            as u32);
            let p = unsafe { *s.table.get_unchecked(p_index as usize) };
            if (p.bits as u32 > available_bits) {
                if (!bit_reader::BrotliPullByte(&mut s.br, input)) {
                    return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                }
                continue ;
            }
            code_len = p.value as u32;
            if (code_len < kCodeLengthRepeatCode) {
                bit_reader::BrotliDropBits(&mut s.br, p.bits as u32);
                ProcessSingleCodeLength(code_len, &mut s.symbol,
                                        &mut s.repeat, &mut s.space,
                                        &mut s.prev_code_len,
                                        &mut s.symbols_lists_array,
                                        s.symbol_lists_index as usize,
                                        &mut s.code_length_histo[..],
                                        &mut s.next_symbol[..]);
            } else {
                let extra_bits: u32 = code_len - 14;
                let repeat_delta: u32 =
                    (bits >> p.bits) & bit_reader::BitMask(extra_bits);
                if (available_bits < p.bits as u32 + extra_bits) {
                    if (!bit_reader::BrotliPullByte(&mut s.br, input)) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    continue ;
                }
                bit_reader::BrotliDropBits(&mut s.br,
                                           p.bits as u32 + extra_bits);
                ProcessRepeatedCodeLength(code_len, repeat_delta,
                                          alphabet_size, &mut s.symbol,
                                          &mut s.repeat, &mut s.space,
                                          &mut s.prev_code_len,
                                          &mut s.repeat_code_len,
                                          &mut s.symbols_lists_array,
                                          s.symbol_lists_index as usize,
                                          &mut s.code_length_histo[..],
                                          &mut s.next_symbol[..]);
            }
        }
        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
    }
    fn ReadCodeLengthCodeLengths<AllocU8: alloc::Allocator<u8>,
                                 AllocU32: alloc::Allocator<u32>,
                                 AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                             &mut BrotliState<AllocU8,
                                                                                              AllocU32,
                                                                                              AllocHC>,
                                                                         input:
                                                                             &[u8])
     -> BrotliDecoderErrorCode {
        let mut num_codes: u32 = s.repeat;
        let mut space: u32 = s.space;
        let mut i = s.sub_loop_counter;
        for code_length_code_order in
            unsafe {
                (&kCodeLengthCodeOrder[s.sub_loop_counter as
                                                           usize..CODE_LENGTH_CODES])
            }.iter() {
            let code_len_idx = *code_length_code_order;
            let mut ix: u32 = 0;
            if !bit_reader::BrotliSafeGetBits(&mut s.br, 4, &mut ix, input) {
                mark_unlikely();
                let available_bits: u32 =
                    bit_reader::BrotliGetAvailableBits(&s.br);
                if (available_bits != 0) {
                    ix =
                        bit_reader::BrotliGetBitsUnmasked(&s.br) as u32 & 0xF;
                } else { ix = 0; }
                if (unsafe {
                        *kCodeLengthPrefixLength.get_unchecked(ix as usize)
                    } as u32 > available_bits) {
                    s.sub_loop_counter = i;
                    s.repeat = num_codes;
                    s.space = space;
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_COMPLEX;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                }
            }
            ;
            let v: u32 =
                unsafe { *kCodeLengthPrefixValue.get_unchecked(ix as usize) }
                    as u32;
            bit_reader::BrotliDropBits(&mut s.br,
                                       unsafe {
                                           *kCodeLengthPrefixLength.get_unchecked(ix
                                                                                      as
                                                                                      usize)
                                       } as u32);
            *unsafe {
                 s.code_length_code_lengths.get_unchecked_mut(code_len_idx as
                                                                  usize)
             } = v as u8;
            ;
            if v != 0 {
                space = space.wrapping_sub(32 >> v);
                num_codes += 1;
                *unsafe { s.code_length_histo.get_unchecked_mut(v as usize) }
                    += 1;
                if space.wrapping_sub(1) >= 32 { break ; }
            }
            i += 1;
        }
        if (!(num_codes == 1 || space == 0)) {
            return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CL_SPACE;
        }
        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
    }
    fn ReadHuffmanCode<AllocU8: alloc::Allocator<u8>,
                       AllocU32: alloc::Allocator<u32>,
                       AllocHC: alloc::Allocator<HuffmanCode>>(mut alphabet_size:
                                                                   u32,
                                                               max_symbol:
                                                                   u32,
                                                               table:
                                                                   &mut [HuffmanCode],
                                                               offset: usize,
                                                               opt_table_size:
                                                                   Option<&mut u32>,
                                                               s:
                                                                   &mut BrotliState<AllocU8,
                                                                                    AllocU32,
                                                                                    AllocHC>,
                                                               input: &[u8])
     -> BrotliDecoderErrorCode {
        alphabet_size &= 0x7ff;
        loop  {
            match s.substate_huffman {
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE => {
                    if !bit_reader::BrotliSafeReadBits(&mut s.br, 2,
                                                       &mut s.sub_loop_counter,
                                                       input) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    ;
                    if (s.sub_loop_counter != 1) {
                        s.space = 32;
                        s.repeat = 0;
                        let max_code_len_len =
                            huffman::BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH
                                as usize + 1;
                        for code_length_histo in
                            unsafe {
                                (&mut s.code_length_histo[0..max_code_len_len])
                            }.iter_mut() {
                            *code_length_histo = 0;
                        }
                        for code_length_code_length in
                            s.code_length_code_lengths[..].iter_mut() {
                            *code_length_code_length = 0;
                        }
                        s.substate_huffman =
                            BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_COMPLEX;
                        continue ;
                    }
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_SIZE;
                }
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_SIZE =>
                {
                    if (!bit_reader::BrotliSafeReadBits(&mut s.br, 2,
                                                        &mut s.symbol, input))
                       {
                        s.substate_huffman =
                            BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_SIZE;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    s.sub_loop_counter = 0;
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_READ;
                }
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_READ =>
                {
                    let result =
                        ReadSimpleHuffmanSymbols(alphabet_size, max_symbol, s,
                                                 input);
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_BUILD;
                }
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_BUILD
                => {
                    let table_size: u32;
                    if (s.symbol == 3) {
                        let mut bits: u32 = 0;
                        if (!bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                            &mut bits, input))
                           {
                            s.substate_huffman =
                                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_SIMPLE_BUILD;
                            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                        }
                        s.symbol += bits;
                    }
                    ;
                    table_size =
                        huffman::BrotliBuildSimpleHuffmanTable(&mut table[offset..],
                                                               HUFFMAN_TABLE_BITS
                                                                   as i32,
                                                               &s.symbols_lists_array[..],
                                                               s.symbol);
                    if let Some(opt_table_size_ref) = opt_table_size {
                        *opt_table_size_ref = table_size
                    }
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                }
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_COMPLEX => {
                    let result = ReadCodeLengthCodeLengths(s, input);
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    huffman::BrotliBuildCodeLengthsHuffmanTable(&mut s.table,
                                                                &s.code_length_code_lengths,
                                                                &s.code_length_histo);
                    for code_length_histo in
                        s.code_length_histo[..].iter_mut() {
                        *code_length_histo = 0;
                    }
                    let max_code_length =
                        huffman::BROTLI_HUFFMAN_MAX_CODE_LENGTH as usize + 1;
                    for (i, next_symbol_mut) in
                        unsafe {
                            (&mut s.next_symbol[0..max_code_length])
                        }.iter_mut().enumerate() {
                        *next_symbol_mut =
                            i as i32 - (max_code_length as i32);
                        *unsafe {
                             s.symbols_lists_array.get_unchecked_mut((s.symbol_lists_index
                                                                          as
                                                                          i32
                                                                          +
                                                                          i as
                                                                              i32
                                                                          -
                                                                          (max_code_length
                                                                               as
                                                                               i32))
                                                                         as
                                                                         usize)
                         } = 0xFFFF;
                    }
                    s.symbol = 0;
                    s.prev_code_len = kDefaultCodeLength;
                    s.repeat = 0;
                    s.repeat_code_len = 0;
                    s.space = 32768;
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS;
                }
                BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS
                => {
                    let table_size: u32;
                    let mut result =
                        ReadSymbolCodeLengths(max_symbol, s, input);
                    if let BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                           = result {
                        result =
                            SafeReadSymbolCodeLengths(max_symbol, s, input)
                    }
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    if (s.space != 0) {
                        ;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE;
                    }
                    table_size =
                        huffman::BrotliBuildHuffmanTable(unsafe {
                                                             (&mut table[offset..])
                                                         },
                                                         HUFFMAN_TABLE_BITS as
                                                             i32,
                                                         &s.symbols_lists_array[..],
                                                         s.symbol_lists_index,
                                                         &mut s.code_length_histo);
                    if let Some(opt_table_size_ref) = opt_table_size {
                        *opt_table_size_ref = table_size
                    }
                    s.substate_huffman =
                        BrotliRunningHuffmanState::BROTLI_STATE_HUFFMAN_NONE;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                }
            }
        }
    }
    fn ReadBlockLength(table: &[HuffmanCode],
                       br: &mut bit_reader::BrotliBitReader, input: &[u8])
     -> u32 {
        let code: u32;
        let nbits: u32;
        code = ReadSymbol(table, br, input);
        nbits =
            unsafe {
                prefix::kBlockLengthPrefixCode.get_unchecked(code as usize)
            }.nbits as u32;
        unsafe {
            prefix::kBlockLengthPrefixCode.get_unchecked(code as usize)
        }.offset as u32 + bit_reader::BrotliReadBits(br, nbits, input)
    }
    fn SafeReadBlockLengthIndex(substate_read_block_length:
                                    &state::BrotliRunningReadBlockLengthState,
                                block_length_index: u32,
                                table: &[HuffmanCode],
                                mut br: &mut bit_reader::BrotliBitReader,
                                input: &[u8]) -> (bool, u32) {
        match *substate_read_block_length {
            state::BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE
            => {
                let mut index: u32 = 0;
                if (!SafeReadSymbol(table, &mut br, &mut index, input)) {
                    return (false, 0);
                }
                (true, index)
            }
            _ => (true, block_length_index),
        }
    }
    fn SafeReadBlockLengthFromIndex<AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                &mut BlockTypeAndLengthState<AllocHC>,
                                                                            br:
                                                                                &mut bit_reader::BrotliBitReader,
                                                                            result:
                                                                                &mut u32,
                                                                            res_index:
                                                                                (bool,
                                                                                 u32),
                                                                            input:
                                                                                &[u8])
     -> bool {
        let (res, index) = res_index;
        if !res { return false; }
        let mut bits: u32 = 0;
        let nbits =
            unsafe {
                prefix::kBlockLengthPrefixCode.get_unchecked(index as usize)
            }.nbits;
        if (!bit_reader::BrotliSafeReadBits(br, nbits as u32, &mut bits,
                                            input)) {
            s.block_length_index = index;
            s.substate_read_block_length =
                state::BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_SUFFIX;
            return false;
        }
        *result =
            unsafe {
                prefix::kBlockLengthPrefixCode.get_unchecked(index as usize)
            }.offset as u32 + bits;
        s.substate_read_block_length =
            state::BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE;
        true
    }
    macro_rules! SafeReadBlockLength(($ state : expr, $ result : expr, $ table
                                      : expr) =>
                                     {
                                         SafeReadBlockLengthFromIndex(& mut $
                                                                      state, &
                                                                      mut $
                                                                      result,
                                                                      SafeReadBlockLengthIndex($
                                                                                               state
                                                                                               .
                                                                                               substate_read_block_length,
                                                                                               $
                                                                                               state
                                                                                               .
                                                                                               block_length_index,
                                                                                               $
                                                                                               table,
                                                                                               &
                                                                                               mut
                                                                                               $
                                                                                               state
                                                                                               .
                                                                                               br))
                                     } ;);
    fn InverseMoveToFrontTransform(v: &mut [u8], v_len: u32,
                                   mtf: &mut [u8; 256],
                                   mtf_upper_bound: &mut u32) {
        let mut upper_bound: u32 = *mtf_upper_bound;
        for (i, item) in
            unsafe {
                (&mut mtf[0..(upper_bound as usize + 1usize)])
            }.iter_mut().enumerate() {
            *item = i as u8;
        }
        upper_bound = 0;
        for v_i in
            unsafe {
                (&mut v[0usize..(v_len as usize)])
            }.iter_mut() {
            let mut index = (*v_i) as i32;
            let value = unsafe { *mtf.get_unchecked(index as usize) };
            upper_bound |= (*v_i) as u32;
            *v_i = value;
            if index <= 0 {
                *unsafe { mtf.get_unchecked_mut(0) } = 0;
            } else {
                loop  {
                    index -= 1;
                    *unsafe { mtf.get_unchecked_mut((index + 1) as usize) } =
                        unsafe { *mtf.get_unchecked(index as usize) };
                    if index <= 0 { break ; }
                }
            }
            *unsafe { mtf.get_unchecked_mut(0) } = value;
        }
        *mtf_upper_bound = upper_bound;
    }
    fn HuffmanTreeGroupDecode<AllocU8: alloc::Allocator<u8>,
                              AllocU32: alloc::Allocator<u32>,
                              AllocHC: alloc::Allocator<HuffmanCode>>(group_index:
                                                                          i32,
                                                                      mut s:
                                                                          &mut BrotliState<AllocU8,
                                                                                           AllocU32,
                                                                                           AllocHC>,
                                                                      input:
                                                                          &[u8])
     -> BrotliDecoderErrorCode {
        let mut hcodes: AllocHC::AllocatedMemory;
        let mut htrees: AllocU32::AllocatedMemory;
        let alphabet_size: u16;
        let group_num_htrees: u16;
        let group_max_symbol;
        if group_index == 0 {
            hcodes =
                mem::replace(&mut s.literal_hgroup.codes,
                             AllocHC::AllocatedMemory::default());
            htrees =
                mem::replace(&mut s.literal_hgroup.htrees,
                             AllocU32::AllocatedMemory::default());
            group_num_htrees = s.literal_hgroup.num_htrees;
            alphabet_size = s.literal_hgroup.alphabet_size;
            group_max_symbol = s.literal_hgroup.max_symbol;
        } else if group_index == 1 {
            hcodes =
                mem::replace(&mut s.insert_copy_hgroup.codes,
                             AllocHC::AllocatedMemory::default());
            htrees =
                mem::replace(&mut s.insert_copy_hgroup.htrees,
                             AllocU32::AllocatedMemory::default());
            group_num_htrees = s.insert_copy_hgroup.num_htrees;
            alphabet_size = s.insert_copy_hgroup.alphabet_size;
            group_max_symbol = s.insert_copy_hgroup.max_symbol;
        } else {
            if group_index != 2 {
                let ret =
                    BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE;
                match assign_error_code(&mut s.error_code, ret) {
                    BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                    BrotliResult::ResultSuccess,
                    BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT =>
                    BrotliResult::NeedsMoreInput,
                    BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                    => BrotliResult::NeedsMoreOutput,
                    _ => BrotliResult::ResultFailure,
                };
                return ret;
            }
            hcodes =
                mem::replace(&mut s.distance_hgroup.codes,
                             AllocHC::AllocatedMemory::default());
            htrees =
                mem::replace(&mut s.distance_hgroup.htrees,
                             AllocU32::AllocatedMemory::default());
            group_num_htrees = s.distance_hgroup.num_htrees;
            alphabet_size = s.distance_hgroup.alphabet_size;
            group_max_symbol = s.distance_hgroup.max_symbol;
        }
        match s.substate_tree_group {
            BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_NONE => {
                s.htree_next_offset = 0;
                s.htree_index = 0;
                s.substate_tree_group =
                    BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_LOOP;
            }
            BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_LOOP => { }
        }
        let mut result = BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        for htree_iter in
            unsafe {
                (&mut htrees.slice_mut()[s.htree_index as
                                                             usize..(group_num_htrees
                                                                         as
                                                                         usize)])
            }.iter_mut() {
            let mut table_size: u32 = 0;
            result =
                ReadHuffmanCode(u32::from(alphabet_size),
                                u32::from(group_max_symbol),
                                hcodes.slice_mut(),
                                s.htree_next_offset as usize,
                                Some(&mut table_size), &mut s, input);
            match result {
                BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                _ => break ,
            }
            *htree_iter = s.htree_next_offset;
            s.htree_next_offset += table_size;
            s.htree_index += 1;
        }
        if group_index == 0 {
            mem::replace(&mut s.literal_hgroup.codes,
                         mem::replace(&mut hcodes,
                                      AllocHC::AllocatedMemory::default()));
            mem::replace(&mut s.literal_hgroup.htrees,
                         mem::replace(&mut htrees,
                                      AllocU32::AllocatedMemory::default()));
        } else if group_index == 1 {
            mem::replace(&mut s.insert_copy_hgroup.codes,
                         mem::replace(&mut hcodes,
                                      AllocHC::AllocatedMemory::default()));
            mem::replace(&mut s.insert_copy_hgroup.htrees,
                         mem::replace(&mut htrees,
                                      AllocU32::AllocatedMemory::default()));
        } else {
            mem::replace(&mut s.distance_hgroup.codes,
                         mem::replace(&mut hcodes,
                                      AllocHC::AllocatedMemory::default()));
            mem::replace(&mut s.distance_hgroup.htrees,
                         mem::replace(&mut htrees,
                                      AllocU32::AllocatedMemory::default()));
        }
        if let BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS = result {
            s.substate_tree_group =
                BrotliRunningTreeGroupState::BROTLI_STATE_TREE_GROUP_NONE
        }
        result
    }
    #[allow(dead_code)]
    pub fn lg_window_size(first_byte: u8, second_byte: u8)
     -> Result<(u8, u8), ()> {
        if first_byte & 1 == 0 { return Ok((16, 1)); }
        match first_byte & 15 {
            0x3 => return Ok((18, 4)),
            0x5 => return Ok((19, 4)),
            0x7 => return Ok((20, 4)),
            0x9 => return Ok((21, 4)),
            0xb => return Ok((22, 4)),
            0xd => return Ok((23, 4)),
            0xf => return Ok((24, 4)),
            _ =>
            match first_byte & 127 {
                0x71 => return Ok((15, 7)),
                0x61 => return Ok((14, 7)),
                0x51 => return Ok((13, 7)),
                0x41 => return Ok((12, 7)),
                0x31 => return Ok((11, 7)),
                0x21 => return Ok((10, 7)),
                0x1 => return Ok((17, 7)),
                _ => { }
            },
        }
        if (first_byte & 0x80) != 0 { return Err(()); }
        let ret = second_byte & 0x3f;
        if ret < 10 || ret > 30 { return Err(()); }
        Ok((ret, 14))
    }
    fn bzero(data: &mut [u8]) { for iter in data.iter_mut() { *iter = 0; } }
    fn DecodeContextMapInner<AllocU8: alloc::Allocator<u8>,
                             AllocU32: alloc::Allocator<u32>,
                             AllocHC: alloc::Allocator<HuffmanCode>>(context_map_size:
                                                                         u32,
                                                                     num_htrees:
                                                                         &mut u32,
                                                                     context_map_arg:
                                                                         &mut AllocU8::AllocatedMemory,
                                                                     mut s:
                                                                         &mut BrotliState<AllocU8,
                                                                                          AllocU32,
                                                                                          AllocHC>,
                                                                     input:
                                                                         &[u8])
     -> BrotliDecoderErrorCode {
        let mut result;
        loop  {
            match s.substate_context_map {
                BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_NONE =>
                {
                    result =
                        DecodeVarLenUint8(&mut s.substate_decode_uint8,
                                          &mut s.br, num_htrees, input);
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    (*num_htrees) += 1;
                    s.context_index = 0;
                    ;
                    ;
                    *context_map_arg =
                        s.alloc_u8.alloc_cell(context_map_size as usize);
                    if (context_map_arg.slice().len() <
                            context_map_size as usize) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP;
                    }
                    if (*num_htrees <= 1) {
                        bzero(context_map_arg.slice_mut());
                        return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                    }
                    s.substate_context_map =
                        BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_READ_PREFIX;
                }
                BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_READ_PREFIX
                => {
                    let mut bits: u32 = 0;
                    if (!bit_reader::BrotliSafeGetBits(&mut s.br, 5,
                                                       &mut bits, input)) {
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if ((bits & 1) != 0) {
                        s.max_run_length_prefix = (bits >> 1) + 1;
                        bit_reader::BrotliDropBits(&mut s.br, 5);
                    } else {
                        s.max_run_length_prefix = 0;
                        bit_reader::BrotliDropBits(&mut s.br, 1);
                    }
                    ;
                    s.substate_context_map =
                        BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_HUFFMAN;
                }
                BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_HUFFMAN
                => {
                    let mut local_context_map_table =
                        mem::replace(&mut s.context_map_table,
                                     AllocHC::AllocatedMemory::default());
                    let alphabet_size = *num_htrees + s.max_run_length_prefix;
                    result =
                        ReadHuffmanCode(alphabet_size, alphabet_size,
                                        &mut local_context_map_table.slice_mut(),
                                        0, None, &mut s, input);
                    mem::replace(&mut s.context_map_table,
                                 mem::replace(&mut local_context_map_table,
                                              AllocHC::AllocatedMemory::default()));
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    s.code = 0xFFFF;
                    s.substate_context_map =
                        BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_DECODE;
                }
                BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_DECODE
                => {
                    let mut context_index: u32 = s.context_index;
                    let max_run_length_prefix: u32 = s.max_run_length_prefix;
                    let context_map = &mut context_map_arg.slice_mut();
                    let mut code: u32 = s.code;
                    let mut rleCodeGoto = (code != 0xFFFF);
                    while (rleCodeGoto || context_index < context_map_size) {
                        if !rleCodeGoto {
                            if (!SafeReadSymbol(s.context_map_table.slice(),
                                                &mut s.br, &mut code, input))
                               {
                                s.code = 0xFFFF;
                                s.context_index = context_index;
                                return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            }
                            ;
                            if code == 0 {
                                *unsafe {
                                     context_map.get_unchecked_mut(context_index
                                                                       as
                                                                       usize)
                                 } = 0;
                                ;
                                context_index += 1;
                                continue ;
                            }
                            if code > max_run_length_prefix {
                                *unsafe {
                                     context_map.get_unchecked_mut(context_index
                                                                       as
                                                                       usize)
                                 } = (code - max_run_length_prefix) as u8;
                                ;
                                context_index += 1;
                                continue ;
                            }
                        }
                        rleCodeGoto = false;
                        {
                            let mut reps: u32 = 0;
                            if (!bit_reader::BrotliSafeReadBits(&mut s.br,
                                                                code,
                                                                &mut reps,
                                                                input)) {
                                s.code = code;
                                s.context_index = context_index;
                                return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            }
                            reps += 1u32 << code;
                            ;
                            if (context_index + reps > context_map_size) {
                                return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT;
                            }
                            loop  {
                                *unsafe {
                                     context_map.get_unchecked_mut(context_index
                                                                       as
                                                                       usize)
                                 } = 0;
                                ;
                                context_index += 1;
                                reps -= 1;
                                if reps == 0 { break ; }
                            }
                        }
                    }
                    s.substate_context_map =
                        BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_TRANSFORM;
                }
                BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_TRANSFORM
                => {
                    let mut bits: u32 = 0;
                    if (!bit_reader::BrotliSafeReadBits(&mut s.br, 1,
                                                        &mut bits, input)) {
                        s.substate_context_map =
                            BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_TRANSFORM;
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    if (bits != 0) {
                        if let Ok(ref mut mtf) = s.mtf_or_error_string {
                            InverseMoveToFrontTransform(context_map_arg.slice_mut(),
                                                        context_map_size, mtf,
                                                        &mut s.mtf_upper_bound);
                        } else {
                            return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE;
                        }
                    }
                    s.substate_context_map =
                        BrotliRunningContextMapState::BROTLI_STATE_CONTEXT_MAP_NONE;
                    return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                }
            }
        }
    }
    fn DecodeContextMap<AllocU8: alloc::Allocator<u8>,
                        AllocU32: alloc::Allocator<u32>,
                        AllocHC: alloc::Allocator<HuffmanCode>>(context_map_size:
                                                                    usize,
                                                                is_dist_context_map:
                                                                    bool,
                                                                mut s:
                                                                    &mut BrotliState<AllocU8,
                                                                                     AllocU32,
                                                                                     AllocHC>,
                                                                input: &[u8])
     -> BrotliDecoderErrorCode {
        match s.state {
            BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_1 => {
                match (&is_dist_context_map, &false) {
                    (left_val, right_val) => {
                        if !(*left_val == *right_val) {
                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                          "`,\n right: `",
                                                                                          "`"],
                                                                                        &match (&&*left_val,
                                                                                                &&*right_val)
                                                                                             {
                                                                                             (arg0,
                                                                                              arg1)
                                                                                             =>
                                                                                             [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                           ::core::fmt::Debug::fmt),
                                                                                              ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                           ::core::fmt::Debug::fmt)],
                                                                                         }))
                        }
                    }
                }
            }
            BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_2 => {
                match (&is_dist_context_map, &true) {
                    (left_val, right_val) => {
                        if !(*left_val == *right_val) {
                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                          "`,\n right: `",
                                                                                          "`"],
                                                                                        &match (&&*left_val,
                                                                                                &&*right_val)
                                                                                             {
                                                                                             (arg0,
                                                                                              arg1)
                                                                                             =>
                                                                                             [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                           ::core::fmt::Debug::fmt),
                                                                                              ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                           ::core::fmt::Debug::fmt)],
                                                                                         }))
                        }
                    }
                }
            }
            _ => {
                ::core::panicking::panic("internal error: entered unreachable code")
            }
        }
        let (mut num_htrees, mut context_map_arg) =
            if is_dist_context_map {
                (s.num_dist_htrees,
                 mem::replace(&mut s.dist_context_map,
                              AllocU8::AllocatedMemory::default()))
            } else {
                (s.num_literal_htrees,
                 mem::replace(&mut s.context_map,
                              AllocU8::AllocatedMemory::default()))
            };
        let retval =
            DecodeContextMapInner(context_map_size as u32, &mut num_htrees,
                                  &mut context_map_arg, &mut s, input);
        if is_dist_context_map {
            s.num_dist_htrees = num_htrees;
            mem::replace(&mut s.dist_context_map,
                         mem::replace(&mut context_map_arg,
                                      AllocU8::AllocatedMemory::default()));
        } else {
            s.num_literal_htrees = num_htrees;
            mem::replace(&mut s.context_map,
                         mem::replace(&mut context_map_arg,
                                      AllocU8::AllocatedMemory::default()));
        }
        retval
    }
    fn DecodeBlockTypeAndLength<AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                            bool,
                                                                        s:
                                                                            &mut BlockTypeAndLengthState<AllocHC>,
                                                                        br:
                                                                            &mut bit_reader::BrotliBitReader,
                                                                        tree_type:
                                                                            i32,
                                                                        input:
                                                                            &[u8])
     -> bool {
        let max_block_type =
            unsafe { *s.num_block_types.get_unchecked(tree_type as usize) };
        let tree_offset =
            tree_type as usize *
                huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE as usize;
        let mut block_type: u32 = 0;
        if max_block_type <= 1 { return false; }
        if (!safe) {
            block_type =
                ReadSymbol(unsafe {
                               (&s.block_type_trees.slice()[tree_offset..])
                           }, br, input);
            *unsafe { s.block_length.get_unchecked_mut(tree_type as usize) } =
                ReadBlockLength(unsafe {
                                    (&s.block_len_trees.slice()[tree_offset..])
                                }, br, input);
        } else {
            let memento = bit_reader::BrotliBitReaderSaveState(br);
            if (!SafeReadSymbol(unsafe {
                                    (&s.block_type_trees.slice()[tree_offset..])
                                }, br, &mut block_type, input)) {
                return false;
            }
            let mut block_length_out: u32 = 0;
            let index_ret =
                SafeReadBlockLengthIndex(&s.substate_read_block_length,
                                         s.block_length_index,
                                         unsafe {
                                             (&s.block_len_trees.slice()[tree_offset..])
                                         }, br, input);
            if !SafeReadBlockLengthFromIndex(s, br, &mut block_length_out,
                                             index_ret, input) {
                s.substate_read_block_length =
                    BrotliRunningReadBlockLengthState::BROTLI_STATE_READ_BLOCK_LENGTH_NONE;
                bit_reader::BrotliBitReaderRestoreState(br, &memento);
                return false;
            }
            *unsafe { s.block_length.get_unchecked_mut(tree_type as usize) } =
                block_length_out;
        }
        let ringbuffer: &mut [u32] =
            &mut unsafe {
                     (&mut s.block_type_rb[tree_type as usize
                                                               * 2..])
                 };
        if (block_type == 1) {
            block_type = unsafe { *ringbuffer.get_unchecked(1) } + 1;
        } else if (block_type == 0) {
            block_type = unsafe { *ringbuffer.get_unchecked(0) };
        } else { block_type -= 2; }
        if (block_type >= max_block_type) { block_type -= max_block_type; }
        *unsafe { ringbuffer.get_unchecked_mut(0) } =
            unsafe { *ringbuffer.get_unchecked(1) };
        *unsafe { ringbuffer.get_unchecked_mut(1) } = block_type;
        true
    }
    fn DetectTrivialLiteralBlockTypes<AllocU8: alloc::Allocator<u8>,
                                      AllocU32: alloc::Allocator<u32>,
                                      AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                  &mut BrotliState<AllocU8,
                                                                                                   AllocU32,
                                                                                                   AllocHC>) {
        for iter in s.trivial_literal_contexts.iter_mut() { *iter = 0; }
        let mut i: usize = 0;
        while i <
                  unsafe {
                      *s.block_type_length_state.num_block_types.get_unchecked(0)
                  } as usize {
            let offset = (i as usize) << kLiteralContextBits;
            let mut error = 0usize;
            let sample: usize =
                unsafe { *s.context_map.slice().get_unchecked(offset) } as
                    usize;
            let mut j = 0usize;
            while j < ((1 as usize) << kLiteralContextBits) {
                error |=
                    unsafe {
                        *s.context_map.slice().get_unchecked(offset + j)
                    } as usize ^ sample;
                j += 1;
                error |=
                    unsafe {
                        *s.context_map.slice().get_unchecked(offset + j)
                    } as usize ^ sample;
                j += 1;
                error |=
                    unsafe {
                        *s.context_map.slice().get_unchecked(offset + j)
                    } as usize ^ sample;
                j += 1;
                error |=
                    unsafe {
                        *s.context_map.slice().get_unchecked(offset + j)
                    } as usize ^ sample;
                j += 1
            }
            if error == 0 {
                s.trivial_literal_contexts[i >> 5] |=
                    ((1 as u32) << (i & 31));
            }
            i += 1
        }
    }
    fn PrepareLiteralDecoding<AllocU8: alloc::Allocator<u8>,
                              AllocU32: alloc::Allocator<u32>,
                              AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                          &mut BrotliState<AllocU8,
                                                                                           AllocU32,
                                                                                           AllocHC>) {
        let context_offset: u32;
        let block_type =
            unsafe {
                *s.block_type_length_state.block_type_rb.get_unchecked(1)
            } as usize;
        context_offset = (block_type << kLiteralContextBits) as u32;
        s.context_map_slice_index = context_offset as usize;
        let trivial =
            unsafe {
                *s.trivial_literal_contexts.get_unchecked(block_type >> 5)
            };
        s.trivial_literal_context =
            ((trivial >> (block_type & 31)) & 1) as i32;
        s.literal_htree_index =
            unsafe {
                *s.context_map.slice().get_unchecked(s.context_map_slice_index)
            };
        let context_mode_index =
            unsafe { *s.context_modes.slice().get_unchecked(block_type) } & 3;
        s.context_lookup = &kContextLookup[context_mode_index as usize];
    }
    fn DecodeLiteralBlockSwitchInternal<AllocU8: alloc::Allocator<u8>,
                                        AllocU32: alloc::Allocator<u32>,
                                        AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                                    bool,
                                                                                s:
                                                                                    &mut BrotliState<AllocU8,
                                                                                                     AllocU32,
                                                                                                     AllocHC>,
                                                                                input:
                                                                                    &[u8])
     -> bool {
        if !DecodeBlockTypeAndLength(safe, &mut s.block_type_length_state,
                                     &mut s.br, 0, input) {
            return false;
        }
        PrepareLiteralDecoding(s);
        true
    }
    fn DecodeCommandBlockSwitchInternal<AllocU8: alloc::Allocator<u8>,
                                        AllocU32: alloc::Allocator<u32>,
                                        AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                                    bool,
                                                                                s:
                                                                                    &mut BrotliState<AllocU8,
                                                                                                     AllocU32,
                                                                                                     AllocHC>,
                                                                                input:
                                                                                    &[u8])
     -> bool {
        if (!DecodeBlockTypeAndLength(safe, &mut s.block_type_length_state,
                                      &mut s.br, 1, input)) {
            return false;
        }
        s.htree_command_index =
            unsafe {
                *s.block_type_length_state.block_type_rb.get_unchecked(3)
            } as u16;
        true
    }
    #[allow(dead_code)]
    fn DecodeCommandBlockSwitch<AllocU8: alloc::Allocator<u8>,
                                AllocU32: alloc::Allocator<u32>,
                                AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                            &mut BrotliState<AllocU8,
                                                                                             AllocU32,
                                                                                             AllocHC>,
                                                                        input:
                                                                            &[u8]) {
        DecodeCommandBlockSwitchInternal(false, s, input);
    }
    #[allow(dead_code)]
    fn SafeDecodeCommandBlockSwitch<AllocU8: alloc::Allocator<u8>,
                                    AllocU32: alloc::Allocator<u32>,
                                    AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                &mut BrotliState<AllocU8,
                                                                                                 AllocU32,
                                                                                                 AllocHC>,
                                                                            input:
                                                                                &[u8])
     -> bool {
        DecodeCommandBlockSwitchInternal(true, s, input)
    }
    fn DecodeDistanceBlockSwitchInternal<AllocU8: alloc::Allocator<u8>,
                                         AllocU32: alloc::Allocator<u32>,
                                         AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                                     bool,
                                                                                 s:
                                                                                     &mut BrotliState<AllocU8,
                                                                                                      AllocU32,
                                                                                                      AllocHC>,
                                                                                 input:
                                                                                     &[u8])
     -> bool {
        if (!DecodeBlockTypeAndLength(safe, &mut s.block_type_length_state,
                                      &mut s.br, 2, input)) {
            return false;
        }
        s.dist_context_map_slice_index =
            (unsafe {
                 *s.block_type_length_state.block_type_rb.get_unchecked(5)
             } << kDistanceContextBits) as usize;
        s.dist_htree_index =
            unsafe {
                *s.dist_context_map.slice().get_unchecked(s.dist_context_map_slice_index
                                                              +
                                                              s.distance_context
                                                                  as usize)
            };
        true
    }
    #[allow(dead_code)]
    fn DecodeDistanceBlockSwitch<AllocU8: alloc::Allocator<u8>,
                                 AllocU32: alloc::Allocator<u32>,
                                 AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                             &mut BrotliState<AllocU8,
                                                                                              AllocU32,
                                                                                              AllocHC>,
                                                                         input:
                                                                             &[u8]) {
        DecodeDistanceBlockSwitchInternal(false, s, input);
    }
    #[allow(dead_code)]
    fn SafeDecodeDistanceBlockSwitch<AllocU8: alloc::Allocator<u8>,
                                     AllocU32: alloc::Allocator<u32>,
                                     AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                 &mut BrotliState<AllocU8,
                                                                                                  AllocU32,
                                                                                                  AllocHC>,
                                                                             input:
                                                                                 &[u8])
     -> bool {
        DecodeDistanceBlockSwitchInternal(true, s, input)
    }
    fn UnwrittenBytes<AllocU8: alloc::Allocator<u8>,
                      AllocU32: alloc::Allocator<u32>,
                      AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                  &BrotliState<AllocU8,
                                                                               AllocU32,
                                                                               AllocHC>,
                                                              wrap: bool)
     -> usize {
        let pos =
            if wrap && s.pos > s.ringbuffer_size {
                s.ringbuffer_size as usize
            } else { s.pos as usize };
        let partial_pos_rb =
            (s.rb_roundtrips as usize * s.ringbuffer_size as usize) +
                pos as usize;
        (partial_pos_rb - s.partial_pos_out) as usize
    }
    fn WriteRingBuffer<'a, AllocU8: alloc::Allocator<u8>,
                       AllocU32: alloc::Allocator<u32>,
                       AllocHC: alloc::Allocator<HuffmanCode>>(available_out:
                                                                   &mut usize,
                                                               opt_output:
                                                                   Option<&mut [u8]>,
                                                               output_offset:
                                                                   &mut usize,
                                                               total_out:
                                                                   &mut usize,
                                                               force: bool,
                                                               s:
                                                                   &'a mut BrotliState<AllocU8,
                                                                                       AllocU32,
                                                                                       AllocHC>)
     -> (BrotliDecoderErrorCode, &'a [u8]) {
        let to_write = UnwrittenBytes(s, true);
        let mut num_written = *available_out as usize;
        if (num_written > to_write) { num_written = to_write; }
        if (s.meta_block_remaining_len < 0) {
            return (BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1,
                    &[]);
        }
        let start_index =
            (s.partial_pos_out & s.ringbuffer_mask as usize) as usize;
        let start =
            unsafe {
                (&s.ringbuffer.slice()[start_index..start_index
                                                                        +
                                                                        num_written
                                                                            as
                                                                            usize])
            };
        if let Some(output) = opt_output {
            unsafe {
                (&mut output[*output_offset..*output_offset +
                                                                 num_written
                                                                     as usize])
            }.clone_from_slice(start);
        }
        *output_offset += num_written;
        *available_out -= num_written;
        ;
        ;
        s.partial_pos_out += num_written as usize;
        *total_out = s.partial_pos_out;
        if (num_written < to_write) {
            if s.ringbuffer_size == (1 << s.window_bits) || force {
                return (BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT,
                        &[]);
            } else {
                return (BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS,
                        start);
            }
        }
        if (s.ringbuffer_size == (1 << s.window_bits) &&
                s.pos >= s.ringbuffer_size) {
            s.pos -= s.ringbuffer_size;
            s.rb_roundtrips += 1;
            s.should_wrap_ringbuffer = s.pos != 0;
        }
        (BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS, start)
    }
    fn WrapRingBuffer<AllocU8: alloc::Allocator<u8>,
                      AllocU32: alloc::Allocator<u32>,
                      AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                  &mut BrotliState<AllocU8,
                                                                                   AllocU32,
                                                                                   AllocHC>) {
        if s.should_wrap_ringbuffer {
            let (ring_buffer_start, ring_buffer_end) =
                s.ringbuffer.slice_mut().split_at_mut(s.ringbuffer_size as
                                                          usize);
            let pos = s.pos as usize;
            ring_buffer_start.split_at_mut(pos).0.clone_from_slice(ring_buffer_end.split_at(pos).0);
            s.should_wrap_ringbuffer = false;
        }
    }
    fn CopyUncompressedBlockToOutput<AllocU8: alloc::Allocator<u8>,
                                     AllocU32: alloc::Allocator<u32>,
                                     AllocHC: alloc::Allocator<HuffmanCode>>(mut available_out:
                                                                                 &mut usize,
                                                                             mut output:
                                                                                 &mut [u8],
                                                                             mut output_offset:
                                                                                 &mut usize,
                                                                             mut total_out:
                                                                                 &mut usize,
                                                                             mut s:
                                                                                 &mut BrotliState<AllocU8,
                                                                                                  AllocU32,
                                                                                                  AllocHC>,
                                                                             input:
                                                                                 &[u8])
     -> BrotliDecoderErrorCode {
        loop  {
            match s.substate_uncompressed {
                BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_NONE
                => {
                    let mut nbytes =
                        bit_reader::BrotliGetRemainingBytes(&s.br) as i32;
                    if (nbytes > s.meta_block_remaining_len) {
                        nbytes = s.meta_block_remaining_len;
                    }
                    if (s.pos + nbytes > s.ringbuffer_size) {
                        nbytes = s.ringbuffer_size - s.pos;
                    }
                    bit_reader::BrotliCopyBytes(unsafe {
                                                    (&mut s.ringbuffer.slice_mut()[s.pos
                                                                                                       as
                                                                                                       usize..])
                                                }, &mut s.br, nbytes as u32,
                                                input);
                    s.pos += nbytes;
                    s.meta_block_remaining_len -= nbytes;
                    if s.pos < (1 << s.window_bits) {
                        if (s.meta_block_remaining_len == 0) {
                            return BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                        }
                        return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                    }
                    s.substate_uncompressed =
                        BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_WRITE;
                }
                BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_WRITE
                => {
                    let (result, _) =
                        WriteRingBuffer(&mut available_out, Some(&mut output),
                                        &mut output_offset, &mut total_out,
                                        false, &mut s);
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                        _ => return result,
                    }
                    if s.ringbuffer_size == 1 << s.window_bits {
                        s.max_distance = s.max_backward_distance;
                    }
                    s.substate_uncompressed =
                        BrotliRunningUncompressedState::BROTLI_STATE_UNCOMPRESSED_NONE;
                }
            }
        }
    }
    fn BrotliAllocateRingBuffer<AllocU8: alloc::Allocator<u8>,
                                AllocU32: alloc::Allocator<u32>,
                                AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                            &mut BrotliState<AllocU8,
                                                                                             AllocU32,
                                                                                             AllocHC>,
                                                                        input:
                                                                            &[u8])
     -> bool {
        const kRingBufferWriteAheadSlack: i32 = 42;
        let mut is_last = s.is_last_metablock;
        s.ringbuffer_size = 1 << s.window_bits;
        if (s.is_uncompressed != 0) {
            let next_block_header =
                bit_reader::BrotliPeekByte(&mut s.br,
                                           s.meta_block_remaining_len as u32,
                                           input);
            if (next_block_header != -1) && ((next_block_header & 3) == 3) {
                is_last = 1;
            }
        }
        let max_dict_size = s.ringbuffer_size as usize - 16;
        {
            let custom_dict =
                if s.custom_dict_size as usize > max_dict_size {
                    let cd =
                        unsafe {
                            (&s.custom_dict.slice()[(s.custom_dict_size
                                                                         as
                                                                         usize
                                                                         -
                                                                         max_dict_size)..s.custom_dict_size
                                                                                             as
                                                                                             usize])
                        };
                    s.custom_dict_size = max_dict_size as i32;
                    cd
                } else {
                    unsafe {
                        (&s.custom_dict.slice()[0..s.custom_dict_size
                                                                       as
                                                                       usize])
                    }
                };
            if (is_last != 0) {
                while (s.ringbuffer_size >=
                           (s.custom_dict_size + s.meta_block_remaining_len) *
                               2 && s.ringbuffer_size > 32) {
                    s.ringbuffer_size >>= 1;
                }
            }
            if s.ringbuffer_size > (1 << s.window_bits) {
                s.ringbuffer_size = (1 << s.window_bits);
            }
            s.ringbuffer_mask = s.ringbuffer_size - 1;
            s.ringbuffer =
                s.alloc_u8.alloc_cell((s.ringbuffer_size as usize +
                                           kRingBufferWriteAheadSlack as usize
                                           +
                                           kBrotliMaxDictionaryWordLength as
                                               usize));
            if (s.ringbuffer.slice().len() == 0) { return false; }
            *unsafe {
                 s.ringbuffer.slice_mut().get_unchecked_mut(s.ringbuffer_size
                                                                as usize - 1)
             } = 0;
            *unsafe {
                 s.ringbuffer.slice_mut().get_unchecked_mut(s.ringbuffer_size
                                                                as usize - 2)
             } = 0;
            if custom_dict.len() != 0 {
                let offset =
                    ((-s.custom_dict_size) & s.ringbuffer_mask) as usize;
                unsafe {
                    (&mut s.ringbuffer.slice_mut()[offset..offset
                                                                               +
                                                                               s.custom_dict_size
                                                                                   as
                                                                                   usize])
                }.clone_from_slice(custom_dict);
            }
        }
        if s.custom_dict.slice().len() != 0 {
            s.alloc_u8.free_cell(core::mem::replace(&mut s.custom_dict,
                                                    AllocU8::AllocatedMemory::default()));
        }
        true
    }
    pub fn ReadContextModes<AllocU8: alloc::Allocator<u8>,
                            AllocU32: alloc::Allocator<u32>,
                            AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                        &mut BrotliState<AllocU8,
                                                                                         AllocU32,
                                                                                         AllocHC>,
                                                                    input:
                                                                        &[u8])
     -> BrotliDecoderErrorCode {
        let mut i: i32 = s.loop_counter;
        for context_mode_iter in
            unsafe {
                (&mut s.context_modes.slice_mut()[i as
                                                                      usize..(s.block_type_length_state.num_block_types[0]
                                                                                  as
                                                                                  usize)])
            }.iter_mut() {
            let mut bits: u32 = 0;
            if (!bit_reader::BrotliSafeReadBits(&mut s.br, 2, &mut bits,
                                                input)) {
                mark_unlikely();
                s.loop_counter = i;
                return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
            }
            *context_mode_iter = bits as u8;
            ;
            i += 1;
        }
        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
    }
    pub fn TakeDistanceFromRingBuffer<AllocU8: alloc::Allocator<u8>,
                                      AllocU32: alloc::Allocator<u32>,
                                      AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                  &mut BrotliState<AllocU8,
                                                                                                   AllocU32,
                                                                                                   AllocHC>) {
        if (s.distance_code == 0) {
            s.dist_rb_idx -= 1;
            s.distance_code =
                unsafe {
                    *s.dist_rb.get_unchecked((s.dist_rb_idx & 3) as usize)
                };
            s.distance_context = 1;
        } else {
            let distance_code = s.distance_code << 1;
            const kDistanceShortCodeIndexOffset: u32 = 0xaaafff1b;
            const kDistanceShortCodeValueOffset: u32 = 0xfa5fa500;
            let mut v =
                (s.dist_rb_idx as i32 +
                     (kDistanceShortCodeIndexOffset as i32 >>
                          distance_code as i32)) as i32 & 0x3;
            s.distance_code = unsafe { *s.dist_rb.get_unchecked(v as usize) };
            v = (kDistanceShortCodeValueOffset >> distance_code) as i32 & 0x3;
            if ((distance_code & 0x3) != 0) {
                s.distance_code += v;
            } else {
                s.distance_code -= v;
                if (s.distance_code <= 0) { s.distance_code = 0x7fffffff; }
            }
        }
    }
    pub fn SafeReadBits(br: &mut bit_reader::BrotliBitReader, n_bits: u32,
                        val: &mut u32, input: &[u8]) -> bool {
        if (n_bits != 0) {
            bit_reader::BrotliSafeReadBits(br, n_bits, val, input)
        } else { *val = 0; true }
    }
    pub fn ReadDistanceInternal<AllocU8: alloc::Allocator<u8>,
                                AllocU32: alloc::Allocator<u32>,
                                AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                            bool,
                                                                        s:
                                                                            &mut BrotliState<AllocU8,
                                                                                             AllocU32,
                                                                                             AllocHC>,
                                                                        input:
                                                                            &[u8],
                                                                        distance_hgroup:
                                                                            &[&[HuffmanCode]; 256])
     -> bool {
        let mut distval: i32;
        let mut memento = bit_reader::BrotliBitReaderState::default();
        if (!safe) {
            s.distance_code =
                ReadSymbol(unsafe {
                               *distance_hgroup.get_unchecked(s.dist_htree_index
                                                                  as usize)
                           }, &mut s.br, input) as i32;
        } else {
            let mut code: u32 = 0;
            memento = bit_reader::BrotliBitReaderSaveState(&s.br);
            if !SafeReadSymbol(unsafe {
                                   *distance_hgroup.get_unchecked(s.dist_htree_index
                                                                      as
                                                                      usize)
                               }, &mut s.br, &mut code, input) {
                return false;
            }
            s.distance_code = code as i32;
        }
        s.distance_context = 0;
        if ((s.distance_code as u64 & 0xfffffffffffffff0) == 0) {
            TakeDistanceFromRingBuffer(s);
            *unsafe {
                 s.block_type_length_state.block_length.get_unchecked_mut(2)
             } -= 1;
            return true;
        }
        distval = s.distance_code - s.num_direct_distance_codes as i32;
        if (distval >= 0) {
            let nbits: u32;
            let postfix: i32;
            let offset: i32;
            if (!safe && (s.distance_postfix_bits == 0)) {
                nbits = (distval as u32 >> 1) + 1;
                offset = ((2 + (distval & 1)) << nbits) - 4;
                s.distance_code =
                    s.num_direct_distance_codes as i32 + offset +
                        bit_reader::BrotliReadBits(&mut s.br, nbits, input) as
                            i32;
            } else {
                let mut bits: u32 = 0;
                postfix = distval & s.distance_postfix_mask;
                distval >>= s.distance_postfix_bits;
                nbits = (distval as u32 >> 1) + 1;
                if (safe) {
                    if (!SafeReadBits(&mut s.br, nbits, &mut bits, input)) {
                        s.distance_code = -1;
                        bit_reader::BrotliBitReaderRestoreState(&mut s.br,
                                                                &memento);
                        return false;
                    }
                } else {
                    bits =
                        bit_reader::BrotliReadBits(&mut s.br, nbits, input);
                }
                offset = ((2 + (distval & 1)) << nbits) - 4;
                s.distance_code =
                    s.num_direct_distance_codes as i32 +
                        ((offset + bits as i32) << s.distance_postfix_bits) +
                        postfix;
            }
        }
        s.distance_code =
            s.distance_code - NUM_DISTANCE_SHORT_CODES as i32 + 1;
        *unsafe {
             s.block_type_length_state.block_length.get_unchecked_mut(2)
         } -= 1;
        true
    }
    pub fn ReadCommandInternal<AllocU8: alloc::Allocator<u8>,
                               AllocU32: alloc::Allocator<u32>,
                               AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                           bool,
                                                                       s:
                                                                           &mut BrotliState<AllocU8,
                                                                                            AllocU32,
                                                                                            AllocHC>,
                                                                       insert_length:
                                                                           &mut i32,
                                                                       input:
                                                                           &[u8],
                                                                       insert_copy_hgroup:
                                                                           &[&[HuffmanCode]; 256])
     -> bool {
        let mut cmd_code: u32 = 0;
        let mut insert_len_extra: u32 = 0;
        let mut copy_length: u32 = 0;
        let v: prefix::CmdLutElement;
        let mut memento = bit_reader::BrotliBitReaderState::default();
        if (!safe) {
            cmd_code =
                ReadSymbol(unsafe {
                               *insert_copy_hgroup.get_unchecked(s.htree_command_index
                                                                     as usize)
                           }, &mut s.br, input);
        } else {
            memento = bit_reader::BrotliBitReaderSaveState(&s.br);
            if (!SafeReadSymbol(unsafe {
                                    *insert_copy_hgroup.get_unchecked(s.htree_command_index
                                                                          as
                                                                          usize)
                                }, &mut s.br, &mut cmd_code, input)) {
                return false;
            }
        }
        v = unsafe { *prefix::kCmdLut.get_unchecked(cmd_code as usize) };
        s.distance_code = v.distance_code as i32;
        s.distance_context = v.context as i32;
        s.dist_htree_index =
            unsafe {
                *s.dist_context_map.slice().get_unchecked(s.dist_context_map_slice_index
                                                              +
                                                              s.distance_context
                                                                  as usize)
            };
        *insert_length = v.insert_len_offset as i32;
        if (!safe) {
            if v.insert_len_extra_bits != 0 {
                mark_unlikely();
                insert_len_extra =
                    bit_reader::BrotliReadBits(&mut s.br,
                                               v.insert_len_extra_bits as u32,
                                               input);
            }
            copy_length =
                bit_reader::BrotliReadBits(&mut s.br,
                                           v.copy_len_extra_bits as u32,
                                           input);
        } else if (!SafeReadBits(&mut s.br, v.insert_len_extra_bits as u32,
                                 &mut insert_len_extra, input)) ||
                      (!SafeReadBits(&mut s.br, v.copy_len_extra_bits as u32,
                                     &mut copy_length, input)) {
            bit_reader::BrotliBitReaderRestoreState(&mut s.br, &memento);
            return false;
        }
        s.copy_length = copy_length as i32 + v.copy_len_offset as i32;
        *unsafe {
             s.block_type_length_state.block_length.get_unchecked_mut(1)
         } -= 1;
        *insert_length += insert_len_extra as i32;
        true
    }
    fn WarmupBitReader(safe: bool, br: &mut bit_reader::BrotliBitReader,
                       input: &[u8]) -> bool {
        safe || bit_reader::BrotliWarmupBitReader(br, input)
    }
    fn CheckInputAmount(safe: bool, br: &bit_reader::BrotliBitReader,
                        num: u32) -> bool {
        safe || bit_reader::BrotliCheckInputAmount(br, num)
    }
    #[inline(always)]
    fn memmove16(data: &mut [u8], u32off_dst: u32, u32off_src: u32) {
        let off_dst = u32off_dst as usize;
        let off_src = u32off_src as usize;
        let mut local_array: [u8; 16] = [0; 16];
        local_array.clone_from_slice(unsafe {
                                         (&data[off_src as
                                                                    usize..off_src
                                                                               as
                                                                               usize
                                                                               +
                                                                               16])
                                     });
        unsafe {
            (&mut data[off_dst as
                                           usize..off_dst as usize + 16])
        }.clone_from_slice(&local_array);
    }
    fn memcpy_within_slice(data: &mut [u8], off_dst: usize, off_src: usize,
                           size: usize) {
        if off_dst > off_src {
            let (src, dst) = data.split_at_mut(off_dst);
            let src_slice =
                unsafe { (&src[off_src..off_src + size]) };
            unsafe {
                (&mut dst[0..size])
            }.clone_from_slice(src_slice);
        } else {
            let (dst, src) = data.split_at_mut(off_src);
            let src_slice = unsafe { (&src[0..size]) };
            unsafe {
                (&mut dst[off_dst..off_dst + size])
            }.clone_from_slice(src_slice);
        }
    }
    pub fn BrotliDecoderHasMoreOutput<AllocU8: alloc::Allocator<u8>,
                                      AllocU32: alloc::Allocator<u32>,
                                      AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                  &BrotliState<AllocU8,
                                                                                               AllocU32,
                                                                                               AllocHC>)
     -> bool {
        if is_fatal(s.error_code) { return false; }
        s.ringbuffer.len() != 0 && UnwrittenBytes(s, false) != 0
    }
    pub fn BrotliDecoderTakeOutput<'a, AllocU8: alloc::Allocator<u8>,
                                   AllocU32: alloc::Allocator<u32>,
                                   AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                               &'a mut BrotliState<AllocU8,
                                                                                                   AllocU32,
                                                                                                   AllocHC>,
                                                                           size:
                                                                               &mut usize)
     -> &'a [u8] {
        let one: usize = 1;
        let mut available_out = if *size != 0 { *size } else { one << 24 };
        let requested_out = available_out;
        if (s.ringbuffer.len() == 0) || is_fatal(s.error_code) {
            *size = 0;
            return &[];
        }
        WrapRingBuffer(s);
        let mut ign = 0usize;
        let mut ign2 = 0usize;
        let (status, result) =
            WriteRingBuffer(&mut available_out, None, &mut ign, &mut ign2,
                            true, s);
        match status {
            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS |
            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT => {
                *size = requested_out - available_out;
            }
            _ => { if is_fatal(status) { } *size = 0; return &[]; }
        }
        return result;
    }
    pub fn BrotliDecoderIsUsed<AllocU8: alloc::Allocator<u8>,
                               AllocU32: alloc::Allocator<u32>,
                               AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                           &BrotliState<AllocU8,
                                                                                        AllocU32,
                                                                                        AllocHC>)
     -> bool {
        if let BrotliRunningState::BROTLI_STATE_UNINITED = s.state {
            false
        } else { bit_reader::BrotliGetAvailableBits(&s.br) != 0 }
    }
    pub fn BrotliDecoderIsFinished<AllocU8: alloc::Allocator<u8>,
                                   AllocU32: alloc::Allocator<u32>,
                                   AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                               &BrotliState<AllocU8,
                                                                                            AllocU32,
                                                                                            AllocHC>)
     -> bool {
        if let BrotliRunningState::BROTLI_STATE_DONE = s.state {
            !BrotliDecoderHasMoreOutput(s)
        } else { false }
    }
    pub fn BrotliDecoderGetErrorCode<AllocU8: alloc::Allocator<u8>,
                                     AllocU32: alloc::Allocator<u32>,
                                     AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                                 &BrotliState<AllocU8,
                                                                                              AllocU32,
                                                                                              AllocHC>)
     -> BrotliDecoderErrorCode {
        s.error_code
    }
    fn ProcessCommandsInternal<AllocU8: alloc::Allocator<u8>,
                               AllocU32: alloc::Allocator<u32>,
                               AllocHC: alloc::Allocator<HuffmanCode>>(safe:
                                                                           bool,
                                                                       s:
                                                                           &mut BrotliState<AllocU8,
                                                                                            AllocU32,
                                                                                            AllocHC>,
                                                                       input:
                                                                           &[u8])
     -> BrotliDecoderErrorCode {
        if (!CheckInputAmount(safe, &s.br, 28)) ||
               (!WarmupBitReader(safe, &mut s.br, input)) {
            mark_unlikely();
            return BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
        }
        let mut pos = s.pos;
        let mut i: i32 = s.loop_counter;
        let mut result = BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        let mut saved_literal_hgroup =
            core::mem::replace(&mut s.literal_hgroup,
                               HuffmanTreeGroup::<AllocU32,
                                                  AllocHC>::default());
        let mut saved_distance_hgroup =
            core::mem::replace(&mut s.distance_hgroup,
                               HuffmanTreeGroup::<AllocU32,
                                                  AllocHC>::default());
        let mut saved_insert_copy_hgroup =
            core::mem::replace(&mut s.insert_copy_hgroup,
                               HuffmanTreeGroup::<AllocU32,
                                                  AllocHC>::default());
        {
            let literal_hgroup = saved_literal_hgroup.build_hgroup_cache();
            let distance_hgroup = saved_distance_hgroup.build_hgroup_cache();
            let insert_copy_hgroup =
                saved_insert_copy_hgroup.build_hgroup_cache();
            loop  {
                match s.state {
                    BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN => {
                        if (!CheckInputAmount(safe, &s.br, 28)) {
                            mark_unlikely();
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        if (*unsafe {
                                 s.block_type_length_state.block_length.get_unchecked_mut(1)
                             } == 0) {
                            mark_unlikely();
                            if !DecodeCommandBlockSwitchInternal(safe, s,
                                                                 input) {
                                result =
                                    BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                break ;
                            }
                            s.state =
                                BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN;
                            continue ;
                        }
                        if (!ReadCommandInternal(safe, s, &mut i, input,
                                                 &insert_copy_hgroup)) && safe
                           {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        ;
                        if (i == 0) {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS;
                            continue ;
                        }
                        s.meta_block_remaining_len -= i;
                        s.state =
                            BrotliRunningState::BROTLI_STATE_COMMAND_INNER;
                    }
                    BrotliRunningState::BROTLI_STATE_COMMAND_INNER => {
                        if (s.trivial_literal_context != 0) {
                            let mut bits: u32 = 0;
                            let mut value: u32 = 0;
                            let mut literal_htree =
                                &unsafe {
                                     *literal_hgroup.get_unchecked(s.literal_htree_index
                                                                       as
                                                                       usize)
                                 };
                            PreloadSymbol(safe, literal_htree, &mut s.br,
                                          &mut bits, &mut value, input);
                            let mut inner_return: bool = false;
                            let mut inner_continue: bool = false;
                            loop  {
                                if (!CheckInputAmount(safe, &s.br, 28)) {
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                    inner_return = true;
                                    break ;
                                }
                                if (unsafe {
                                        *s.block_type_length_state.block_length.get_unchecked(0)
                                    } == 0) {
                                    mark_unlikely();
                                    if (!DecodeLiteralBlockSwitchInternal(safe,
                                                                          s,
                                                                          input))
                                           && safe {
                                        result =
                                            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                        inner_return = true;
                                        break ;
                                    }
                                    literal_htree =
                                        unsafe {
                                            literal_hgroup.get_unchecked(s.literal_htree_index
                                                                             as
                                                                             usize)
                                        };
                                    PreloadSymbol(safe, literal_htree,
                                                  &mut s.br, &mut bits,
                                                  &mut value, input);
                                    if (s.trivial_literal_context == 0) {
                                        s.state =
                                            BrotliRunningState::BROTLI_STATE_COMMAND_INNER;
                                        inner_continue = true;
                                        break ;
                                    }
                                }
                                if (!safe) {
                                    *unsafe {
                                         s.ringbuffer.slice_mut().get_unchecked_mut(pos
                                                                                        as
                                                                                        usize)
                                     } =
                                        ReadPreloadedSymbol(literal_htree,
                                                            &mut s.br,
                                                            &mut bits,
                                                            &mut value, input)
                                            as u8;
                                } else {
                                    let mut literal: u32 = 0;
                                    if (!SafeReadSymbol(literal_htree,
                                                        &mut s.br,
                                                        &mut literal, input))
                                       {
                                        result =
                                            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                        inner_return = true;
                                        break ;
                                    }
                                    *unsafe {
                                         s.ringbuffer.slice_mut().get_unchecked_mut(pos
                                                                                        as
                                                                                        usize)
                                     } = literal as u8;
                                }
                                *unsafe {
                                     s.block_type_length_state.block_length.get_unchecked_mut(0)
                                 } -= 1;
                                ;
                                ;
                                pos += 1;
                                if (pos == s.ringbuffer_size) {
                                    mark_unlikely();
                                    s.state =
                                        BrotliRunningState::BROTLI_STATE_COMMAND_INNER_WRITE;
                                    i -= 1;
                                    inner_return = true;
                                    break ;
                                }
                                i -= 1;
                                if i == 0 { break ; }
                            }
                            if inner_return { break ; }
                            if inner_continue { mark_unlikely(); continue ; }
                        } else {
                            let mut p1 =
                                unsafe {
                                    *s.ringbuffer.slice().get_unchecked(((pos
                                                                              -
                                                                              1)
                                                                             &
                                                                             s.ringbuffer_mask)
                                                                            as
                                                                            usize)
                                };
                            let mut p2 =
                                unsafe {
                                    *s.ringbuffer.slice().get_unchecked(((pos
                                                                              -
                                                                              2)
                                                                             &
                                                                             s.ringbuffer_mask)
                                                                            as
                                                                            usize)
                                };
                            let mut inner_return: bool = false;
                            let mut inner_continue: bool = false;
                            loop  {
                                if (!CheckInputAmount(safe, &s.br, 28)) {
                                    s.state =
                                        BrotliRunningState::BROTLI_STATE_COMMAND_INNER;
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                    inner_return = true;
                                    break ;
                                }
                                if (unsafe {
                                        *s.block_type_length_state.block_length.get_unchecked(0)
                                    } == 0) {
                                    mark_unlikely();
                                    if (!DecodeLiteralBlockSwitchInternal(safe,
                                                                          s,
                                                                          input))
                                           && safe {
                                        result =
                                            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                        inner_return = true;
                                        break ;
                                    }
                                    if s.trivial_literal_context != 0 {
                                        s.state =
                                            BrotliRunningState::BROTLI_STATE_COMMAND_INNER;
                                        inner_continue = true;
                                        break ;
                                    }
                                }
                                let context =
                                    s.context_lookup[p1 as usize] |
                                        s.context_lookup[p2 as usize | 256];
                                ;
                                ;
                                ;
                                let hc: &[HuffmanCode];
                                {
                                    let i =
                                        unsafe {
                                            *s.context_map.slice().get_unchecked(s.context_map_slice_index
                                                                                     +
                                                                                     context
                                                                                         as
                                                                                         usize)
                                        };
                                    hc =
                                        unsafe {
                                            *literal_hgroup.get_unchecked(i as
                                                                              usize)
                                        };
                                }
                                p2 = p1;
                                if (!safe) {
                                    p1 =
                                        ReadSymbol(hc, &mut s.br, input) as
                                            u8;
                                } else {
                                    let mut literal: u32 = 0;
                                    if (!SafeReadSymbol(hc, &mut s.br,
                                                        &mut literal, input))
                                       {
                                        result =
                                            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                        inner_return = true;
                                        break ;
                                    }
                                    p1 = literal as u8;
                                }
                                *unsafe {
                                     s.ringbuffer.slice_mut().get_unchecked_mut(pos
                                                                                    as
                                                                                    usize)
                                 } = p1;
                                *unsafe {
                                     s.block_type_length_state.block_length.get_unchecked_mut(0)
                                 } -= 1;
                                ;
                                ;
                                pos += 1;
                                if (pos == s.ringbuffer_size) {
                                    mark_unlikely();
                                    s.state =
                                        BrotliRunningState::BROTLI_STATE_COMMAND_INNER_WRITE;
                                    i -= 1;
                                    inner_return = true;
                                    break ;
                                }
                                i -= 1;
                                if i == 0 { break ; }
                            }
                            if inner_return { break ; }
                            if inner_continue { mark_unlikely(); continue ; }
                        }
                        if (s.meta_block_remaining_len <= 0) {
                            mark_unlikely();
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                            break ;
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS;
                    }
                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS
                    => {
                        if s.distance_code >= 0 {
                            let not_distance_code =
                                if s.distance_code != 0 { 0 } else { 1 };
                            s.distance_context = not_distance_code;
                            s.dist_rb_idx -= 1;
                            s.distance_code =
                                unsafe {
                                    *s.dist_rb.get_unchecked((s.dist_rb_idx &
                                                                  3) as usize)
                                };
                        } else {
                            if unsafe {
                                   *s.block_type_length_state.block_length.get_unchecked(2)
                               } == 0 {
                                mark_unlikely();
                                if (!DecodeDistanceBlockSwitchInternal(safe,
                                                                       s,
                                                                       input))
                                       && safe {
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                    break ;
                                }
                            }
                            if (!ReadDistanceInternal(safe, s, input,
                                                      &distance_hgroup)) &&
                                   safe {
                                result =
                                    BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                break ;
                            }
                        }
                        ;
                        if (s.max_distance != s.max_backward_distance) {
                            if (pos <
                                    s.max_backward_distance_minus_custom_dict_size)
                               {
                                s.max_distance = pos + s.custom_dict_size;
                            } else {
                                s.max_distance = s.max_backward_distance;
                            }
                        }
                        i = s.copy_length;
                        if (s.distance_code > s.max_distance) {
                            if s.distance_code >
                                   kBrotliMaxAllowedDistance as i32 {
                                return BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DISTANCE;
                            }
                            if (i >= kBrotliMinDictionaryWordLength as i32 &&
                                    i <=
                                        kBrotliMaxDictionaryWordLength as i32)
                               {
                                let mut offset =
                                    unsafe {
                                        *kBrotliDictionaryOffsetsByLength.get_unchecked(i
                                                                                            as
                                                                                            usize)
                                    } as i32;
                                let word_id =
                                    s.distance_code - s.max_distance - 1;
                                let shift =
                                    unsafe {
                                        *kBrotliDictionarySizeBitsByLength.get_unchecked(i
                                                                                             as
                                                                                             usize)
                                    };
                                let mask =
                                    bit_reader::BitMask(shift as u32) as i32;
                                let word_idx = word_id & mask;
                                let transform_idx = word_id >> shift;
                                s.dist_rb_idx += s.distance_context;
                                offset += word_idx * i;
                                if (transform_idx < kNumTransforms) {
                                    let mut len = i;
                                    let word =
                                        unsafe {
                                            (&kBrotliDictionary[offset
                                                                                    as
                                                                                    usize..(offset
                                                                                                +
                                                                                                len)
                                                                                               as
                                                                                               usize])
                                        };
                                    if (transform_idx == 0) {
                                        unsafe {
                                            (&mut s.ringbuffer.slice_mut()[pos
                                                                                               as
                                                                                               usize..((pos
                                                                                                            +
                                                                                                            len)
                                                                                                           as
                                                                                                           usize)])
                                        }.clone_from_slice(word);
                                    } else {
                                        len =
                                            TransformDictionaryWord(unsafe {
                                                                        (&mut s.ringbuffer.slice_mut()[pos
                                                                                                                           as
                                                                                                                           usize..])
                                                                    }, word,
                                                                    len,
                                                                    transform_idx);
                                    }
                                    pos += len;
                                    s.meta_block_remaining_len -= len;
                                    if (pos >= s.ringbuffer_size) {
                                        s.state =
                                            BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_1;
                                        break ;
                                    }
                                } else {
                                    ;
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_TRANSFORM;
                                    break ;
                                }
                            } else {
                                ;
                                result =
                                    BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_DICTIONARY;
                                break ;
                            }
                        } else {
                            *unsafe {
                                 s.dist_rb.get_unchecked_mut((s.dist_rb_idx &
                                                                  3) as usize)
                             } = s.distance_code;
                            s.dist_rb_idx += 1;
                            s.meta_block_remaining_len -= i;
                            let src_start =
                                ((pos - s.distance_code) & s.ringbuffer_mask)
                                    as u32;
                            let dst_start = pos as u32;
                            let dst_end = pos as u32 + i as u32;
                            let src_end = src_start + i as u32;
                            memmove16(&mut s.ringbuffer.slice_mut(),
                                      dst_start, src_start);
                            if (src_end > pos as u32 && dst_end > src_start) {
                                s.state =
                                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY;
                                continue ;
                            }
                            if (dst_end >= s.ringbuffer_size as u32 ||
                                    src_end >= s.ringbuffer_size as u32) {
                                s.state =
                                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY;
                                continue ;
                            }
                            pos += i;
                            if (i > 16) {
                                if (i > 32) {
                                    memcpy_within_slice(s.ringbuffer.slice_mut(),
                                                        dst_start as usize +
                                                            16,
                                                        src_start as usize +
                                                            16,
                                                        (i - 16) as usize);
                                } else {
                                    memmove16(&mut s.ringbuffer.slice_mut(),
                                              dst_start + 16, src_start + 16);
                                }
                            }
                        }
                        if (s.meta_block_remaining_len <= 0) {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                            break ;
                        } else {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN;
                            continue ;
                        }
                    }
                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY =>
                    {
                        let mut wrap_guard = s.ringbuffer_size - pos;
                        let mut inner_return: bool = false;
                        while i > 0 {
                            i -= 1;
                            *unsafe {
                                 s.ringbuffer.slice_mut().get_unchecked_mut(pos
                                                                                as
                                                                                usize)
                             } =
                                unsafe {
                                    *s.ringbuffer.slice().get_unchecked(((pos
                                                                              -
                                                                              s.distance_code)
                                                                             &
                                                                             s.ringbuffer_mask)
                                                                            as
                                                                            usize)
                                };
                            pos += 1;
                            wrap_guard -= 1;
                            if (wrap_guard == 0) {
                                mark_unlikely();
                                s.state =
                                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_2;
                                inner_return = true;
                                break ;
                            }
                        }
                        if inner_return { mark_unlikely(); break ; }
                        i -= 1;
                        if (s.meta_block_remaining_len <= 0) {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                            break ;
                        } else {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN;
                            continue ;
                        }
                    }
                    _ => {
                        result =
                            BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE;
                        break ;
                    }
                }
            }
        }
        s.pos = pos;
        s.loop_counter = i;
        core::mem::replace(&mut s.literal_hgroup,
                           core::mem::replace(&mut saved_literal_hgroup,
                                              HuffmanTreeGroup::<AllocU32,
                                                                 AllocHC>::default()));
        core::mem::replace(&mut s.distance_hgroup,
                           core::mem::replace(&mut saved_distance_hgroup,
                                              HuffmanTreeGroup::<AllocU32,
                                                                 AllocHC>::default()));
        core::mem::replace(&mut s.insert_copy_hgroup,
                           core::mem::replace(&mut saved_insert_copy_hgroup,
                                              HuffmanTreeGroup::<AllocU32,
                                                                 AllocHC>::default()));
        result
    }
    fn ProcessCommands<AllocU8: alloc::Allocator<u8>,
                       AllocU32: alloc::Allocator<u32>,
                       AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                   &mut BrotliState<AllocU8,
                                                                                    AllocU32,
                                                                                    AllocHC>,
                                                               input: &[u8])
     -> BrotliDecoderErrorCode {
        ProcessCommandsInternal(false, s, input)
    }
    fn SafeProcessCommands<AllocU8: alloc::Allocator<u8>,
                           AllocU32: alloc::Allocator<u32>,
                           AllocHC: alloc::Allocator<HuffmanCode>>(s:
                                                                       &mut BrotliState<AllocU8,
                                                                                        AllocU32,
                                                                                        AllocHC>,
                                                                   input:
                                                                       &[u8])
     -> BrotliDecoderErrorCode {
        ProcessCommandsInternal(true, s, input)
    }
    pub fn BrotliMaxDistanceSymbol(ndirect: u32, npostfix: u32) -> u32 {
        let bound: [u32; kBrotliMaxPostfix + 1] = [0, 4, 12, 28];
        let diff: [u32; kBrotliMaxPostfix + 1] = [73, 126, 228, 424];
        let postfix = 1 << npostfix;
        if (ndirect < bound[npostfix as usize]) {
            return ndirect + diff[npostfix as usize] + postfix;
        } else if (ndirect > bound[npostfix as usize] + postfix) {
            return ndirect + diff[npostfix as usize];
        } else {
            return bound[npostfix as usize] + diff[npostfix as usize] +
                       postfix;
        }
    }
    pub fn BrotliDecompressStream<AllocU8: alloc::Allocator<u8>,
                                  AllocU32: alloc::Allocator<u32>,
                                  AllocHC: alloc::Allocator<HuffmanCode>>(available_in:
                                                                              &mut usize,
                                                                          input_offset:
                                                                              &mut usize,
                                                                          xinput:
                                                                              &[u8],
                                                                          mut available_out:
                                                                              &mut usize,
                                                                          mut output_offset:
                                                                              &mut usize,
                                                                          mut output:
                                                                              &mut [u8],
                                                                          mut total_out:
                                                                              &mut usize,
                                                                          mut s:
                                                                              &mut BrotliState<AllocU8,
                                                                                               AllocU32,
                                                                                               AllocHC>)
     -> BrotliResult {
        let mut result = BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
        let mut saved_buffer: [u8; 8] = s.buffer;
        let mut local_input: &[u8];
        if is_fatal(s.error_code) { return BrotliResult::ResultFailure; }
        if *available_in as u64 >= (1u64 << 32) {
            return match assign_error_code(&mut s.error_code,
                                           BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS)
                       {
                       BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                       BrotliResult::ResultSuccess,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                       => BrotliResult::NeedsMoreInput,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                       => BrotliResult::NeedsMoreOutput,
                       _ => BrotliResult::ResultFailure,
                   };
        }
        if *input_offset as u64 >= (1u64 << 32) {
            return match assign_error_code(&mut s.error_code,
                                           BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS)
                       {
                       BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                       BrotliResult::ResultSuccess,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                       => BrotliResult::NeedsMoreInput,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                       => BrotliResult::NeedsMoreOutput,
                       _ => BrotliResult::ResultFailure,
                   };
        }
        if *input_offset + *available_in > xinput.len() {
            return match assign_error_code(&mut s.error_code,
                                           BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS)
                       {
                       BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                       BrotliResult::ResultSuccess,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                       => BrotliResult::NeedsMoreInput,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                       => BrotliResult::NeedsMoreOutput,
                       _ => BrotliResult::ResultFailure,
                   };
        }
        if *output_offset + *available_out > output.len() {
            return match assign_error_code(&mut s.error_code,
                                           BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_INVALID_ARGUMENTS)
                       {
                       BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                       BrotliResult::ResultSuccess,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                       => BrotliResult::NeedsMoreInput,
                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                       => BrotliResult::NeedsMoreOutput,
                       _ => BrotliResult::ResultFailure,
                   };
        }
        if s.buffer_length == 0 {
            local_input = xinput;
            s.br.avail_in = *available_in as u32;
            s.br.next_in = *input_offset as u32;
        } else {
            result = BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
            let copy_len =
                core::cmp::min(saved_buffer.len() - s.buffer_length as usize,
                               *available_in);
            if copy_len > 0 {
                unsafe {
                    (&mut saved_buffer[s.buffer_length as
                                                           usize..(s.buffer_length
                                                                       as
                                                                       usize +
                                                                       copy_len)])
                }.clone_from_slice(unsafe {
                                       (&xinput[*input_offset..copy_len
                                                                                   +
                                                                                   *input_offset])
                                   });
                unsafe {
                    (&mut s.buffer[s.buffer_length as
                                                       usize..(s.buffer_length
                                                                   as usize +
                                                                   copy_len)])
                }.clone_from_slice(unsafe {
                                       (&xinput[*input_offset..copy_len
                                                                                   +
                                                                                   *input_offset])
                                   });
            }
            local_input = &saved_buffer[..];
            s.br.next_in = 0;
        }
        loop  {
            match result {
                BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS => { }
                _ => {
                    match result {
                        BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                        => {
                            if s.ringbuffer.slice().len() != 0 {
                                let (intermediate_result, _) =
                                    WriteRingBuffer(available_out,
                                                    Some(&mut output),
                                                    &mut output_offset,
                                                    &mut total_out, true,
                                                    &mut s);
                                if is_fatal(intermediate_result) {
                                    result = intermediate_result;
                                    break ;
                                }
                            }
                            if s.buffer_length != 0 {
                                if s.br.avail_in == 0 {
                                    s.buffer_length = 0;
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                                    local_input = xinput;
                                    s.br.avail_in = *available_in as u32;
                                    s.br.next_in = *input_offset as u32;
                                    continue ;
                                } else if *available_in != 0 {
                                    result =
                                        BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS;
                                    let new_byte =
                                        unsafe {
                                            *xinput.get_unchecked(*input_offset)
                                        };
                                    *unsafe {
                                         s.buffer.get_unchecked_mut(s.buffer_length
                                                                        as
                                                                        usize)
                                     } = new_byte;
                                    {
                                        match (&unsafe {
                                                    *saved_buffer.get_unchecked(s.buffer_length
                                                                                    as
                                                                                    usize)
                                                }, &new_byte) {
                                            (left_val, right_val) => {
                                                if !(*left_val == *right_val)
                                                   {
                                                    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                                                  "`,\n right: `",
                                                                                                                  "`"],
                                                                                                                &match (&&*left_val,
                                                                                                                        &&*right_val)
                                                                                                                     {
                                                                                                                     (arg0,
                                                                                                                      arg1)
                                                                                                                     =>
                                                                                                                     [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                                                   ::core::fmt::Debug::fmt),
                                                                                                                      ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                                                   ::core::fmt::Debug::fmt)],
                                                                                                                 }))
                                                }
                                            }
                                        }
                                    };
                                    s.buffer_length += 1;
                                    s.br.avail_in = s.buffer_length;
                                    (*input_offset) += 1;
                                    (*available_in) -= 1;
                                    continue ;
                                }
                                break ;
                            } else {
                                *input_offset = s.br.next_in as usize;
                                *available_in = s.br.avail_in as usize;
                                while *available_in != 0 {
                                    *unsafe {
                                         s.buffer.get_unchecked_mut(s.buffer_length
                                                                        as
                                                                        usize)
                                     } =
                                        unsafe {
                                            *xinput.get_unchecked(*input_offset)
                                        };
                                    s.buffer_length += 1;
                                    (*input_offset) += 1;
                                    (*available_in) -= 1;
                                }
                                break ;
                            }
                        }
                        _ => {
                            if s.buffer_length != 0 {
                                s.buffer_length = 0;
                            } else {
                                bit_reader::BrotliBitReaderUnload(&mut s.br);
                                *available_in = s.br.avail_in as usize;
                                *input_offset = s.br.next_in as usize;
                            }
                        }
                    }
                    break ;
                }
            }
            loop  {
                match s.state {
                    BrotliRunningState::BROTLI_STATE_UNINITED => {
                        if (!bit_reader::BrotliWarmupBitReader(&mut s.br,
                                                               local_input)) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        result =
                            DecodeWindowBits(&mut s.large_window,
                                             &mut s.window_bits, &mut s.br);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        if s.large_window {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_LARGE_WINDOW_BITS;
                        } else {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_INITIALIZE;
                        }
                    }
                    BrotliRunningState::BROTLI_STATE_LARGE_WINDOW_BITS => {
                        if (!bit_reader::BrotliSafeReadBits(&mut s.br, 6,
                                                            &mut s.window_bits,
                                                            local_input)) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        if (s.window_bits < kBrotliLargeMinWbits ||
                                s.window_bits > kBrotliLargeMaxWbits) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS;
                            break ;
                        }
                        s.state = BrotliRunningState::BROTLI_STATE_INITIALIZE;
                    }
                    BrotliRunningState::BROTLI_STATE_INITIALIZE => {
                        s.max_backward_distance =
                            (1 << s.window_bits) - kBrotliWindowGap as i32;
                        s.max_backward_distance_minus_custom_dict_size =
                            s.max_backward_distance - s.custom_dict_size;
                        s.block_type_length_state.block_type_trees =
                            s.alloc_hc.alloc_cell(3 *
                                                      huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE
                                                          as usize);
                        if (s.block_type_length_state.block_type_trees.slice().len()
                                == 0) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES;
                            break ;
                        }
                        s.block_type_length_state.block_len_trees =
                            s.alloc_hc.alloc_cell(3 *
                                                      huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE
                                                          as usize);
                        s.state =
                            BrotliRunningState::BROTLI_STATE_METABLOCK_BEGIN;
                    }
                    BrotliRunningState::BROTLI_STATE_METABLOCK_BEGIN => {
                        s.BrotliStateMetablockBegin();
                        ;
                        s.state =
                            BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER;
                    }
                    BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER => {
                        result = DecodeMetaBlockLength(&mut s, local_input);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        ;
                        ;
                        ;
                        ;
                        if (s.is_metadata != 0 || s.is_uncompressed != 0) &&
                               !bit_reader::BrotliJumpToByteBoundary(&mut s.br)
                           {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_2;
                            break ;
                        }
                        if s.is_metadata != 0 {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METADATA;
                            break ;
                        }
                        if s.meta_block_remaining_len == 0 {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                            break ;
                        }
                        if s.ringbuffer.slice().len() == 0 &&
                               !BrotliAllocateRingBuffer(&mut s, local_input)
                           {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2;
                            break ;
                        }
                        if s.is_uncompressed != 0 {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_UNCOMPRESSED;
                            break ;
                        }
                        s.loop_counter = 0;
                        s.state =
                            BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_0;
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_UNCOMPRESSED => {
                        let mut _bytes_copied = s.meta_block_remaining_len;
                        result =
                            CopyUncompressedBlockToOutput(&mut available_out,
                                                          &mut output,
                                                          &mut output_offset,
                                                          &mut total_out,
                                                          &mut s,
                                                          local_input);
                        _bytes_copied -= s.meta_block_remaining_len;
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_METADATA => {
                        while s.meta_block_remaining_len > 0 {
                            let mut bits = 0u32;
                            if !bit_reader::BrotliSafeReadBits(&mut s.br, 8,
                                                               &mut bits,
                                                               local_input) {
                                result =
                                    BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                                break ;
                            }
                            s.meta_block_remaining_len -= 1;
                        }
                        if let BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
                               = result {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_DONE
                        }
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_0 => {
                        if s.loop_counter >= 3 {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER_2;
                            break ;
                        }
                        {
                            let index = s.loop_counter as usize;
                            result =
                                DecodeVarLenUint8(&mut s.substate_decode_uint8,
                                                  &mut s.br,
                                                  &mut *unsafe {
                                                            s.block_type_length_state.num_block_types.get_unchecked_mut(index)
                                                        }, local_input);
                        }
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        *unsafe {
                             s.block_type_length_state.num_block_types.get_unchecked_mut(s.loop_counter
                                                                                             as
                                                                                             usize)
                         } += 1;
                        ;
                        if unsafe {
                               *s.block_type_length_state.num_block_types.get_unchecked(s.loop_counter
                                                                                            as
                                                                                            usize)
                           } < 2 {
                            s.loop_counter += 1;
                            break ;
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_1;
                    }
                    BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_1 => {
                        let tree_offset =
                            s.loop_counter as u32 *
                                huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE as u32;
                        let mut new_huffman_table =
                            mem::replace(&mut s.block_type_length_state.block_type_trees,
                                         AllocHC::AllocatedMemory::default());
                        let loop_counter = s.loop_counter as usize;
                        let alphabet_size =
                            unsafe {
                                *s.block_type_length_state.num_block_types.get_unchecked(loop_counter)
                            } + 2;
                        result =
                            ReadHuffmanCode(alphabet_size, alphabet_size,
                                            new_huffman_table.slice_mut(),
                                            tree_offset as usize, None,
                                            &mut s, local_input);
                        mem::replace(&mut s.block_type_length_state.block_type_trees,
                                     new_huffman_table);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_2;
                    }
                    BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_2 => {
                        let tree_offset =
                            s.loop_counter *
                                huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE as i32;
                        let mut new_huffman_table =
                            mem::replace(&mut s.block_type_length_state.block_len_trees,
                                         AllocHC::AllocatedMemory::default());
                        result =
                            ReadHuffmanCode(kNumBlockLengthCodes,
                                            kNumBlockLengthCodes,
                                            new_huffman_table.slice_mut(),
                                            tree_offset as usize, None,
                                            &mut s, local_input);
                        mem::replace(&mut s.block_type_length_state.block_len_trees,
                                     new_huffman_table);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_3;
                    }
                    BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_3 => {
                        let tree_offset =
                            s.loop_counter *
                                huffman::BROTLI_HUFFMAN_MAX_TABLE_SIZE as i32;
                        let mut block_length_out: u32 = 0;
                        let ind_ret: (bool, u32);
                        ind_ret =
                            SafeReadBlockLengthIndex(&s.block_type_length_state.substate_read_block_length,
                                                     s.block_type_length_state.block_length_index,
                                                     unsafe {
                                                         (&s.block_type_length_state.block_len_trees.slice()[tree_offset
                                                                                                                                 as
                                                                                                                                 usize..])
                                                     }, &mut s.br,
                                                     local_input);
                        if !SafeReadBlockLengthFromIndex(&mut s.block_type_length_state,
                                                         &mut s.br,
                                                         &mut block_length_out,
                                                         ind_ret, local_input)
                           {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        *unsafe {
                             s.block_type_length_state.block_length.get_unchecked_mut(s.loop_counter
                                                                                          as
                                                                                          usize)
                         } = block_length_out;
                        ;
                        s.loop_counter += 1;
                        s.state =
                            BrotliRunningState::BROTLI_STATE_HUFFMAN_CODE_0;
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_METABLOCK_HEADER_2 => {
                        let mut bits: u32 = 0;
                        if (!bit_reader::BrotliSafeReadBits(&mut s.br, 6,
                                                            &mut bits,
                                                            local_input)) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT;
                            break ;
                        }
                        s.distance_postfix_bits =
                            bits & bit_reader::BitMask(2);
                        bits >>= 2;
                        s.num_direct_distance_codes =
                            NUM_DISTANCE_SHORT_CODES +
                                (bits << s.distance_postfix_bits);
                        ;
                        ;
                        s.distance_postfix_mask =
                            bit_reader::BitMask(s.distance_postfix_bits) as
                                i32;
                        s.context_modes =
                            s.alloc_u8.alloc_cell(unsafe {
                                                      *s.block_type_length_state.num_block_types.get_unchecked(0)
                                                  } as usize);
                        if (s.context_modes.slice().len() == 0) {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES;
                            break ;
                        }
                        s.loop_counter = 0;
                        s.state =
                            BrotliRunningState::BROTLI_STATE_CONTEXT_MODES;
                    }
                    BrotliRunningState::BROTLI_STATE_CONTEXT_MODES => {
                        result = ReadContextModes(&mut s, local_input);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.state =
                            BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_1;
                    }
                    BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_1 => {
                        result =
                            DecodeContextMap((unsafe {
                                                  *s.block_type_length_state.num_block_types.get_unchecked(0)
                                              } as usize) <<
                                                 kLiteralContextBits as usize,
                                             false, &mut s, local_input);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        DetectTrivialLiteralBlockTypes(s);
                        s.state =
                            BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_2;
                    }
                    BrotliRunningState::BROTLI_STATE_CONTEXT_MAP_2 => {
                        let num_direct_codes =
                            s.num_direct_distance_codes -
                                NUM_DISTANCE_SHORT_CODES;
                        let num_distance_codes =
                            BROTLI_DISTANCE_ALPHABET_SIZE(s.distance_postfix_bits,
                                                          num_direct_codes,
                                                          (if s.large_window {
                                                               BROTLI_LARGE_MAX_DISTANCE_BITS
                                                           } else {
                                                               BROTLI_MAX_DISTANCE_BITS
                                                           }));
                        let max_distance_symbol =
                            if s.large_window {
                                BrotliMaxDistanceSymbol(num_direct_codes,
                                                        s.distance_postfix_bits)
                            } else { num_distance_codes };
                        result =
                            DecodeContextMap((unsafe {
                                                  *s.block_type_length_state.num_block_types.get_unchecked(2)
                                              } as usize) <<
                                                 kDistanceContextBits as
                                                     usize, true, s,
                                             local_input);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.literal_hgroup.init(&mut s.alloc_u32,
                                              &mut s.alloc_hc,
                                              kNumLiteralCodes,
                                              kNumLiteralCodes,
                                              s.num_literal_htrees as u16);
                        s.insert_copy_hgroup.init(&mut s.alloc_u32,
                                                  &mut s.alloc_hc,
                                                  kNumInsertAndCopyCodes,
                                                  kNumInsertAndCopyCodes,
                                                  unsafe {
                                                      *s.block_type_length_state.num_block_types.get_unchecked(1)
                                                  } as u16);
                        s.distance_hgroup.init(&mut s.alloc_u32,
                                               &mut s.alloc_hc,
                                               num_distance_codes as u16,
                                               max_distance_symbol as u16,
                                               s.num_dist_htrees as u16);
                        if (s.literal_hgroup.codes.slice().len() == 0 ||
                                s.insert_copy_hgroup.codes.slice().len() == 0
                                || s.distance_hgroup.codes.slice().len() == 0)
                           {
                            return match assign_error_code(&mut s.error_code,
                                                           BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE)
                                       {
                                       BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
                                       => BrotliResult::ResultSuccess,
                                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                                       => BrotliResult::NeedsMoreInput,
                                       BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                                       => BrotliResult::NeedsMoreOutput,
                                       _ => BrotliResult::ResultFailure,
                                   };
                        }
                        s.loop_counter = 0;
                        s.state = BrotliRunningState::BROTLI_STATE_TREE_GROUP;
                    }
                    BrotliRunningState::BROTLI_STATE_TREE_GROUP => {
                        result =
                            HuffmanTreeGroupDecode(s.loop_counter, &mut s,
                                                   local_input);
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        s.loop_counter += 1;
                        if (s.loop_counter >= 3) {
                            PrepareLiteralDecoding(s);
                            s.dist_context_map_slice_index = 0;
                            s.htree_command_index = 0;
                            s.state =
                                BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN;
                        }
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN |
                    BrotliRunningState::BROTLI_STATE_COMMAND_INNER |
                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS
                    | BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY
                    => {
                        result = ProcessCommands(s, local_input);
                        if let BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                               = result {
                            result = SafeProcessCommands(s, local_input)
                        }
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_COMMAND_INNER_WRITE |
                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_1 |
                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_2 => {
                        let (xresult, _) =
                            WriteRingBuffer(&mut available_out,
                                            Some(&mut output),
                                            &mut output_offset,
                                            &mut total_out, false, &mut s);
                        result = xresult;
                        match result {
                            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
                            {
                            }
                            _ => break ,
                        }
                        WrapRingBuffer(s);
                        if s.ringbuffer_size == 1 << s.window_bits {
                            s.max_distance = s.max_backward_distance;
                        }
                        match s.state {
                            BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_1
                            => {
                                if (s.meta_block_remaining_len <= 0) {
                                    s.state =
                                        BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                                } else {
                                    s.state =
                                        BrotliRunningState::BROTLI_STATE_COMMAND_BEGIN;
                                }
                                break ;
                            }
                            BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRITE_2
                            => {
                                s.state =
                                    BrotliRunningState::BROTLI_STATE_COMMAND_POST_WRAP_COPY;
                            }
                            _ => {
                                if (s.loop_counter == 0) {
                                    if (s.meta_block_remaining_len <= 0) {
                                        s.state =
                                            BrotliRunningState::BROTLI_STATE_METABLOCK_DONE;
                                    } else {
                                        s.state =
                                            BrotliRunningState::BROTLI_STATE_COMMAND_POST_DECODE_LITERALS;
                                    }
                                    break ;
                                }
                                s.state =
                                    BrotliRunningState::BROTLI_STATE_COMMAND_INNER;
                            }
                        }
                        break ;
                    }
                    BrotliRunningState::BROTLI_STATE_METABLOCK_DONE => {
                        s.BrotliStateCleanupAfterMetablock();
                        if (s.is_last_metablock == 0) {
                            s.state =
                                BrotliRunningState::BROTLI_STATE_METABLOCK_BEGIN;
                            break ;
                        }
                        if (!bit_reader::BrotliJumpToByteBoundary(&mut s.br))
                           {
                            result =
                                BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_FORMAT_PADDING_2;
                        }
                        if (s.buffer_length == 0) {
                            bit_reader::BrotliBitReaderUnload(&mut s.br);
                            *available_in = s.br.avail_in as usize;
                            *input_offset = s.br.next_in as usize;
                        }
                        s.state = BrotliRunningState::BROTLI_STATE_DONE;
                    }
                    BrotliRunningState::BROTLI_STATE_DONE => {
                        if (s.ringbuffer.slice().len() != 0) {
                            let (xresult, _) =
                                WriteRingBuffer(&mut available_out,
                                                Some(&mut output),
                                                &mut output_offset,
                                                &mut total_out, true, &mut s);
                            result = xresult;
                            match result {
                                BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
                                => {
                                }
                                _ => break ,
                            }
                        }
                        return match assign_error_code(&mut s.error_code,
                                                       result) {
                                   BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS
                                   => BrotliResult::ResultSuccess,
                                   BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT
                                   => BrotliResult::NeedsMoreInput,
                                   BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT
                                   => BrotliResult::NeedsMoreOutput,
                                   _ => BrotliResult::ResultFailure,
                               };
                    }
                }
            }
        }
        match assign_error_code(&mut s.error_code, result) {
            BrotliDecoderErrorCode::BROTLI_DECODER_SUCCESS =>
            BrotliResult::ResultSuccess,
            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_INPUT =>
            BrotliResult::NeedsMoreInput,
            BrotliDecoderErrorCode::BROTLI_DECODER_NEEDS_MORE_OUTPUT =>
            BrotliResult::NeedsMoreOutput,
            _ => BrotliResult::ResultFailure,
        }
    }
}
pub mod io_wrappers {
    #[cfg(feature = "std")]
    use std::io::{self, ErrorKind, Read, Write};
    /// this trait does not allow for transient errors: they must be retried in the underlying layer
    pub trait CustomWrite<ErrType> {
        fn write(self: &mut Self, data: &[u8])
        -> Result<usize, ErrType>;
        fn flush(self: &mut Self)
        -> Result<(), ErrType>;
    }
    /// this trait does not allow for transient errors: they must be retried in the underlying layer
    pub trait CustomRead<ErrType> {
        fn read(self: &mut Self, data: &mut [u8])
        -> Result<usize, ErrType>;
    }
    #[allow(dead_code)]
    pub fn write_all<ErrType, OutputType>(w: &mut OutputType, buf: &[u8])
     -> Result<(), ErrType> where OutputType: CustomWrite<ErrType> {
        let mut total_written: usize = 0;
        while total_written < buf.len() {
            match w.write(&buf[total_written..]) {
                Err(e) => return Result::Err(e),
                Ok(cur_written) => {
                    {
                        match (&(cur_written == 0), &false) {
                            (left_val, right_val) => {
                                if !(*left_val == *right_val) {
                                    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                                  "`,\n right: `",
                                                                                                  "`"],
                                                                                                &match (&&*left_val,
                                                                                                        &&*right_val)
                                                                                                     {
                                                                                                     (arg0,
                                                                                                      arg1)
                                                                                                     =>
                                                                                                     [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                                   ::core::fmt::Debug::fmt),
                                                                                                      ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                                   ::core::fmt::Debug::fmt)],
                                                                                                 }))
                                }
                            }
                        }
                    };
                    total_written += cur_written;
                }
            }
        }
        Ok(())
    }
    #[cfg(feature = "std")]
    pub struct IntoIoReader<InputType: Read>(pub InputType);
    #[cfg(feature = "std")]
    pub struct IntoIoWriter<InputType: Write>(pub InputType);
    #[cfg(feature = "std")]
    pub struct IoWriterWrapper<'a, OutputType: Write +
                               'a>(pub &'a mut OutputType);
    #[cfg(feature = "std")]
    pub struct IoReaderWrapper<'a, OutputType: Read +
                               'a>(pub &'a mut OutputType);
    #[cfg(feature = "std")]
    impl <'a, OutputType: Write> CustomWrite<io::Error> for
     IoWriterWrapper<'a, OutputType> {
        fn write(self: &mut Self, buf: &[u8]) -> Result<usize, io::Error> {
            loop  {
                match self.0.write(buf) {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(cur_written) => return Ok(cur_written),
                }
            }
        }
        fn flush(self: &mut Self) -> Result<(), io::Error> {
            loop  {
                match self.0.flush() {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(_) => return Ok(()),
                }
            }
        }
    }
    #[cfg(feature = "std")]
    impl <'a, InputType: Read> CustomRead<io::Error> for
     IoReaderWrapper<'a, InputType> {
        fn read(self: &mut Self, buf: &mut [u8]) -> Result<usize, io::Error> {
            loop  {
                match self.0.read(buf) {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(cur_read) => return Ok(cur_read),
                }
            }
        }
    }
    #[cfg(feature = "std")]
    impl <InputType: Read> CustomRead<io::Error> for IntoIoReader<InputType> {
        fn read(self: &mut Self, buf: &mut [u8]) -> Result<usize, io::Error> {
            loop  {
                match self.0.read(buf) {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(cur_read) => return Ok(cur_read),
                }
            }
        }
    }
    #[cfg(feature = "std")]
    impl <InputType: Write> CustomWrite<io::Error> for IntoIoWriter<InputType>
     {
        fn flush(self: &mut Self) -> Result<(), io::Error> {
            loop  {
                match self.0.flush() {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(_) => return Ok(()),
                }
            }
        }
        fn write(self: &mut Self, buf: &[u8]) -> Result<usize, io::Error> {
            loop  {
                match self.0.write(buf) {
                    Err(e) => {
                        match e.kind() {
                            ErrorKind::Interrupted => continue ,
                            _ => return Err(e),
                        }
                    }
                    Ok(cur_written) => return Ok(cur_written),
                }
            }
        }
    }
}
pub mod reader {
    #[cfg(feature = "std")]
    use std::io::{self, Error, ErrorKind, Read};
    #[cfg(feature = "std")]
    pub use alloc_stdlib::StandardAlloc;
    pub use huffman::{HuffmanCode, HuffmanTreeGroup};
    pub use state::BrotliState;
    pub use io_wrappers::{CustomRead, CustomWrite};
    #[cfg(feature = "std")]
    pub use io_wrappers::{IntoIoReader, IoReaderWrapper, IoWriterWrapper};
    pub use super::decode::{BrotliDecompressStream, BrotliResult};
    pub use alloc::{AllocatedStackMemory, Allocator, SliceWrapper,
                    SliceWrapperMut, StackAllocator};
    #[cfg(feature = "std")]
    pub struct DecompressorCustomAlloc<R: Read,
                                       BufferType: SliceWrapperMut<u8>,
                                       AllocU8: Allocator<u8>,
                                       AllocU32: Allocator<u32>,
                                       AllocHC: Allocator<HuffmanCode>>(DecompressorCustomIo<io::Error,
                                                                                             IntoIoReader<R>,
                                                                                             BufferType,
                                                                                             AllocU8,
                                                                                             AllocU32,
                                                                                             AllocHC>);
    #[cfg(feature = "std")]
    impl <R: Read, BufferType: SliceWrapperMut<u8>, AllocU8, AllocU32,
          AllocHC>
     DecompressorCustomAlloc<R, BufferType, AllocU8, AllocU32, AllocHC> where
     AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
     AllocHC: Allocator<HuffmanCode> {
        pub fn new(r: R, buffer: BufferType, alloc_u8: AllocU8,
                   alloc_u32: AllocU32, alloc_hc: AllocHC) -> Self {
            DecompressorCustomAlloc::<R, BufferType, AllocU8, AllocU32,
                                      AllocHC>(DecompressorCustomIo::<Error,
                                                                      IntoIoReader<R>,
                                                                      BufferType,
                                                                      AllocU8,
                                                                      AllocU32,
                                                                      AllocHC>::new(IntoIoReader::<R>(r),
                                                                                    buffer,
                                                                                    alloc_u8,
                                                                                    alloc_u32,
                                                                                    alloc_hc,
                                                                                    Error::new(ErrorKind::InvalidData,
                                                                                               "Invalid Data")))
        }
        pub fn new_with_custom_dictionary(r: R, buffer: BufferType,
                                          alloc_u8: AllocU8,
                                          alloc_u32: AllocU32,
                                          alloc_hc: AllocHC,
                                          dict: AllocU8::AllocatedMemory)
         -> Self {
            DecompressorCustomAlloc::<R, BufferType, AllocU8, AllocU32,
                                      AllocHC>(DecompressorCustomIo::<Error,
                                                                      IntoIoReader<R>,
                                                                      BufferType,
                                                                      AllocU8,
                                                                      AllocU32,
                                                                      AllocHC>::new_with_custom_dictionary(IntoIoReader::<R>(r),
                                                                                                           buffer,
                                                                                                           alloc_u8,
                                                                                                           alloc_u32,
                                                                                                           alloc_hc,
                                                                                                           dict,
                                                                                                           Error::new(ErrorKind::InvalidData,
                                                                                                                      "Invalid Data")))
        }
        pub fn get_ref(&self) -> &R { &self.0.get_ref().0 }
        pub fn get_mut(&mut self) -> &mut R { &mut self.0.get_mut().0 }
        pub fn into_inner(self) -> R { self.0.into_inner().0 }
    }
    #[cfg(feature = "std")]
    impl <R: Read, BufferType: SliceWrapperMut<u8>, AllocU8: Allocator<u8>,
          AllocU32: Allocator<u32>, AllocHC: Allocator<HuffmanCode>> Read for
     DecompressorCustomAlloc<R, BufferType, AllocU8, AllocU32, AllocHC> {
        fn read(&mut self, buf: &mut [u8]) -> Result<usize, Error> {
            self.0.read(buf)
        }
    }
    #[cfg(feature = "std")]
    pub struct Decompressor<R: Read>(DecompressorCustomAlloc<R,
                                                             <StandardAlloc as
                                                             Allocator<u8>>::AllocatedMemory,
                                                             StandardAlloc,
                                                             StandardAlloc,
                                                             StandardAlloc>);
    #[cfg(feature = "std")]
    impl <R: Read> Decompressor<R> {
        pub fn new(r: R, buffer_size: usize) -> Self {
            let dict =
                <StandardAlloc as Allocator<u8>>::AllocatedMemory::default();
            Self::new_with_custom_dict(r, buffer_size, dict)
        }
        pub fn new_with_custom_dict(r: R, buffer_size: usize,
                                    dict:
                                        <StandardAlloc as
                                        Allocator<u8>>::AllocatedMemory)
         -> Self {
            let mut alloc = StandardAlloc::default();
            let buffer =
                <StandardAlloc as
                    Allocator<u8>>::alloc_cell(&mut alloc,
                                               if buffer_size == 0 {
                                                   4096
                                               } else { buffer_size });
            Decompressor::<R>(DecompressorCustomAlloc::<R,
                                                        <StandardAlloc as
                                                        Allocator<u8>>::AllocatedMemory,
                                                        StandardAlloc,
                                                        StandardAlloc,
                                                        StandardAlloc>::new_with_custom_dictionary(r,
                                                                                                   buffer,
                                                                                                   alloc,
                                                                                                   StandardAlloc::default(),
                                                                                                   StandardAlloc::default(),
                                                                                                   dict))
        }
        pub fn get_ref(&self) -> &R { &self.0.get_ref() }
        pub fn get_mut(&mut self) -> &mut R { &mut ((self.0).0).get_mut().0 }
        pub fn into_inner(self) -> R { self.0.into_inner() }
    }
    #[cfg(feature = "std")]
    impl <R: Read> Read for Decompressor<R> {
        fn read(&mut self, buf: &mut [u8]) -> Result<usize, Error> {
            self.0.read(buf)
        }
    }
    pub struct DecompressorCustomIo<ErrType, R: CustomRead<ErrType>,
                                    BufferType: SliceWrapperMut<u8>,
                                    AllocU8: Allocator<u8>,
                                    AllocU32: Allocator<u32>,
                                    AllocHC: Allocator<HuffmanCode>> {
        input_buffer: BufferType,
        total_out: usize,
        input_offset: usize,
        input_len: usize,
        input: R,
        error_if_invalid_data: Option<ErrType>,
        state: BrotliState<AllocU8, AllocU32, AllocHC>,
    }
    impl <ErrType, R: CustomRead<ErrType>, BufferType: SliceWrapperMut<u8>,
          AllocU8, AllocU32, AllocHC>
     DecompressorCustomIo<ErrType, R, BufferType, AllocU8, AllocU32, AllocHC>
     where AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
     AllocHC: Allocator<HuffmanCode> {
        pub fn new(r: R, buffer: BufferType, alloc_u8: AllocU8,
                   alloc_u32: AllocU32, alloc_hc: AllocHC,
                   invalid_data_error_type: ErrType) -> Self {
            let dict = AllocU8::AllocatedMemory::default();
            Self::new_with_custom_dictionary(r, buffer, alloc_u8, alloc_u32,
                                             alloc_hc, dict,
                                             invalid_data_error_type)
        }
        pub fn new_with_custom_dictionary(r: R, buffer: BufferType,
                                          alloc_u8: AllocU8,
                                          alloc_u32: AllocU32,
                                          alloc_hc: AllocHC,
                                          dict: AllocU8::AllocatedMemory,
                                          invalid_data_error_type: ErrType)
         -> Self {
            DecompressorCustomIo::<ErrType, R, BufferType, AllocU8, AllocU32,
                                   AllocHC>{input_buffer: buffer,
                                            total_out: 0,
                                            input_offset: 0,
                                            input_len: 0,
                                            input: r,
                                            state:
                                                BrotliState::new_with_custom_dictionary(alloc_u8,
                                                                                        alloc_u32,
                                                                                        alloc_hc,
                                                                                        dict),
                                            error_if_invalid_data:
                                                Some(invalid_data_error_type),}
        }
        pub fn get_ref(&self) -> &R { &self.input }
        pub fn get_mut(&mut self) -> &mut R { &mut self.input }
        pub fn into_inner(self) -> R {
            match self {
                DecompressorCustomIo {
                input_buffer: _ib,
                total_out: _to,
                state: _state,
                input_offset: _io,
                input_len: _il,
                error_if_invalid_data: _eiid,
                input } => {
                    input
                }
            }
        }
        pub fn copy_to_front(&mut self) {
            let avail_in = self.input_len - self.input_offset;
            if self.input_offset == self.input_buffer.slice_mut().len() {
                self.input_offset = 0;
                self.input_len = 0;
            } else if self.input_offset + 256 >
                          self.input_buffer.slice_mut().len() &&
                          avail_in < self.input_offset {
                let (first, second) =
                    self.input_buffer.slice_mut().split_at_mut(self.input_offset);
                self.input_len -= self.input_offset;
                first[0..avail_in].clone_from_slice(&second[0..avail_in]);
                self.input_offset = 0;
            }
        }
    }
    impl <ErrType, R: CustomRead<ErrType>, BufferType: SliceWrapperMut<u8>,
          AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
          AllocHC: Allocator<HuffmanCode>> CustomRead<ErrType> for
     DecompressorCustomIo<ErrType, R, BufferType, AllocU8, AllocU32, AllocHC>
     {
        fn read(&mut self, buf: &mut [u8]) -> Result<usize, ErrType> {
            let mut output_offset: usize = 0;
            let mut avail_out = buf.len() - output_offset;
            let mut avail_in = self.input_len - self.input_offset;
            while avail_out == buf.len() {
                match BrotliDecompressStream(&mut avail_in,
                                             &mut self.input_offset,
                                             &self.input_buffer.slice_mut()[..],
                                             &mut avail_out,
                                             &mut output_offset, buf,
                                             &mut self.total_out,
                                             &mut self.state) {
                    BrotliResult::NeedsMoreInput => {
                        self.copy_to_front();
                        if output_offset != 0 { return Ok(output_offset); }
                        match self.input.read(&mut self.input_buffer.slice_mut()[self.input_len..])
                            {
                            Err(e) => { return Err(e); }
                            Ok(size) =>
                            if size == 0 {
                                return Err(self.error_if_invalid_data.take().unwrap());
                            } else {
                                self.input_len += size;
                                avail_in = self.input_len - self.input_offset;
                            },
                        }
                    }
                    BrotliResult::NeedsMoreOutput => { break ; }
                    BrotliResult::ResultSuccess => return Ok(output_offset),
                    BrotliResult::ResultFailure =>
                    return Err(self.error_if_invalid_data.take().unwrap()),
                }
            }
            Ok(output_offset)
        }
    }
}
pub mod writer {
    use core;
    #[cfg(feature = "std")]
    use std::io::{self, Error, ErrorKind, Write};
    #[cfg(feature = "std")]
    pub use alloc_stdlib::StandardAlloc;
    pub use huffman::{HuffmanCode, HuffmanTreeGroup};
    pub use state::BrotliState;
    pub use io_wrappers::{CustomWrite};
    #[cfg(feature = "std")]
    pub use io_wrappers::{IntoIoWriter, IoWriterWrapper};
    pub use super::decode::{BrotliDecompressStream, BrotliResult};
    pub use alloc::{AllocatedStackMemory, Allocator, SliceWrapper,
                    SliceWrapperMut, StackAllocator};
    #[cfg(feature = "std")]
    pub struct DecompressorWriterCustomAlloc<W: Write,
                                             BufferType: SliceWrapperMut<u8>,
                                             AllocU8: Allocator<u8>,
                                             AllocU32: Allocator<u32>,
                                             AllocHC: Allocator<HuffmanCode>>(DecompressorWriterCustomIo<io::Error,
                                                                                                         IntoIoWriter<W>,
                                                                                                         BufferType,
                                                                                                         AllocU8,
                                                                                                         AllocU32,
                                                                                                         AllocHC>);
    #[cfg(feature = "std")]
    impl <W: Write, BufferType: SliceWrapperMut<u8>, AllocU8, AllocU32,
          AllocHC>
     DecompressorWriterCustomAlloc<W, BufferType, AllocU8, AllocU32, AllocHC>
     where AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
     AllocHC: Allocator<HuffmanCode> {
        pub fn new(w: W, buffer: BufferType, alloc_u8: AllocU8,
                   alloc_u32: AllocU32, alloc_hc: AllocHC) -> Self {
            let dict = AllocU8::AllocatedMemory::default();
            Self::new_with_custom_dictionary(w, buffer, alloc_u8, alloc_u32,
                                             alloc_hc, dict)
        }
        pub fn new_with_custom_dictionary(w: W, buffer: BufferType,
                                          alloc_u8: AllocU8,
                                          alloc_u32: AllocU32,
                                          alloc_hc: AllocHC,
                                          dict: AllocU8::AllocatedMemory)
         -> Self {
            DecompressorWriterCustomAlloc::<W, BufferType, AllocU8, AllocU32,
                                            AllocHC>(DecompressorWriterCustomIo::<Error,
                                                                                  IntoIoWriter<W>,
                                                                                  BufferType,
                                                                                  AllocU8,
                                                                                  AllocU32,
                                                                                  AllocHC>::new_with_custom_dictionary(IntoIoWriter::<W>(w),
                                                                                                                       buffer,
                                                                                                                       alloc_u8,
                                                                                                                       alloc_u32,
                                                                                                                       alloc_hc,
                                                                                                                       dict,
                                                                                                                       Error::new(ErrorKind::InvalidData,
                                                                                                                                  "Invalid Data")))
        }
        pub fn get_ref(&self) -> &W { &self.0.get_ref().0 }
        pub fn get_mut(&mut self) -> &mut W { &mut self.0.get_mut().0 }
        pub fn into_inner(self) -> Result<W, W> {
            match self.0.into_inner() {
                Ok(w) => Ok(w.0),
                Err(w) => Err(w.0),
            }
        }
    }
    #[cfg(feature = "std")]
    impl <W: Write, BufferType: SliceWrapperMut<u8>, AllocU8: Allocator<u8>,
          AllocU32: Allocator<u32>, AllocHC: Allocator<HuffmanCode>> Write for
     DecompressorWriterCustomAlloc<W, BufferType, AllocU8, AllocU32, AllocHC>
     {
        fn write(&mut self, buf: &[u8]) -> Result<usize, Error> {
            self.0.write(buf)
        }
        fn flush(&mut self) -> Result<(), Error> { self.0.flush() }
    }
    #[cfg(feature = "std")]
    pub struct DecompressorWriter<W: Write>(DecompressorWriterCustomAlloc<W,
                                                                          <StandardAlloc
                                                                          as
                                                                          Allocator<u8>>::AllocatedMemory,
                                                                          StandardAlloc,
                                                                          StandardAlloc,
                                                                          StandardAlloc>);
    #[cfg(feature = "std")]
    impl <W: Write> DecompressorWriter<W> {
        pub fn new(w: W, buffer_size: usize) -> Self {
            Self::new_with_custom_dictionary(w, buffer_size,
                                             <StandardAlloc as
                                                 Allocator<u8>>::AllocatedMemory::default())
        }
        pub fn new_with_custom_dictionary(w: W, buffer_size: usize,
                                          dict:
                                              <StandardAlloc as
                                              Allocator<u8>>::AllocatedMemory)
         -> Self {
            let mut alloc = StandardAlloc::default();
            let buffer =
                <StandardAlloc as
                    Allocator<u8>>::alloc_cell(&mut alloc,
                                               if buffer_size == 0 {
                                                   4096
                                               } else { buffer_size });
            DecompressorWriter::<W>(DecompressorWriterCustomAlloc::<W,
                                                                    <StandardAlloc
                                                                    as
                                                                    Allocator<u8>>::AllocatedMemory,
                                                                    StandardAlloc,
                                                                    StandardAlloc,
                                                                    StandardAlloc>::new_with_custom_dictionary(w,
                                                                                                               buffer,
                                                                                                               alloc,
                                                                                                               StandardAlloc::default(),
                                                                                                               StandardAlloc::default(),
                                                                                                               dict))
        }
        pub fn get_ref(&self) -> &W { self.0.get_ref() }
        pub fn get_mut(&mut self) -> &mut W { self.0.get_mut() }
        pub fn into_inner(self) -> Result<W, W> { self.0.into_inner() }
    }
    #[cfg(feature = "std")]
    impl <W: Write> Write for DecompressorWriter<W> {
        fn write(&mut self, buf: &[u8]) -> Result<usize, Error> {
            self.0.write(buf)
        }
        fn flush(&mut self) -> Result<(), Error> { self.0.flush() }
    }
    pub struct DecompressorWriterCustomIo<ErrType, W: CustomWrite<ErrType>,
                                          BufferType: SliceWrapperMut<u8>,
                                          AllocU8: Allocator<u8>,
                                          AllocU32: Allocator<u32>,
                                          AllocHC: Allocator<HuffmanCode>> {
        output_buffer: BufferType,
        total_out: usize,
        output: Option<W>,
        error_if_invalid_data: Option<ErrType>,
        state: BrotliState<AllocU8, AllocU32, AllocHC>,
    }
    pub fn write_all<ErrType,
                     W: CustomWrite<ErrType>>(writer: &mut W, mut buf: &[u8])
     -> Result<(), ErrType> {
        while buf.len() != 0 {
            match writer.write(buf) {
                Ok(bytes_written) => buf = &buf[bytes_written..],
                Err(e) => return Err(e),
            }
        }
        Ok(())
    }
    impl <ErrType, W: CustomWrite<ErrType>, BufferType: SliceWrapperMut<u8>,
          AllocU8, AllocU32, AllocHC>
     DecompressorWriterCustomIo<ErrType, W, BufferType, AllocU8, AllocU32,
                                AllocHC> where AllocU8: Allocator<u8>,
     AllocU32: Allocator<u32>, AllocHC: Allocator<HuffmanCode> {
        pub fn new(w: W, buffer: BufferType, alloc_u8: AllocU8,
                   alloc_u32: AllocU32, alloc_hc: AllocHC,
                   invalid_data_error_type: ErrType) -> Self {
            let dict = AllocU8::AllocatedMemory::default();
            Self::new_with_custom_dictionary(w, buffer, alloc_u8, alloc_u32,
                                             alloc_hc, dict,
                                             invalid_data_error_type)
        }
        pub fn new_with_custom_dictionary(w: W, buffer: BufferType,
                                          alloc_u8: AllocU8,
                                          alloc_u32: AllocU32,
                                          alloc_hc: AllocHC,
                                          dict: AllocU8::AllocatedMemory,
                                          invalid_data_error_type: ErrType)
         -> Self {
            DecompressorWriterCustomIo::<ErrType, W, BufferType, AllocU8,
                                         AllocU32,
                                         AllocHC>{output_buffer: buffer,
                                                  total_out: 0,
                                                  output: Some(w),
                                                  state:
                                                      BrotliState::new_with_custom_dictionary(alloc_u8,
                                                                                              alloc_u32,
                                                                                              alloc_hc,
                                                                                              dict),
                                                  error_if_invalid_data:
                                                      Some(invalid_data_error_type),}
        }
        fn close(&mut self) -> Result<(), ErrType> {
            loop  {
                let mut avail_in: usize = 0;
                let mut input_offset: usize = 0;
                let mut avail_out: usize =
                    self.output_buffer.slice_mut().len();
                let mut output_offset: usize = 0;
                let ret =
                    BrotliDecompressStream(&mut avail_in, &mut input_offset,
                                           &[], &mut avail_out,
                                           &mut output_offset,
                                           self.output_buffer.slice_mut(),
                                           &mut self.total_out,
                                           &mut self.state);
                match write_all(self.output.as_mut().unwrap(),
                                &self.output_buffer.slice_mut()[..output_offset])
                    {
                    Ok(_) => { }
                    Err(e) => return Err(e),
                }
                match ret {
                    BrotliResult::NeedsMoreInput =>
                    return Err(self.error_if_invalid_data.take().unwrap()),
                    BrotliResult::NeedsMoreOutput => { }
                    BrotliResult::ResultSuccess => return Ok(()),
                    BrotliResult::ResultFailure =>
                    return Err(self.error_if_invalid_data.take().unwrap()),
                }
            }
        }
        pub fn get_ref(&self) -> &W { self.output.as_ref().unwrap() }
        pub fn get_mut(&mut self) -> &mut W { self.output.as_mut().unwrap() }
        pub fn into_inner(mut self) -> Result<W, W> {
            match self.close() {
                Ok(_) =>
                Ok((core::mem::replace(&mut self.output, None).unwrap())),
                Err(_) =>
                Err((core::mem::replace(&mut self.output, None).unwrap())),
            }
        }
    }
    impl <ErrType, W: CustomWrite<ErrType>, BufferType: SliceWrapperMut<u8>,
          AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
          AllocHC: Allocator<HuffmanCode>> Drop for
     DecompressorWriterCustomIo<ErrType, W, BufferType, AllocU8, AllocU32,
                                AllocHC> {
        fn drop(&mut self) {
            if self.output.is_some() {
                match self.close() { Ok(_) => { } Err(_) => { } }
            }
        }
    }
    impl <ErrType, W: CustomWrite<ErrType>, BufferType: SliceWrapperMut<u8>,
          AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
          AllocHC: Allocator<HuffmanCode>> CustomWrite<ErrType> for
     DecompressorWriterCustomIo<ErrType, W, BufferType, AllocU8, AllocU32,
                                AllocHC> {
        fn write(&mut self, buf: &[u8]) -> Result<usize, ErrType> {
            let mut avail_in = buf.len();
            let mut input_offset: usize = 0;
            loop  {
                let mut output_offset = 0;
                let mut avail_out = self.output_buffer.slice_mut().len();
                let op_result =
                    BrotliDecompressStream(&mut avail_in, &mut input_offset,
                                           &buf[..], &mut avail_out,
                                           &mut output_offset,
                                           self.output_buffer.slice_mut(),
                                           &mut self.total_out,
                                           &mut self.state);
                match write_all(self.output.as_mut().unwrap(),
                                &self.output_buffer.slice_mut()[..output_offset])
                    {
                    Ok(_) => { }
                    Err(e) => return Err(e),
                }
                match op_result {
                    BrotliResult::NeedsMoreInput => {
                        match (&avail_in, &0) {
                            (left_val, right_val) => {
                                if !(*left_val == *right_val) {
                                    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                                  "`,\n right: `",
                                                                                                  "`"],
                                                                                                &match (&&*left_val,
                                                                                                        &&*right_val)
                                                                                                     {
                                                                                                     (arg0,
                                                                                                      arg1)
                                                                                                     =>
                                                                                                     [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                                   ::core::fmt::Debug::fmt),
                                                                                                      ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                                   ::core::fmt::Debug::fmt)],
                                                                                                 }))
                                }
                            }
                        }
                    }
                    BrotliResult::NeedsMoreOutput => continue ,
                    BrotliResult::ResultSuccess => return Ok((buf.len())),
                    BrotliResult::ResultFailure =>
                    return Err(self.error_if_invalid_data.take().unwrap()),
                }
                if avail_in == 0 { break  }
            }
            Ok(buf.len())
        }
        fn flush(&mut self) -> Result<(), ErrType> {
            self.output.as_mut().unwrap().flush()
        }
    }
}
pub use huffman::{HuffmanCode, HuffmanTreeGroup};
pub use state::BrotliState;
pub mod ffi {
    #![cfg(not(feature = "safe"))]
    #[no_mangle]
    #[cfg(feature = "std")]
    use std::{thread, panic, io, boxed, any, string};
    #[cfg(feature = "std")]
    use std::io::Write;
    use core;
    use core::slice;
    use core::ops;
    pub mod interface {
        use ::BrotliResult;
        #[allow(non_camel_case_types)]
        #[repr(u8)]
        pub enum c_void { _Nothing = 0, }
        #[no_mangle]
        #[repr(C)]
        #[allow(dead_code)]
        pub enum BrotliDecoderParameter {
            BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION = 0,
            BROTLI_DECODER_PARAM_LARGE_WINDOW = 1,
        }
        #[repr(C)]
        #[no_mangle]
        pub enum BrotliDecoderResult {
            BROTLI_DECODER_RESULT_ERROR = 0,
            BROTLI_DECODER_RESULT_SUCCESS = 1,
            BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT = 2,
            BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT = 3,
        }
        impl From<BrotliResult> for BrotliDecoderResult {
            fn from(r: BrotliResult) -> Self {
                match r {
                    BrotliResult::ResultSuccess =>
                    BrotliDecoderResult::BROTLI_DECODER_RESULT_SUCCESS,
                    BrotliResult::ResultFailure =>
                    BrotliDecoderResult::BROTLI_DECODER_RESULT_ERROR,
                    BrotliResult::NeedsMoreInput =>
                    BrotliDecoderResult::BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT,
                    BrotliResult::NeedsMoreOutput =>
                    BrotliDecoderResult::BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT,
                }
            }
        }
        #[no_mangle]
        pub type brotli_alloc_func =
         Option<extern "C" fn(data: *mut c_void, size: usize) -> *mut c_void>;
        #[no_mangle]
        pub type brotli_free_func =
         Option<extern "C" fn(data: *mut c_void, ptr: *mut c_void) -> ()>;
        #[repr(C)]
        #[no_mangle]
        pub struct CAllocator {
            pub alloc_func: brotli_alloc_func,
            pub free_func: brotli_free_func,
            pub opaque: *mut c_void,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        impl ::core::clone::Clone for CAllocator {
            #[inline]
            fn clone(&self) -> CAllocator {
                match *self {
                    CAllocator {
                    alloc_func: ref __self_0_0,
                    free_func: ref __self_0_1,
                    opaque: ref __self_0_2 } =>
                    CAllocator{alloc_func:
                                   ::core::clone::Clone::clone(&(*__self_0_0)),
                               free_func:
                                   ::core::clone::Clone::clone(&(*__self_0_1)),
                               opaque:
                                   ::core::clone::Clone::clone(&(*__self_0_2)),},
                }
            }
        }
        unsafe impl Send for CAllocator { }
    }
    pub mod alloc_util {
        use core;
        #[cfg(feature = "std")]
        use std;
        use ::alloc;
        use super::interface::{c_void, CAllocator};
        #[cfg(feature = "std")]
        use std::vec::Vec;
        #[cfg(feature = "std")]
        pub use std::boxed::Box;
        #[cfg(feature = "std")]
        pub struct MemoryBlock<Ty: Sized + Default>(Box<[Ty]>);
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> Default for MemoryBlock<Ty> {
            fn default() -> Self {
                MemoryBlock(Vec::<Ty>::new().into_boxed_slice())
            }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> alloc::SliceWrapper<Ty> for MemoryBlock<Ty>
         {
            fn slice(&self) -> &[Ty] { &self.0[..] }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> alloc::SliceWrapperMut<Ty> for
         MemoryBlock<Ty> {
            fn slice_mut(&mut self) -> &mut [Ty] { &mut self.0[..] }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> core::ops::Index<usize> for MemoryBlock<Ty>
         {
            type Output = Ty;
            fn index(&self, index: usize) -> &Ty { &self.0[index] }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> core::ops::IndexMut<usize> for
         MemoryBlock<Ty> {
            fn index_mut(&mut self, index: usize) -> &mut Ty {
                &mut self.0[index]
            }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default> Drop for MemoryBlock<Ty> {
            fn drop(&mut self) {
                if self.0.len() != 0 {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(&["leaking memory block of length ",
                                                                       " element size: ",
                                                                       "\n"],
                                                                     &match (&self.0.len(),
                                                                             &core::mem::size_of::<Ty>())
                                                                          {
                                                                          (arg0,
                                                                           arg1)
                                                                          =>
                                                                          [::core::fmt::ArgumentV1::new(arg0,
                                                                                                        ::core::fmt::Display::fmt),
                                                                           ::core::fmt::ArgumentV1::new(arg1,
                                                                                                        ::core::fmt::Display::fmt)],
                                                                      }));
                    let to_forget =
                        core::mem::replace(self, MemoryBlock::default());
                    core::mem::forget(to_forget);
                }
            }
        }
        pub struct SubclassableAllocator {
            alloc: CAllocator,
        }
        impl SubclassableAllocator {
            pub unsafe fn new(sub_alloc: CAllocator) -> Self {
                SubclassableAllocator{alloc: sub_alloc,}
            }
        }
        #[cfg(feature = "std")]
        impl <Ty: Sized + Default + Clone> alloc::Allocator<Ty> for
         SubclassableAllocator {
            type AllocatedMemory = MemoryBlock<Ty>;
            fn alloc_cell(&mut self, size: usize) -> MemoryBlock<Ty> {
                if size == 0 { return MemoryBlock::<Ty>::default(); }
                if let Some(alloc_fn) = self.alloc.alloc_func {
                    let ptr =
                        alloc_fn(self.alloc.opaque,
                                 size * core::mem::size_of::<Ty>());
                    let typed_ptr =
                        unsafe {
                            core::mem::transmute::<*mut c_void, *mut Ty>(ptr)
                        };
                    let slice_ref =
                        unsafe {
                            super::slice_from_raw_parts_or_nil_mut(typed_ptr,
                                                                   size)
                        };
                    for item in slice_ref.iter_mut() {
                        unsafe { core::ptr::write(item, Ty::default()) };
                    }
                    return MemoryBlock(unsafe { Box::from_raw(slice_ref) })
                }
                MemoryBlock(::std_alloc::vec::from_elem(Ty::default(),
                                                    size).into_boxed_slice())
            }
            fn free_cell(&mut self, mut bv: MemoryBlock<Ty>) {
                if (*bv.0).len() != 0 {
                    if let Some(_) = self.alloc.alloc_func {
                        let slice_ptr = (*bv.0).as_mut_ptr();
                        let _box_ptr =
                            Box::into_raw(core::mem::replace(&mut bv.0,
                                                             Vec::<Ty>::new().into_boxed_slice()));
                        if let Some(free_fn) = self.alloc.free_func {
                            unsafe {
                                free_fn(self.alloc.opaque,
                                        core::mem::transmute::<*mut Ty,
                                                               *mut c_void>(slice_ptr))
                            };
                        }
                    } else {
                        let _to_free =
                            core::mem::replace(&mut bv.0,
                                               Vec::<Ty>::new().into_boxed_slice());
                    }
                }
            }
        }
        #[cfg(feature = "std")]
        pub unsafe fn free_stdlib<T>(ptr: *mut T, size: usize) {
            let slice_ref = super::slice_from_raw_parts_or_nil_mut(ptr, size);
            Box::from_raw(slice_ref);
        }
        #[cfg(feature = "std")]
        pub fn alloc_stdlib<T: Sized + Default + Copy + Clone>(size: usize)
         -> *mut T {
            std::panic::catch_unwind(||
                                         {
                                             let mut newly_allocated =
                                                 ::std_alloc::vec::from_elem(T::default(),
                                                                         size).into_boxed_slice();
                                             let slice_ptr =
                                                 newly_allocated.as_mut_ptr();
                                             let _box_ptr =
                                                 Box::into_raw(newly_allocated);
                                             slice_ptr
                                         }).unwrap_or(core::ptr::null_mut())
        }
    }
    use self::alloc_util::SubclassableAllocator;
    use alloc::{Allocator, SliceWrapper, SliceWrapperMut, StackAllocator,
                AllocatedStackMemory, bzero};
    use self::interface::{CAllocator, c_void, BrotliDecoderParameter,
                          BrotliDecoderResult, brotli_alloc_func,
                          brotli_free_func};
    use ::BrotliResult;
    use ::BrotliDecoderReturnInfo;
    use ::brotli_decode;
    pub use ::HuffmanCode;
    pub use super::state::{BrotliDecoderErrorCode, BrotliState};
    pub unsafe fn slice_from_raw_parts_or_nil<'a,
                                              T>(data: *const T, len: usize)
     -> &'a [T] {
        if len == 0 { return &[]; }
        slice::from_raw_parts(data, len)
    }
    pub unsafe fn slice_from_raw_parts_or_nil_mut<'a,
                                                  T>(data: *mut T, len: usize)
     -> &'a mut [T] {
        if len == 0 { return &mut []; }
        slice::from_raw_parts_mut(data, len)
    }
    #[cfg(feature = "std")]
    type BrotliAdditionalErrorData = boxed::Box<any::Any + Send + 'static>;
    #[repr(C)]
    #[no_mangle]
    pub struct BrotliDecoderState {
        pub custom_allocator: CAllocator,
        pub decompressor: ::BrotliState<SubclassableAllocator,
                                        SubclassableAllocator,
                                        SubclassableAllocator>,
    }
    #[cfg(feature = "std")]
    fn brotli_new_decompressor_without_custom_alloc(to_box:
                                                        BrotliDecoderState)
     -> *mut BrotliDecoderState {
        alloc_util::Box::<BrotliDecoderState>::into_raw(alloc_util::Box::<BrotliDecoderState>::new(to_box))
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderCreateInstance(alloc_func:
                                                         brotli_alloc_func,
                                                     free_func:
                                                         brotli_free_func,
                                                     opaque: *mut c_void)
     -> *mut BrotliDecoderState {
        match catch_panic_state(||
                                    {
                                        let allocators =
                                            CAllocator{alloc_func: alloc_func,
                                                       free_func: free_func,
                                                       opaque: opaque,};
                                        let custom_dictionary =
                                            <SubclassableAllocator as
                                                Allocator<u8>>::AllocatedMemory::default();
                                        let to_box =
                                            BrotliDecoderState{custom_allocator:
                                                                   allocators.clone(),
                                                               decompressor:
                                                                   ::BrotliState::new_with_custom_dictionary(SubclassableAllocator::new(allocators.clone()),
                                                                                                             SubclassableAllocator::new(allocators.clone()),
                                                                                                             SubclassableAllocator::new(allocators.clone()),
                                                                                                             custom_dictionary),};
                                        if let Some(alloc) = alloc_func {
                                            if free_func.is_none() {
                                                {
                                                    ::std::rt::begin_panic("either both alloc and free must exist or neither")
                                                };
                                            }
                                            let ptr =
                                                alloc(allocators.opaque,
                                                      core::mem::size_of::<BrotliDecoderState>());
                                            let brotli_decoder_state_ptr =
                                                core::mem::transmute::<*mut c_void,
                                                                       *mut BrotliDecoderState>(ptr);
                                            core::ptr::write(brotli_decoder_state_ptr,
                                                             to_box);
                                            brotli_decoder_state_ptr
                                        } else {
                                            brotli_new_decompressor_without_custom_alloc(to_box)
                                        }
                                    }) {
            Ok(ret) => ret,
            Err(mut e) => {
                error_print(core::ptr::null_mut(), &mut e);
                core::ptr::null_mut()
            }
        }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderSetParameter(_state_ptr:
                                                       *mut BrotliDecoderState,
                                                   _selector:
                                                       BrotliDecoderParameter,
                                                   _value: u32) {
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDecompressPrealloc(encoded_size: usize,
                                                         encoded_buffer:
                                                             *const u8,
                                                         decoded_size: usize,
                                                         decoded_buffer:
                                                             *mut u8,
                                                         scratch_u8_size:
                                                             usize,
                                                         scratch_u8_buffer:
                                                             *mut u8,
                                                         scratch_u32_size:
                                                             usize,
                                                         scratch_u32_buffer:
                                                             *mut u32,
                                                         scratch_hc_size:
                                                             usize,
                                                         scratch_hc_buffer:
                                                             *mut HuffmanCode)
     -> BrotliDecoderReturnInfo {
        let input = slice_from_raw_parts_or_nil(encoded_buffer, encoded_size);
        let output =
            slice_from_raw_parts_or_nil_mut(decoded_buffer, decoded_size);
        let scratch_u8 =
            slice_from_raw_parts_or_nil_mut(scratch_u8_buffer,
                                            scratch_u8_size);
        let scratch_u32 =
            slice_from_raw_parts_or_nil_mut(scratch_u32_buffer,
                                            scratch_u32_size);
        let scratch_hc =
            slice_from_raw_parts_or_nil_mut(scratch_hc_buffer,
                                            scratch_hc_size);
        ::brotli_decode_prealloc(input, output, scratch_u8, scratch_u32,
                                 scratch_hc)
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDecompressWithReturnInfo(encoded_size:
                                                                   usize,
                                                               encoded_buffer:
                                                                   *const u8,
                                                               decoded_size:
                                                                   usize,
                                                               decoded_buffer:
                                                                   *mut u8)
     -> BrotliDecoderReturnInfo {
        let input = slice_from_raw_parts_or_nil(encoded_buffer, encoded_size);
        let output_scratch =
            slice_from_raw_parts_or_nil_mut(decoded_buffer, decoded_size);
        ::brotli_decode(input, output_scratch)
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDecompress(encoded_size: usize,
                                                 encoded_buffer: *const u8,
                                                 decoded_size: *mut usize,
                                                 decoded_buffer: *mut u8)
     -> BrotliDecoderResult {
        let res =
            BrotliDecoderDecompressWithReturnInfo(encoded_size,
                                                  encoded_buffer,
                                                  *decoded_size,
                                                  decoded_buffer);
        *decoded_size = res.decoded_size;
        match res.result {
            BrotliResult::ResultSuccess =>
            BrotliDecoderResult::BROTLI_DECODER_RESULT_SUCCESS,
            _ => BrotliDecoderResult::BROTLI_DECODER_RESULT_ERROR,
        }
    }
    #[cfg(all(feature = "std", not(feature = "pass-through-ffi-panics")))]
    fn catch_panic<F: FnOnce() -> BrotliDecoderResult +
                   panic::UnwindSafe>(f: F)
     -> thread::Result<BrotliDecoderResult> {
        panic::catch_unwind(f)
    }
    #[cfg(all(feature = "std", not(feature = "pass-through-ffi-panics")))]
    fn catch_panic_state<F: FnOnce() -> *mut BrotliDecoderState +
                         panic::UnwindSafe>(f: F)
     -> thread::Result<*mut BrotliDecoderState> {
        panic::catch_unwind(f)
    }
    #[cfg(all(feature = "std", not(feature = "pass-through-ffi-panics")))]
    unsafe fn error_print(state_ptr: *mut BrotliDecoderState,
                          err: &mut BrotliAdditionalErrorData) {
        if let Some(st) = err.downcast_ref::<&str>() {
            if !state_ptr.is_null() {
                let mut str_cpy = [0u8; 256];
                let src: &[u8] = st.as_ref();
                let xlen = core::cmp::min(src.len(), str_cpy.len() - 1);
                str_cpy.split_at_mut(xlen).0.clone_from_slice(src.split_at(xlen).0);
                str_cpy[xlen] = 0;
                (*state_ptr).decompressor.mtf_or_error_string = Err(str_cpy);
            }
            let _ign =
                (&mut io::stderr()).write_fmt(::core::fmt::Arguments::new_v1(&["panic: ",
                                                                               "\n"],
                                                                             &match (&st,)
                                                                                  {
                                                                                  (arg0,)
                                                                                  =>
                                                                                  [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                ::core::fmt::Display::fmt)],
                                                                              }));
        } else {
            if let Some(st) = err.downcast_ref::<string::String>() {
                if !state_ptr.is_null() {
                    let mut str_cpy = [0u8; 256];
                    let src: &[u8] = st.as_ref();
                    let xlen = core::cmp::min(src.len(), str_cpy.len() - 1);
                    str_cpy.split_at_mut(xlen).0.clone_from_slice(src.split_at(xlen).0);
                    str_cpy[xlen] = 0;
                    (*state_ptr).decompressor.mtf_or_error_string =
                        Err(str_cpy);
                }
                let _ign =
                    (&mut io::stderr()).write_fmt(::core::fmt::Arguments::new_v1(&["Internal Error ",
                                                                                   "\n"],
                                                                                 &match (&st,)
                                                                                      {
                                                                                      (arg0,)
                                                                                      =>
                                                                                      [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                    ::core::fmt::Debug::fmt)],
                                                                                  }));
            } else {
                let _ign =
                    (&mut io::stderr()).write_fmt(::core::fmt::Arguments::new_v1(&["Internal Error ",
                                                                                   "\n"],
                                                                                 &match (&err,)
                                                                                      {
                                                                                      (arg0,)
                                                                                      =>
                                                                                      [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                    ::core::fmt::Debug::fmt)],
                                                                                  }));
            }
        }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDecompressStream(state_ptr:
                                                           *mut BrotliDecoderState,
                                                       available_in:
                                                           *mut usize,
                                                       input_buf_ptr:
                                                           *mut *const u8,
                                                       available_out:
                                                           *mut usize,
                                                       output_buf_ptr:
                                                           *mut *mut u8,
                                                       mut total_out:
                                                           *mut usize)
     -> BrotliDecoderResult {
        match catch_panic(move ||
                              {
                                  let mut input_offset = 0usize;
                                  let mut output_offset = 0usize;
                                  let mut fallback_total_out = 0usize;
                                  if total_out.is_null() {
                                      total_out = &mut fallback_total_out;
                                  }
                                  let result: BrotliDecoderResult;
                                  {
                                      let input_buf =
                                          slice_from_raw_parts_or_nil(*input_buf_ptr,
                                                                      *available_in);
                                      let output_buf =
                                          slice_from_raw_parts_or_nil_mut(*output_buf_ptr,
                                                                          *available_out);
                                      result =
                                          super::decode::BrotliDecompressStream(&mut *available_in,
                                                                                &mut input_offset,
                                                                                input_buf,
                                                                                &mut *available_out,
                                                                                &mut output_offset,
                                                                                output_buf,
                                                                                &mut *total_out,
                                                                                &mut (*state_ptr).decompressor).into();
                                  }
                                  *input_buf_ptr =
                                      (*input_buf_ptr).offset(input_offset as
                                                                  isize);
                                  *output_buf_ptr =
                                      (*output_buf_ptr).offset(output_offset
                                                                   as isize);
                                  result
                              }) {
            Ok(ret) => ret,
            Err(mut readable_err) => {
                error_print(state_ptr, &mut readable_err);
                (*state_ptr).decompressor.error_code =
                    BrotliDecoderErrorCode::BROTLI_DECODER_ERROR_UNREACHABLE;
                BrotliDecoderResult::BROTLI_DECODER_RESULT_ERROR
            }
        }
    }
    /// Equivalent to BrotliDecoderDecompressStream but with no optional arg and no double indirect ptrs
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDecompressStreaming(state_ptr:
                                                              *mut BrotliDecoderState,
                                                          available_in:
                                                              *mut usize,
                                                          mut input_buf_ptr:
                                                              *const u8,
                                                          available_out:
                                                              *mut usize,
                                                          mut output_buf_ptr:
                                                              *mut u8)
     -> BrotliDecoderResult {
        BrotliDecoderDecompressStream(state_ptr, available_in,
                                      &mut input_buf_ptr, available_out,
                                      &mut output_buf_ptr,
                                      core::ptr::null_mut())
    }
    #[cfg(feature = "std")]
    unsafe fn free_decompressor_no_custom_alloc(state_ptr:
                                                    *mut BrotliDecoderState) {
        let _state = alloc_util::Box::from_raw(state_ptr);
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderMallocU8(state_ptr:
                                                   *mut BrotliDecoderState,
                                               size: usize) -> *mut u8 {
        if let Some(alloc_fn) = (*state_ptr).custom_allocator.alloc_func {
            return core::mem::transmute::<*mut c_void,
                                          *mut u8>(alloc_fn((*state_ptr).custom_allocator.opaque,
                                                            size));
        } else { return alloc_util::alloc_stdlib(size); }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderFreeU8(state_ptr:
                                                 *mut BrotliDecoderState,
                                             data: *mut u8, size: usize) {
        if let Some(free_fn) = (*state_ptr).custom_allocator.free_func {
            free_fn((*state_ptr).custom_allocator.opaque,
                    core::mem::transmute::<*mut u8, *mut c_void>(data));
        } else { alloc_util::free_stdlib(data, size); }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderMallocUsize(state_ptr:
                                                      *mut BrotliDecoderState,
                                                  size: usize) -> *mut usize {
        if let Some(alloc_fn) = (*state_ptr).custom_allocator.alloc_func {
            return core::mem::transmute::<*mut c_void,
                                          *mut usize>(alloc_fn((*state_ptr).custom_allocator.opaque,
                                                               size *
                                                                   core::mem::size_of::<usize>()));
        } else { return alloc_util::alloc_stdlib(size); }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderFreeUsize(state_ptr:
                                                    *mut BrotliDecoderState,
                                                data: *mut usize,
                                                size: usize) {
        if let Some(free_fn) = (*state_ptr).custom_allocator.free_func {
            free_fn((*state_ptr).custom_allocator.opaque,
                    core::mem::transmute::<*mut usize, *mut c_void>(data));
        } else { alloc_util::free_stdlib(data, size); }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderDestroyInstance(state_ptr:
                                                          *mut BrotliDecoderState) {
        if let Some(_) = (*state_ptr).custom_allocator.alloc_func {
            if let Some(free_fn) = (*state_ptr).custom_allocator.free_func {
                let _to_free = core::ptr::read(state_ptr);
                let ptr =
                    core::mem::transmute::<*mut BrotliDecoderState,
                                           *mut c_void>(state_ptr);
                free_fn((*state_ptr).custom_allocator.opaque, ptr);
            }
        } else { free_decompressor_no_custom_alloc(state_ptr); }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderHasMoreOutput(state_ptr:
                                                        *const BrotliDecoderState)
     -> i32 {
        if super::decode::BrotliDecoderHasMoreOutput(&(*state_ptr).decompressor)
           {
            1
        } else { 0 }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderTakeOutput(state_ptr:
                                                     *mut BrotliDecoderState,
                                                 size: *mut usize)
     -> *const u8 {
        super::decode::BrotliDecoderTakeOutput(&mut (*state_ptr).decompressor,
                                               &mut *size).as_ptr()
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderIsUsed(state_ptr:
                                                 *const BrotliDecoderState)
     -> i32 {
        if super::decode::BrotliDecoderIsUsed(&(*state_ptr).decompressor) {
            1
        } else { 0 }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderIsFinished(state_ptr:
                                                     *const BrotliDecoderState)
     -> i32 {
        if super::decode::BrotliDecoderIsFinished(&(*state_ptr).decompressor)
           {
            1
        } else { 0 }
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderGetErrorCode(state_ptr:
                                                       *const BrotliDecoderState)
     -> BrotliDecoderErrorCode {
        super::decode::BrotliDecoderGetErrorCode(&(*state_ptr).decompressor)
    }
    #[no_mangle]
    pub unsafe extern fn BrotliDecoderGetErrorString(state_ptr:
                                                         *const BrotliDecoderState)
     -> *const u8 {
        if !state_ptr.is_null() {
            if let &Err(ref msg) =
                   &(*state_ptr).decompressor.mtf_or_error_string {
                return msg.as_ptr();
            }
        }
        BrotliDecoderErrorString(super::decode::BrotliDecoderGetErrorCode(&(*state_ptr).decompressor))
    }
    #[no_mangle]
    pub extern fn BrotliDecoderErrorString(c: BrotliDecoderErrorCode)
     -> *const u8 {
        ::state::BrotliDecoderErrorStr(c).as_ptr()
    }
    #[no_mangle]
    pub extern fn BrotliDecoderVersion() -> u32 { 0x1000f00 }
}
pub use reader::{DecompressorCustomIo};
#[cfg(feature = "std")]
pub use reader::{Decompressor};
pub use writer::{DecompressorWriterCustomIo};
#[cfg(feature = "std")]
pub use writer::{DecompressorWriter};
pub use io_wrappers::{CustomRead, CustomWrite};
#[cfg(feature = "std")]
pub use io_wrappers::{IntoIoReader, IoReaderWrapper, IntoIoWriter,
                      IoWriterWrapper};
pub use decode::{BrotliDecompressStream, BrotliResult,
                 BrotliDecoderHasMoreOutput, BrotliDecoderIsFinished,
                 BrotliDecoderTakeOutput};
#[cfg(feature = "std")]
pub fn BrotliDecompress<InputType,
                        OutputType>(r: &mut InputType, w: &mut OutputType)
 -> Result<(), io::Error> where InputType: Read, OutputType: Write {
    let mut input_buffer: [u8; 4096] = [0; 4096];
    let mut output_buffer: [u8; 4096] = [0; 4096];
    BrotliDecompressCustomAlloc(r, w, &mut input_buffer[..],
                                &mut output_buffer[..],
                                StandardAlloc::default(),
                                StandardAlloc::default(),
                                StandardAlloc::default())
}
#[cfg(feature = "std")]
pub fn BrotliDecompressCustomDict<InputType,
                                  OutputType>(r: &mut InputType,
                                              w: &mut OutputType,
                                              input_buffer: &mut [u8],
                                              output_buffer: &mut [u8],
                                              custom_dictionary:
                                                  std::vec::Vec<u8>)
 -> Result<(), io::Error> where InputType: Read, OutputType: Write {
    let mut alloc_u8 = brotli_alloc::BrotliAlloc::<u8>::new();
    let mut input_buffer_backing;
    let mut output_buffer_backing;
    {
        let mut borrowed_input_buffer = input_buffer;
        let mut borrowed_output_buffer = output_buffer;
        if borrowed_input_buffer.len() == 0 {
            input_buffer_backing = alloc_u8.alloc_cell(4096);
            borrowed_input_buffer = input_buffer_backing.slice_mut();
        }
        if borrowed_output_buffer.len() == 0 {
            output_buffer_backing = alloc_u8.alloc_cell(4096);
            borrowed_output_buffer = output_buffer_backing.slice_mut();
        }
        let dict = alloc_u8.take_ownership(custom_dictionary);
        BrotliDecompressCustomIoCustomDict(&mut IoReaderWrapper::<InputType>(r),
                                           &mut IoWriterWrapper::<OutputType>(w),
                                           borrowed_input_buffer,
                                           borrowed_output_buffer, alloc_u8,
                                           brotli_alloc::BrotliAlloc::<u32>::new(),
                                           brotli_alloc::BrotliAlloc::<HuffmanCode>::new(),
                                           dict,
                                           Error::new(ErrorKind::UnexpectedEof,
                                                      "Unexpected EOF"))
    }
}
#[cfg(feature = "std")]
pub fn BrotliDecompressCustomAlloc<InputType, OutputType,
                                   AllocU8: Allocator<u8>,
                                   AllocU32: Allocator<u32>,
                                   AllocHC: Allocator<HuffmanCode>>(r:
                                                                        &mut InputType,
                                                                    w:
                                                                        &mut OutputType,
                                                                    input_buffer:
                                                                        &mut [u8],
                                                                    output_buffer:
                                                                        &mut [u8],
                                                                    alloc_u8:
                                                                        AllocU8,
                                                                    alloc_u32:
                                                                        AllocU32,
                                                                    alloc_hc:
                                                                        AllocHC)
 -> Result<(), io::Error> where InputType: Read, OutputType: Write {
    BrotliDecompressCustomIo(&mut IoReaderWrapper::<InputType>(r),
                             &mut IoWriterWrapper::<OutputType>(w),
                             input_buffer, output_buffer, alloc_u8, alloc_u32,
                             alloc_hc,
                             Error::new(ErrorKind::UnexpectedEof,
                                        "Unexpected EOF"))
}
pub fn BrotliDecompressCustomIo<ErrType, InputType, OutputType,
                                AllocU8: Allocator<u8>,
                                AllocU32: Allocator<u32>,
                                AllocHC: Allocator<HuffmanCode>>(r:
                                                                     &mut InputType,
                                                                 w:
                                                                     &mut OutputType,
                                                                 input_buffer:
                                                                     &mut [u8],
                                                                 output_buffer:
                                                                     &mut [u8],
                                                                 alloc_u8:
                                                                     AllocU8,
                                                                 alloc_u32:
                                                                     AllocU32,
                                                                 alloc_hc:
                                                                     AllocHC,
                                                                 unexpected_eof_error_constant:
                                                                     ErrType)
 -> Result<(), ErrType> where InputType: CustomRead<ErrType>,
 OutputType: CustomWrite<ErrType> {
    BrotliDecompressCustomIoCustomDict(r, w, input_buffer, output_buffer,
                                       alloc_u8, alloc_u32, alloc_hc,
                                       AllocU8::AllocatedMemory::default(),
                                       unexpected_eof_error_constant)
}
pub fn BrotliDecompressCustomIoCustomDict<ErrType, InputType, OutputType,
                                          AllocU8: Allocator<u8>,
                                          AllocU32: Allocator<u32>,
                                          AllocHC: Allocator<HuffmanCode>>(r:
                                                                               &mut InputType,
                                                                           w:
                                                                               &mut OutputType,
                                                                           input_buffer:
                                                                               &mut [u8],
                                                                           output_buffer:
                                                                               &mut [u8],
                                                                           alloc_u8:
                                                                               AllocU8,
                                                                           alloc_u32:
                                                                               AllocU32,
                                                                           alloc_hc:
                                                                               AllocHC,
                                                                           custom_dictionary:
                                                                               AllocU8::AllocatedMemory,
                                                                           unexpected_eof_error_constant:
                                                                               ErrType)
 -> Result<(), ErrType> where InputType: CustomRead<ErrType>,
 OutputType: CustomWrite<ErrType> {
    let mut brotli_state =
        BrotliState::new_with_custom_dictionary(alloc_u8, alloc_u32, alloc_hc,
                                                custom_dictionary);
    if !(input_buffer.len() != 0) {
        ::core::panicking::panic("assertion failed: input_buffer.len() != 0")
    };
    if !(output_buffer.len() != 0) {
        ::core::panicking::panic("assertion failed: output_buffer.len() != 0")
    };
    let mut available_out: usize = output_buffer.len();
    let mut available_in: usize = 0;
    let mut input_offset: usize = 0;
    let mut output_offset: usize = 0;
    let mut result: BrotliResult = BrotliResult::NeedsMoreInput;
    loop  {
        match result {
            BrotliResult::NeedsMoreInput => {
                input_offset = 0;
                match r.read(input_buffer) {
                    Err(e) => { return Err(e); }
                    Ok(size) => {
                        if size == 0 {
                            return Err(unexpected_eof_error_constant);
                        }
                        available_in = size;
                    }
                }
            }
            BrotliResult::NeedsMoreOutput => {
                let mut total_written: usize = 0;
                while total_written < output_offset {
                    match w.write(&output_buffer[total_written..output_offset])
                        {
                        Err(e) => { return Result::Err(e); }
                        Ok(cur_written) => {
                            {
                                match (&(cur_written == 0), &false) {
                                    (left_val, right_val) => {
                                        if !(*left_val == *right_val) {
                                            ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                                          "`,\n right: `",
                                                                                                          "`"],
                                                                                                        &match (&&*left_val,
                                                                                                                &&*right_val)
                                                                                                             {
                                                                                                             (arg0,
                                                                                                              arg1)
                                                                                                             =>
                                                                                                             [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                                           ::core::fmt::Debug::fmt),
                                                                                                              ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                                           ::core::fmt::Debug::fmt)],
                                                                                                         }))
                                        }
                                    }
                                }
                            };
                            total_written += cur_written;
                        }
                    }
                }
                output_offset = 0;
            }
            BrotliResult::ResultSuccess => break ,
            BrotliResult::ResultFailure => {
                return Err(unexpected_eof_error_constant);
            }
        }
        let mut written: usize = 0;
        result =
            BrotliDecompressStream(&mut available_in, &mut input_offset,
                                   input_buffer, &mut available_out,
                                   &mut output_offset, output_buffer,
                                   &mut written, &mut brotli_state);
        if output_offset != 0 {
            let mut total_written: usize = 0;
            while total_written < output_offset {
                match w.write(&output_buffer[total_written..output_offset]) {
                    Err(e) => { return Result::Err(e); }
                    Ok(cur_written) => {
                        {
                            match (&(cur_written == 0), &false) {
                                (left_val, right_val) => {
                                    if !(*left_val == *right_val) {
                                        ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["assertion failed: `(left == right)`\n  left: `",
                                                                                                      "`,\n right: `",
                                                                                                      "`"],
                                                                                                    &match (&&*left_val,
                                                                                                            &&*right_val)
                                                                                                         {
                                                                                                         (arg0,
                                                                                                          arg1)
                                                                                                         =>
                                                                                                         [::core::fmt::ArgumentV1::new(arg0,
                                                                                                                                       ::core::fmt::Debug::fmt),
                                                                                                          ::core::fmt::ArgumentV1::new(arg1,
                                                                                                                                       ::core::fmt::Debug::fmt)],
                                                                                                     }))
                                    }
                                }
                            }
                        };
                        total_written += cur_written;
                    }
                }
            }
            output_offset = 0;
            available_out = output_buffer.len()
        }
    }
    Ok(())
}
#[cfg(feature = "std")]
pub fn copy_from_to<R: io::Read, W: io::Write>(mut r: R, mut w: W)
 -> io::Result<usize> {
    let mut buffer: [u8; 65536] = [0; 65536];
    let mut out_size: usize = 0;
    loop  {
        match r.read(&mut buffer[..]) {
            Err(e) => {
                if let io::ErrorKind::Interrupted = e.kind() { continue  }
                return Err(e);
            }
            Ok(size) => {
                if size == 0 {
                    break ;
                } else {
                    match w.write_all(&buffer[..size]) {
                        Err(e) => {
                            if let io::ErrorKind::Interrupted = e.kind() {
                                continue
                            }
                            return Err(e);
                        }
                        Ok(_) => out_size += size,
                    }
                }
            }
        }
    }
    Ok(out_size)
}
#[no_mangle]
#[repr(C)]
pub struct BrotliDecoderReturnInfo {
    pub decoded_size: usize,
    pub error_string: [u8; 256],
    pub error_code: state::BrotliDecoderErrorCode,
    pub result: BrotliResult,
}
impl BrotliDecoderReturnInfo {
    fn new<AllocU8: Allocator<u8>, AllocU32: Allocator<u32>,
           AllocHC: Allocator<HuffmanCode>>(state:
                                                &BrotliState<AllocU8,
                                                             AllocU32,
                                                             AllocHC>,
                                            result: BrotliResult,
                                            output_size: usize) -> Self {
        let mut ret =
            BrotliDecoderReturnInfo{result: result,
                                    decoded_size: output_size,
                                    error_code:
                                        decode::BrotliDecoderGetErrorCode(&state),
                                    error_string:
                                        if let &Err(msg) =
                                               &state.mtf_or_error_string {
                                            msg
                                        } else { [0u8; 256] },};
        if ret.error_string[0] == 0 {
            let error_string = state::BrotliDecoderErrorStr(ret.error_code);
            let to_copy =
                core::cmp::min(error_string.len(),
                               ret.error_string.len() - 1);
            for (dst, src) in
                ret.error_string[..to_copy].iter_mut().zip(error_string[..to_copy].bytes())
                {
                *dst = src;
            }
        }
        ret
    }
}
struct MemPool<'a, T: 'a> {
    freelist: [&'a mut [T]; 512],
}
impl <'a, T: 'a> Default for MemPool<'a, T> {
    fn default() -> Self {
        return MemPool::<'a,
                         T>{freelist:
                                [&mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut [], &mut [], &mut [], &mut [],
                                 &mut [], &mut []],};
    }
}
impl <'a, T: 'a> SliceWrapper<&'a mut [T]> for MemPool<'a, T> {
    fn slice(&self) -> &[&'a mut [T]] { return &self.freelist; }
}
impl <'a, T: 'a> SliceWrapperMut<&'a mut [T]> for MemPool<'a, T> {
    fn slice_mut(&mut self) -> &mut [&'a mut [T]] {
        return &mut self.freelist;
    }
}
impl <'a, T: 'a> ops::Index<usize> for MemPool<'a, T> {
    type Output = [T];
    fn index<'b>(&'b self, _index: usize) -> &'b [T] {
        return &self.freelist[_index];
    }
}
impl <'a, T: 'a> ops::IndexMut<usize> for MemPool<'a, T> {
    fn index_mut<'b>(&'b mut self, _index: usize) -> &'b mut [T] {
        return &mut self.freelist[_index];
    }
}
impl <'a, T: 'a> MemPool<'a, T> {
    fn new_allocator(global_buffer: &'a mut [T], initializer: fn(&mut [T]))
     -> StackAllocator<'a, T, MemPool<'a, T>> {
        let mut retval =
            StackAllocator::<T,
                             MemPool<T>>{nop: &mut [],
                                         system_resources:
                                             MemPool::<T>::default(),
                                         free_list_start: 512,
                                         free_list_overflow_count: 0,
                                         initialize: initializer,};
        retval.free_cell(AllocatedStackMemory::<T>{mem: global_buffer,});
        return retval;
    }
}
pub fn brotli_decode_prealloc(input: &[u8], mut output: &mut [u8],
                              scratch_u8: &mut [u8], scratch_u32: &mut [u32],
                              scratch_hc: &mut [HuffmanCode])
 -> BrotliDecoderReturnInfo {
    let stack_u8_allocator = MemPool::<u8>::new_allocator(scratch_u8, bzero);
    let stack_u32_allocator =
        MemPool::<u32>::new_allocator(scratch_u32, bzero);
    let stack_hc_allocator =
        MemPool::<HuffmanCode>::new_allocator(scratch_hc, bzero);
    let mut available_out = output.len();
    let mut available_in: usize = input.len();
    let mut input_offset: usize = 0;
    let mut output_offset: usize = 0;
    let mut written: usize = 0;
    let mut brotli_state =
        BrotliState::new(stack_u8_allocator, stack_u32_allocator,
                         stack_hc_allocator);
    let result =
        ::BrotliDecompressStream(&mut available_in, &mut input_offset,
                                 &input[..], &mut available_out,
                                 &mut output_offset, &mut output,
                                 &mut written, &mut brotli_state);
    let return_info =
        BrotliDecoderReturnInfo::new(&brotli_state, result.into(),
                                     output_offset);
    return_info
}
#[cfg(feature = "std")]
pub fn brotli_decode(input: &[u8], mut output: &mut [u8])
 -> BrotliDecoderReturnInfo {
    let mut available_out = output.len();
    let mut available_in: usize = input.len();
    let mut input_offset: usize = 0;
    let mut output_offset: usize = 0;
    let mut written: usize = 0;
    let mut brotli_state =
        BrotliState::new(StandardAlloc::default(), StandardAlloc::default(),
                         StandardAlloc::default());
    let result =
        ::BrotliDecompressStream(&mut available_in, &mut input_offset,
                                 &input[..], &mut available_out,
                                 &mut output_offset, &mut output,
                                 &mut written, &mut brotli_state);
    let return_info =
        BrotliDecoderReturnInfo::new(&brotli_state, result.into(),
                                     output_offset);
    return_info
}
